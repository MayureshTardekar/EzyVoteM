Directory structure:
└── EzyVoteM/
    ├── Volta.txt
    ├── codes.txt
    ├── eslint.config.js
    ├── files_structure.txt
    ├── hello.txt
    ├── index.html
    ├── package.json
    ├── postcss.config.js
    ├── postman.txt
    ├── steps.txt
    ├── tailwind.config.js
    ├── tsconfig.app.json
    ├── tsconfig.json
    ├── tsconfig.node.json
    ├── vite.config.ts
    ├── backend/
    │   ├── package-lock.json
    │   ├── package.json
    │   ├── server.js
    │   ├── config/
    │   │   └── adminWallets.json
    │   ├── controllers/
    │   │   ├── adminController.js
    │   │   └── authController.js
    │   ├── middleware/
    │   │   └── verifyAdmin.js
    │   └── routes/
    │       ├── adminRoutes.js
    │       └── authRoutes.js
    ├── favicon/
    │   └── site.webmanifest
    └── src/
        ├── App.tsx
        ├── i18n.js
        ├── index.css
        ├── main.tsx
        ├── vite-env.d.ts
        ├── components/
        │   ├── BackToTopButton.tsx
        │   ├── Button.tsx
        │   ├── Card.tsx
        │   ├── DashboardAnalytics.tsx
        │   ├── Footer.tsx
        │   ├── FooterAbout.tsx
        │   ├── FooterContact.tsx
        │   ├── FooterPrivacyPolicy.tsx
        │   ├── LanguageSelector.tsx
        │   ├── LoadingSpinner.tsx
        │   ├── NavUnderline.tsx
        │   ├── Navbar.tsx
        │   ├── Sidebar.tsx
        │   ├── TermsAndConditionsPopup.tsx
        │   ├── UpcomingElections.tsx
        │   └── WalletContext.tsx
        ├── locales/
        │   ├── bn/
        │   │   └── translation.json
        │   ├── en/
        │   │   └── translation.json
        │   ├── gu/
        │   │   └── translation.json
        │   ├── hi/
        │   │   └── translation.json
        │   ├── mr/
        │   │   └── translation.json
        │   └── ta/
        │       └── translation.json
        ├── pages/
        │   ├── About.tsx
        │   ├── AdminDashboard.tsx
        │   ├── Contact.tsx
        │   ├── CreateEvent.tsx
        │   ├── CreateSecurePage.tsx
        │   ├── DownloadReports.tsx
        │   ├── Home.tsx
        │   ├── LiveResults.tsx
        │   ├── Notifications.tsx
        │   ├── Privacy.tsx
        │   ├── Reports.tsx
        │   ├── SecurelyVoting.tsx
        │   ├── SystemLogs.tsx
        │   ├── Tutorials.tsx
        │   ├── UserDashboard.tsx
        │   ├── ViewPastElections.tsx
        │   ├── VoteNow.tsx
        │   └── VotingHistory.tsx
        └── sounds/

================================================
File: Volta.txt
================================================
// Add Custom Network

Network name
Vlota

RPC URL
https://volta-rpc.energyweb.org

Chain ID
73799

Currency Symbol
VT

Block Explorer URL
https://volta-explorer.energyweb.org


================================================
File: codes.txt
================================================



================================================
File: eslint.config.js
================================================
import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  }
);



================================================
File: files_structure.txt
================================================
Directory structure:
└── EzyVoteM/
    ├── Volta.txt
    ├── codes.txt
    ├── eslint.config.js
    ├── files_structure.txt
    ├── hello.txt
    ├── index.html
    ├── package.json
    ├── postcss.config.js
    ├── postman.txt
    ├── steps.txt
    ├── tailwind.config.js
    ├── tsconfig.app.json
    ├── tsconfig.json
    ├── tsconfig.node.json
    ├── vite.config.ts
    ├── backend/
    │   ├── package-lock.json
    │   ├── package.json
    │   ├── server.js
    │   ├── config/
    │   │   └── adminWallets.json
    │   ├── controllers/
    │   │   ├── adminController.js
    │   │   └── authController.js
    │   ├── middleware/
    │   │   └── verifyAdmin.js
    │   └── routes/
    │       ├── adminRoutes.js
    │       └── authRoutes.js
    ├── favicon/
    │   └── site.webmanifest
    └── src/
        ├── App.tsx
        ├── i18n.js
        ├── index.css
        ├── main.tsx
        ├── vite-env.d.ts
        ├── components/
        │   ├── BackToTopButton.tsx
        │   ├── Button.tsx
        │   ├── Card.tsx
        │   ├── DashboardAnalytics.tsx
        │   ├── Footer.tsx
        │   ├── FooterAbout.tsx
        │   ├── FooterContact.tsx
        │   ├── FooterPrivacyPolicy.tsx
        │   ├── LanguageSelector.tsx
        │   ├── LoadingSpinner.tsx
        │   ├── NavUnderline.tsx
        │   ├── Navbar.tsx
        │   ├── Sidebar.tsx
        │   ├── TermsAndConditionsPopup.tsx
        │   ├── UpcomingElections.tsx
        │   └── WalletContext.tsx
        ├── locales/
        │   ├── bn/
        │   │   └── translation.json
        │   ├── en/
        │   │   └── translation.json
        │   ├── gu/
        │   │   └── translation.json
        │   ├── hi/
        │   │   └── translation.json
        │   ├── mr/
        │   │   └── translation.json
        │   └── ta/
        │       └── translation.json
        ├── pages/
        │   ├── About.tsx
        │   ├── AdminDashboard.tsx
        │   ├── Contact.tsx
        │   ├── CreateEvent.tsx
        │   ├── CreateSecurePage.tsx
        │   ├── DownloadReports.tsx
        │   ├── Home.tsx
        │   ├── LiveResults.tsx
        │   ├── Notifications.tsx
        │   ├── Privacy.tsx
        │   ├── Reports.tsx
        │   ├── SecurelyVoting.tsx
        │   ├── SystemLogs.tsx
        │   ├── Tutorials.tsx
        │   ├── UserDashboard.tsx
        │   ├── ViewPastElections.tsx
        │   ├── VoteNow.tsx
        │   └── VotingHistory.tsx
        └── sounds/



================================================
File: hello.txt
================================================
Hey this is the test branch


================================================
File: index.html
================================================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="android-chrome-192x192" sizes="180x180" href="favicon/android-chrome-192x192.png">
    <link rel="android-chrome-512x512" sizes="180x180" href="favicon/android-chrome-512x512.png">
    <link rel="apple-touch-icon" sizes="180x180" href="favicon/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="favicon/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="favicon/favicon-16x16.png">
    <link rel="manifest" href="favicon/site.webmanifest">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.0/css/all.min.css"
      integrity="sha512-9xKTRVabjVeZmc+GUW8GgSmcREDunMM+Dt/GrzchfN8tkwHizc5RP4Ok/MXFFy5rIjJjzhndFScTceq5e6GvVQ=="
      crossorigin="anonymous" referrerpolicy="no-referrer" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>EzyVote</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>



================================================
File: package.json
================================================
{
  "name": "ezyvote",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview",
    "deploy": "npx vercel"
  },
  "dependencies": {
    "@auth0/auth0-react": "^2.2.4",
    "@emailjs/browser": "^4.4.1",
    "@react-oauth/google": "^0.12.1",
    "@walletconnect/web3-provider": "^1.8.0",
    "axios": "^1.7.9",
    "bcrypt": "^5.1.1",
    "chart.js": "^4.4.7",
    "cors": "^2.8.5",
    "ethers": "^6.13.5",
    "ezyvote": "file:",
    "firebase": "^11.1.0",
    "framer-motion": "^11.18.2",
    "i18next": "^24.2.1",
    "i18next-browser-languagedetector": "^8.0.2",
    "i18next-http-backend": "^3.0.1",
    "lucide-react": "^0.344.0",
    "nodemailer": "^6.10.0",
    "otp-generator": "^4.0.1",
    "qrcode.react": "^4.2.0",
    "react": "^18.3.1",
    "react-chartjs-2": "^5.3.0",
    "react-countup": "^6.5.3",
    "react-dom": "^18.3.1",
    "react-google-login": "^5.2.2",
    "react-i18next": "^15.4.0",
    "react-icons": "^5.4.0",
    "react-router-dom": "^6.29.0",
    "react-share": "^5.1.0",
    "react-slick": "^0.30.3",
    "react-toastify": "^11.0.5",
    "slick-carousel": "^1.8.1",
    "vercel": "^41.1.4",
    "web3modal": "^1.9.12",
    "ws": "^8.18.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.1",
    "@types/react": "^18.3.5",
    "@types/react-countup": "^4.3.0",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.9.1",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.11",
    "globals": "^15.9.0",
    "hardhat": "^0.0.7",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.3.0",
    "vite": "^6.1.0"
  }
}



================================================
File: postcss.config.js
================================================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};



================================================
File: postman.txt
================================================
Postman

POST

// login

http://localhost:5000/api/login

{
  "email": "rakeshmal@gmail.com",
  "password": "Rakesh@12345"
}


// register

http://localhost:5000/api/register

{
  "firstName": "John",
  "lastName": "Doe",
  "email": "john.doe@example.com",
  "phone": "1234567890",
  "address": "123 Main St",
  "password": "password123"
}


================================================
File: steps.txt
================================================
*** Steps To Start the project ***

MongoDB Connection: Ensure MongoDB is accessible.

Backend Server: Start the backend and test with Postman.

Frontend Server: Start the frontend and test in the browser.

Debugging: Resolve any issues step by step.


npm run deploy


================================================
File: tailwind.config.js
================================================
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#f5f3ff',
          100: '#ede9fe',
          200: '#ddd6fe',
          300: '#c4b5fd',
          400: '#a78bfa',
          500: '#8b5cf6',
          600: '#7c3aed',
          700: '#6d28d9',
          800: '#5b21b6',
          900: '#4c1d95',
        },
      },
      animation: {
        'gradient': 'gradient 8s linear infinite',
      },
      keyframes: {
        gradient: {
          '0%, 100%': {
            'background-size': '200% 200%',
            'background-position': 'left center',
          },
          '50%': {
            'background-size': '200% 200%',
            'background-position': 'right center',
          },
        },
      },
    },
  },
  plugins: [],
};


================================================
File: tsconfig.app.json
================================================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}



================================================
File: tsconfig.json
================================================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}



================================================
File: tsconfig.node.json
================================================
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}



================================================
File: vite.config.ts
================================================
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  optimizeDeps: {
    exclude: ['lucide-react'],
  },
  build: {
    outDir: 'dist', // Output directory
  },
  server: {
    proxy: {
      '/api': {
        target: 'http://localhost:5000', // Your backend server URL
        changeOrigin: true,
        secure: false,
      },
    },
  },
});


================================================
File: backend/package-lock.json
================================================
{
  "name": "backend",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "backend",
      "version": "1.0.0",
      "license": "ISC",
      "dependencies": {
        "axios": "^1.7.9",
        "backend": "file:",
        "bcrypt": "^5.1.1",
        "body-parser": "^1.20.3",
        "cors": "^2.8.5",
        "dotenv": "^16.4.7",
        "ethers": "^6.13.5",
        "express": "^4.21.2",
        "express-validator": "^7.2.1",
        "jsonwebtoken": "^9.0.2",
        "morgan": "^1.10.0",
        "react-toastify": "^11.0.5",
        "web3": "^4.16.0",
        "ws": "^8.18.0"
      }
    },
    "node_modules/@adraffy/ens-normalize": {
      "version": "1.11.0",
      "resolved": "https://registry.npmjs.org/@adraffy/ens-normalize/-/ens-normalize-1.11.0.tgz",
      "integrity": "sha512-/3DDPKHqqIqxUULp8yP4zODUY1i+2xvVWsv8A79xGWdCAG+8sb0hRh0Rk2QyOJUnnbyPUAZYcpBuRe3nS2OIUg==",
      "license": "MIT"
    },
    "node_modules/@ethereumjs/rlp": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/@ethereumjs/rlp/-/rlp-4.0.1.tgz",
      "integrity": "sha512-tqsQiBQDQdmPWE1xkkBq4rlSW5QZpLOUJ5RJh2/9fug+q9tnUhuZoVLk7s0scUIKTOzEtR72DFBXI4WiZcMpvw==",
      "license": "MPL-2.0",
      "bin": {
        "rlp": "bin/rlp"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@mapbox/node-pre-gyp": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@mapbox/node-pre-gyp/-/node-pre-gyp-1.0.11.tgz",
      "integrity": "sha512-Yhlar6v9WQgUp/He7BdgzOz8lqMQ8sU+jkCq7Wx8Myc5YFJLbEe7lgui/V7G1qB1DJykHSGwreceSaD60Y0PUQ==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "detect-libc": "^2.0.0",
        "https-proxy-agent": "^5.0.0",
        "make-dir": "^3.1.0",
        "node-fetch": "^2.6.7",
        "nopt": "^5.0.0",
        "npmlog": "^5.0.1",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5",
        "tar": "^6.1.11"
      },
      "bin": {
        "node-pre-gyp": "bin/node-pre-gyp"
      }
    },
    "node_modules/@noble/curves": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/@noble/curves/-/curves-1.4.2.tgz",
      "integrity": "sha512-TavHr8qycMChk8UwMld0ZDRvatedkzWfH8IiaeGCfymOP5i0hSCozz9vHOL0nkwk7HRMlFnAiKpS2jrUmSybcw==",
      "license": "MIT",
      "dependencies": {
        "@noble/hashes": "1.4.0"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      }
    },
    "node_modules/@noble/hashes": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/@noble/hashes/-/hashes-1.4.0.tgz",
      "integrity": "sha512-V1JJ1WTRUqHHrOSh597hURcMqVKVGL/ea3kv0gSnEdsEZ0/+VyPghM1lMNGc00z7CIQorSvbKpuJkxvuHbvdbg==",
      "license": "MIT",
      "engines": {
        "node": ">= 16"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      }
    },
    "node_modules/@scure/base": {
      "version": "1.1.9",
      "resolved": "https://registry.npmjs.org/@scure/base/-/base-1.1.9.tgz",
      "integrity": "sha512-8YKhl8GHiNI/pU2VMaofa2Tor7PJRAjwQLBBuilkJ9L5+13yVbC7JO/wS7piioAvPSwR3JKM1IJ/u4xQzbcXKg==",
      "license": "MIT",
      "funding": {
        "url": "https://paulmillr.com/funding/"
      }
    },
    "node_modules/@scure/bip32": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/@scure/bip32/-/bip32-1.4.0.tgz",
      "integrity": "sha512-sVUpc0Vq3tXCkDGYVWGIZTRfnvu8LoTDaev7vbwh0omSvVORONr960MQWdKqJDCReIEmTj3PAr73O3aoxz7OPg==",
      "license": "MIT",
      "dependencies": {
        "@noble/curves": "~1.4.0",
        "@noble/hashes": "~1.4.0",
        "@scure/base": "~1.1.6"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      }
    },
    "node_modules/@scure/bip39": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/@scure/bip39/-/bip39-1.3.0.tgz",
      "integrity": "sha512-disdg7gHuTDZtY+ZdkmLpPCk7fxZSu3gBiEGuoC1XYxv9cGx3Z6cpTggCgW6odSOOIXCiDjuGejW+aJKCY/pIQ==",
      "license": "MIT",
      "dependencies": {
        "@noble/hashes": "~1.4.0",
        "@scure/base": "~1.1.6"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      }
    },
    "node_modules/@types/node": {
      "version": "22.13.1",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.13.1.tgz",
      "integrity": "sha512-jK8uzQlrvXqEU91UxiK5J7pKHyzgnI1Qnl0QDHIgVGuolJhRb9EEl28Cj9b3rGR8B2lhFCtvIm5os8lFnO/1Ew==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~6.20.0"
      }
    },
    "node_modules/@types/ws": {
      "version": "8.5.3",
      "resolved": "https://registry.npmjs.org/@types/ws/-/ws-8.5.3.tgz",
      "integrity": "sha512-6YOoWjruKj1uLf3INHH7D3qTXwFfEsg1kf3c0uDdSBJwfa/llkwIjrAGV7j7mVgGNbzTQ3HiHKKDXl6bJPD97w==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/abbrev": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==",
      "license": "ISC"
    },
    "node_modules/abitype": {
      "version": "0.7.1",
      "resolved": "https://registry.npmjs.org/abitype/-/abitype-0.7.1.tgz",
      "integrity": "sha512-VBkRHTDZf9Myaek/dO3yMmOzB/y2s3Zo6nVU7yaw1G+TvCHAjwaJzNGN9yo4K5D8bU/VZXKP1EJpRhFr862PlQ==",
      "license": "MIT",
      "peerDependencies": {
        "typescript": ">=4.9.4",
        "zod": "^3 >=3.19.1"
      },
      "peerDependenciesMeta": {
        "zod": {
          "optional": true
        }
      }
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "license": "MIT",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/aes-js": {
      "version": "4.0.0-beta.5",
      "resolved": "https://registry.npmjs.org/aes-js/-/aes-js-4.0.0-beta.5.tgz",
      "integrity": "sha512-G965FqalsNyrPqgEGON7nIx1e/OVENSgiEIzyC63haUMuvNnwIgIjMs52hlTCKhkBny7A2ORNlfY9Zu+jmGk1Q==",
      "license": "MIT"
    },
    "node_modules/agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "4"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/agent-base/node_modules/debug": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/agent-base/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/aproba": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/aproba/-/aproba-2.0.0.tgz",
      "integrity": "sha512-lYe4Gx7QT+MKGbDsA+Z+he/Wtef0BiwDOlK/XkBrdfsh9J/jPPXbX0tE9x9cl27Tmu5gg3QUbUrQYa/y+KOHPQ==",
      "license": "ISC"
    },
    "node_modules/are-we-there-yet": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/are-we-there-yet/-/are-we-there-yet-2.0.0.tgz",
      "integrity": "sha512-Ci/qENmwHnsYo9xKIcUJN5LeDKdJ6R1Z1j9V/J5wyq8nh/mYPEpIKJbBZXtZjG04HiK7zV/p6Vs9952MrMeUIw==",
      "deprecated": "This package is no longer supported.",
      "license": "ISC",
      "dependencies": {
        "delegates": "^1.0.0",
        "readable-stream": "^3.6.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
      "license": "MIT"
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/available-typed-arrays": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/available-typed-arrays/-/available-typed-arrays-1.0.7.tgz",
      "integrity": "sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==",
      "license": "MIT",
      "dependencies": {
        "possible-typed-array-names": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/axios": {
      "version": "1.7.9",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.7.9.tgz",
      "integrity": "sha512-LhLcE7Hbiryz8oMDdDptSrWowmB4Bl6RCt6sIJKpRB4XtVf0iEgewX3au/pJqm+Py1kCASkb/FFKjxQaLtxJvw==",
      "license": "MIT",
      "dependencies": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/backend": {
      "resolved": "",
      "link": true
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "license": "MIT"
    },
    "node_modules/basic-auth": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/basic-auth/-/basic-auth-2.0.1.tgz",
      "integrity": "sha512-NF+epuEdnUYVlGuhaxbbq+dvJttwLnGY+YixlXlME5KpQ5W3CnXA5cVTneY3SPbPDRkcjMbifrwmFYcClgOZeg==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "5.1.2"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/basic-auth/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "license": "MIT"
    },
    "node_modules/bcrypt": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/bcrypt/-/bcrypt-5.1.1.tgz",
      "integrity": "sha512-AGBHOG5hPYZ5Xl9KXzU5iKq9516yEmvCKDg3ecP5kX2aB6UqTeXZxk2ELnDgDm6BQSMlLt9rDB4LoSMx0rYwww==",
      "hasInstallScript": true,
      "license": "MIT",
      "dependencies": {
        "@mapbox/node-pre-gyp": "^1.0.11",
        "node-addon-api": "^5.0.0"
      },
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/body-parser": {
      "version": "1.20.3",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
      "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.5",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.13.0",
        "raw-body": "2.5.2",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.8.tgz",
      "integrity": "sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.0",
        "es-define-property": "^1.0.0",
        "get-intrinsic": "^1.2.4",
        "set-function-length": "^1.2.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.1.tgz",
      "integrity": "sha512-BhYE+WDaywFg2TBWYNXAE+8B1ATnThNBqXHP5nQu0jWJdVvY2hvkpyB3qOmtmDePiS5/BDQ8wASEWGMWRG148g==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/call-bound": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.3.tgz",
      "integrity": "sha512-YTd+6wGlNlPxSuri7Y6X8tY2dmm12UMH66RpKMhiX6rsk5wXXnYgbUcOt8kiS31/AjfoTOvCsE+w8nZQLQnzHA==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/chownr": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
      "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==",
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/clsx": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/clsx/-/clsx-2.1.1.tgz",
      "integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/color-support": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-support/-/color-support-1.1.3.tgz",
      "integrity": "sha512-qiBjkpbMLO/HL68y+lh4q0/O1MZFj2RX6X/KmMa3+gJD3z+WwI1ZzDHysvqHGS3mP6mznPckpXmw1nI9cJjyRg==",
      "license": "ISC",
      "bin": {
        "color-support": "bin.js"
      }
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "license": "MIT"
    },
    "node_modules/console-control-strings": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/console-control-strings/-/console-control-strings-1.1.0.tgz",
      "integrity": "sha512-ty/fTekppD2fIwRvnZAVdeOiGd1c7YXEixbgJTNzqcxJWKQnjJ/V1bNEEE6hygpM3WjwHFUVK6HTjWSzV4a8sQ==",
      "license": "ISC"
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie": {
      "version": "0.7.1",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
      "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
      "license": "MIT"
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "license": "MIT",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/crc-32": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/crc-32/-/crc-32-1.2.2.tgz",
      "integrity": "sha512-ROmzCKrTnOwybPcJApAA6WBWij23HVfGVNKqqrZpuyZOHqK2CwHSvpGuyt/UNNvaIjEd8X5IFGp4Mh+Ie1IHJQ==",
      "license": "Apache-2.0",
      "bin": {
        "crc32": "bin/crc32.njs"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/cross-fetch": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/cross-fetch/-/cross-fetch-4.1.0.tgz",
      "integrity": "sha512-uKm5PU+MHTootlWEY+mZ4vvXoCn4fLQxT9dSc1sXVMSFkINTJVN8cAQROpwcKm8bJ/c7rgZVIBWzH5T78sNZZw==",
      "license": "MIT",
      "dependencies": {
        "node-fetch": "^2.7.0"
      }
    },
    "node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/define-data-property": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/delegates": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delegates/-/delegates-1.0.0.tgz",
      "integrity": "sha512-bd2L678uiWATM6m5Z1VzNCErI3jiGzt6HGY8OVICs40JQq/HALfbyNJmp0UDakEY4pMMaN0Ly5om/B1VI/+xfQ==",
      "license": "MIT"
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/detect-libc": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.3.tgz",
      "integrity": "sha512-bwy0MGW55bG41VqxxypOsdSdGqLwXPI/focwgTYCFMbdUiBAxLg9CFzG08sz2aqzknwiX7Hkl0bQENjg8iLByw==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dotenv": {
      "version": "16.4.7",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.4.7.tgz",
      "integrity": "sha512-47qPchRCykZC03FhkYAhrvwU4xDBFIj1QPqaarj6mdM/hgUzfPHcpkHJOn3mJAufFeeAxAzeGsr5X0M4k6fLZQ==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://dotenvx.com"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
      "license": "MIT"
    },
    "node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "license": "MIT"
    },
    "node_modules/encodeurl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
      "license": "MIT"
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/ethereum-cryptography": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/ethereum-cryptography/-/ethereum-cryptography-2.2.1.tgz",
      "integrity": "sha512-r/W8lkHSiTLxUxW8Rf3u4HGB0xQweG2RyETjywylKZSzLWoWAijRz8WCuOtJ6wah+avllXBqZuk29HCCvhEIRg==",
      "license": "MIT",
      "dependencies": {
        "@noble/curves": "1.4.2",
        "@noble/hashes": "1.4.0",
        "@scure/bip32": "1.4.0",
        "@scure/bip39": "1.3.0"
      }
    },
    "node_modules/ethers": {
      "version": "6.13.5",
      "resolved": "https://registry.npmjs.org/ethers/-/ethers-6.13.5.tgz",
      "integrity": "sha512-+knKNieu5EKRThQJWwqaJ10a6HE9sSehGeqWN65//wE7j47ZpFhKAnHB/JJFibwwg61I/koxaPsXbXpD/skNOQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/ethers-io/"
        },
        {
          "type": "individual",
          "url": "https://www.buymeacoffee.com/ricmoo"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "@adraffy/ens-normalize": "1.10.1",
        "@noble/curves": "1.2.0",
        "@noble/hashes": "1.3.2",
        "@types/node": "22.7.5",
        "aes-js": "4.0.0-beta.5",
        "tslib": "2.7.0",
        "ws": "8.17.1"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/ethers/node_modules/@adraffy/ens-normalize": {
      "version": "1.10.1",
      "resolved": "https://registry.npmjs.org/@adraffy/ens-normalize/-/ens-normalize-1.10.1.tgz",
      "integrity": "sha512-96Z2IP3mYmF1Xg2cDm8f1gWGf/HUVedQ3FMifV4kG/PQ4yEP51xDtRAEfhVNt5f/uzpNkZHwWQuUcu6D6K+Ekw==",
      "license": "MIT"
    },
    "node_modules/ethers/node_modules/@noble/curves": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@noble/curves/-/curves-1.2.0.tgz",
      "integrity": "sha512-oYclrNgRaM9SsBUBVbb8M6DTV7ZHRTKugureoYEncY5c65HOmRzvSiTE3y5CYaPYJA/GVkrhXEoF0M3Ya9PMnw==",
      "license": "MIT",
      "dependencies": {
        "@noble/hashes": "1.3.2"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      }
    },
    "node_modules/ethers/node_modules/@noble/hashes": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/@noble/hashes/-/hashes-1.3.2.tgz",
      "integrity": "sha512-MVC8EAQp7MvEcm30KWENFjgR+Mkmf+D189XJTkFIlwohU5hcBbn1ZkKq7KVTi2Hme3PMGF390DaL52beVrIihQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 16"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      }
    },
    "node_modules/ethers/node_modules/@types/node": {
      "version": "22.7.5",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.7.5.tgz",
      "integrity": "sha512-jML7s2NAzMWc//QSJ1a3prpk78cOPchGvXJsC3C6R6PSMoooztvRVQEz89gmBTBY1SPMaqo5teB4uNHPdetShQ==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~6.19.2"
      }
    },
    "node_modules/ethers/node_modules/undici-types": {
      "version": "6.19.8",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.19.8.tgz",
      "integrity": "sha512-ve2KP6f/JnbPBFyobGHuerC9g1FYGn/F8n1LWTwNxCEzd6IfqTwUQcNXgEtmmQ6DlRrC1hrSrBnCZPokRrDHjw==",
      "license": "MIT"
    },
    "node_modules/ethers/node_modules/ws": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.17.1.tgz",
      "integrity": "sha512-6XQFvXTkbfUOZOKKILFG1PDK2NDQs4azKQl26T0YS5CxqWLgXajbPZ+h4gZekJyRqFU8pvnbAbbs/3TgRPy+GQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/eventemitter3": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-5.0.1.tgz",
      "integrity": "sha512-GWkBvjiSZK87ELrYOSESUYeVIc9mvLLf/nXalMOS5dYrgZq9o5OVkbZAVM06CVxYsCwH9BDZFPlQTlPA1j4ahA==",
      "license": "MIT"
    },
    "node_modules/express": {
      "version": "4.21.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.3",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.7.1",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.3.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.3",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.12",
        "proxy-addr": "~2.0.7",
        "qs": "6.13.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.19.0",
        "serve-static": "1.16.2",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/express"
      }
    },
    "node_modules/express-validator": {
      "version": "7.2.1",
      "resolved": "https://registry.npmjs.org/express-validator/-/express-validator-7.2.1.tgz",
      "integrity": "sha512-CjNE6aakfpuwGaHQZ3m8ltCG2Qvivd7RHtVMS/6nVxOM7xVGqr4bhflsm4+N5FP5zI7Zxp+Hae+9RE+o8e3ZOQ==",
      "license": "MIT",
      "dependencies": {
        "lodash": "^4.17.21",
        "validator": "~13.12.0"
      },
      "engines": {
        "node": ">= 8.0.0"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/follow-redirects": {
      "version": "1.15.9",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz",
      "integrity": "sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/for-each": {
      "version": "0.3.4",
      "resolved": "https://registry.npmjs.org/for-each/-/for-each-0.3.4.tgz",
      "integrity": "sha512-kKaIINnFpzW6ffJNDjjyjrk21BkDx38c0xa/klsT8VzLCaMEefv4ZTacrcVR4DmgTeBra++jMDAfS/tS799YDw==",
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.2.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/form-data": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.1.tgz",
      "integrity": "sha512-tzN8e4TX8+kkxGPK8D5u0FNmjPUjw3lwC9lSLxxoB/+GtsJG91CO8bSWy73APlgAZzZbXEYZJuxjkHH2w+Ezhw==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fs-minipass": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
      "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
      "license": "ISC",
      "dependencies": {
        "minipass": "^3.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/fs-minipass/node_modules/minipass": {
      "version": "3.3.6",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
      "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
      "license": "ISC",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
      "license": "ISC"
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gauge": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/gauge/-/gauge-3.0.2.tgz",
      "integrity": "sha512-+5J6MS/5XksCuXq++uFRsnUd7Ovu1XenbeuIuNRJxYWjgQbPuFhT14lAvsWfqfAmnwluf1OwMjz39HjfLPci0Q==",
      "deprecated": "This package is no longer supported.",
      "license": "ISC",
      "dependencies": {
        "aproba": "^1.0.3 || ^2.0.0",
        "color-support": "^1.1.2",
        "console-control-strings": "^1.0.0",
        "has-unicode": "^2.0.1",
        "object-assign": "^4.1.1",
        "signal-exit": "^3.0.0",
        "string-width": "^4.2.3",
        "strip-ansi": "^6.0.1",
        "wide-align": "^1.1.2"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.7.tgz",
      "integrity": "sha512-VW6Pxhsrk0KAOqs3WEd0klDiF/+V7gQOpAvY1jVU/LHmaD/kQO4523aiJuikX/QAKYiW6x8Jh+RJej1almdtCA==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.0",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "deprecated": "Glob versions prior to v9 are no longer supported",
      "license": "ISC",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-property-descriptors": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-unicode": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/has-unicode/-/has-unicode-2.0.1.tgz",
      "integrity": "sha512-8Rf9Y83NBReMnx0gFzA8JImQACstCYWUplepDa9xprwwtmgEZUF0h/i5xSA625zB/I37EtrswSST6OXxwaaIJQ==",
      "license": "ISC"
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "license": "MIT",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/https-proxy-agent": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
      "license": "MIT",
      "dependencies": {
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/https-proxy-agent/node_modules/debug": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/https-proxy-agent/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
      "license": "ISC",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-arguments": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/is-arguments/-/is-arguments-1.2.0.tgz",
      "integrity": "sha512-7bVbi0huj/wrIAOzb8U1aszg9kdi3KN/CyU19CTI7tAoZYEZoL9yCDXpbXN+uPsuWnP02cyug1gleqq+TU+YCA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-callable": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/is-callable/-/is-callable-1.2.7.tgz",
      "integrity": "sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-generator-function": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-generator-function/-/is-generator-function-1.1.0.tgz",
      "integrity": "sha512-nPUB5km40q9e8UfN/Zc24eLlzdSf9OfKByBw9CIdw4H1giPMeA0OIJvbchsCu4npfI2QcMVBsGEBHKZ7wLTWmQ==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "get-proto": "^1.0.0",
        "has-tostringtag": "^1.0.2",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-regex": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.2.1.tgz",
      "integrity": "sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-typed-array": {
      "version": "1.1.15",
      "resolved": "https://registry.npmjs.org/is-typed-array/-/is-typed-array-1.1.15.tgz",
      "integrity": "sha512-p3EcsicXjit7SaskXHs1hA91QxgTw46Fv6EFKKGS5DRFLD8yKnohjF3hxoju94b/OcMZoQukzpPpBE9uLVKzgQ==",
      "license": "MIT",
      "dependencies": {
        "which-typed-array": "^1.1.16"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/isomorphic-ws": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/isomorphic-ws/-/isomorphic-ws-5.0.0.tgz",
      "integrity": "sha512-muId7Zzn9ywDsyXgTIafTry2sV3nySZeUDe6YedVd1Hvuuep5AsIlqK+XefWpYTyJG5e503F2xIuT2lcU6rCSw==",
      "license": "MIT",
      "peerDependencies": {
        "ws": "*"
      }
    },
    "node_modules/jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
      "license": "MIT",
      "dependencies": {
        "jws": "^3.2.2",
        "lodash.includes": "^4.3.0",
        "lodash.isboolean": "^3.0.3",
        "lodash.isinteger": "^4.0.4",
        "lodash.isnumber": "^3.0.3",
        "lodash.isplainobject": "^4.0.6",
        "lodash.isstring": "^4.0.1",
        "lodash.once": "^4.0.0",
        "ms": "^2.1.1",
        "semver": "^7.5.4"
      },
      "engines": {
        "node": ">=12",
        "npm": ">=6"
      }
    },
    "node_modules/jsonwebtoken/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/jwa": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
      "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
      "license": "MIT",
      "dependencies": {
        "buffer-equal-constant-time": "1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "license": "MIT",
      "dependencies": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
      "license": "MIT"
    },
    "node_modules/lodash.includes": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==",
      "license": "MIT"
    },
    "node_modules/lodash.isboolean": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==",
      "license": "MIT"
    },
    "node_modules/lodash.isinteger": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==",
      "license": "MIT"
    },
    "node_modules/lodash.isnumber": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==",
      "license": "MIT"
    },
    "node_modules/lodash.isplainobject": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
      "license": "MIT"
    },
    "node_modules/lodash.isstring": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==",
      "license": "MIT"
    },
    "node_modules/lodash.once": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==",
      "license": "MIT"
    },
    "node_modules/make-dir": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
      "license": "MIT",
      "dependencies": {
        "semver": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/make-dir/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
      "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "license": "MIT",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minipass": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-5.0.0.tgz",
      "integrity": "sha512-3FnjYuehv9k6ovOEbyOswadCDPX1piCfhV8ncmYtHOjuPwylVWsghTLo7rabjC3Rx5xD4HDx8Wm1xnMF7S5qFQ==",
      "license": "ISC",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/minizlib": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
      "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
      "license": "MIT",
      "dependencies": {
        "minipass": "^3.0.0",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/minizlib/node_modules/minipass": {
      "version": "3.3.6",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
      "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
      "license": "ISC",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/mkdirp": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
      "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
      "license": "MIT",
      "bin": {
        "mkdirp": "bin/cmd.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/morgan": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/morgan/-/morgan-1.10.0.tgz",
      "integrity": "sha512-AbegBVI4sh6El+1gNwvD5YIck7nSA36weD7xvIxG4in80j/UoK8AEGaWnnz8v1GxonMCltmlNs5ZKbGvl9b1XQ==",
      "license": "MIT",
      "dependencies": {
        "basic-auth": "~2.0.1",
        "debug": "2.6.9",
        "depd": "~2.0.0",
        "on-finished": "~2.3.0",
        "on-headers": "~1.0.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/morgan/node_modules/on-finished": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz",
      "integrity": "sha512-ikqdkGAAyf/X/gPhXGvfgAytDZtDbr+bkNUJ0N9h5MI/dmdgCs3l6hoHrcUv41sRKew3jIwrp4qQDXiK99Utww==",
      "license": "MIT",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/node-addon-api": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-5.1.0.tgz",
      "integrity": "sha512-eh0GgfEkpnoWDq+VY8OyvYhFEzBk6jIYbRKdIlyTiAXIVJ8PyBaKb0rp7oDtoddbdoHWhq8wwr+XZ81F1rpNdA==",
      "license": "MIT"
    },
    "node_modules/node-fetch": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
      "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
      "license": "MIT",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/node-fetch/node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==",
      "license": "MIT"
    },
    "node_modules/node-fetch/node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==",
      "license": "BSD-2-Clause"
    },
    "node_modules/node-fetch/node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "license": "MIT",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/nopt": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-5.0.0.tgz",
      "integrity": "sha512-Tbj67rffqceeLpcRXrT7vKAN8CwfPeIBgM7E6iBkmKLV7bEMwpGgYLGv0jACUsECaa/vuxP0IjEont6umdMgtQ==",
      "license": "ISC",
      "dependencies": {
        "abbrev": "1"
      },
      "bin": {
        "nopt": "bin/nopt.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/npmlog": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/npmlog/-/npmlog-5.0.1.tgz",
      "integrity": "sha512-AqZtDUWOMKs1G/8lwylVjrdYgqA4d9nu8hc+0gzRxlDb1I10+FHBGMXs6aiQHFdCUUlqH99MUMuLfzWDNDtfxw==",
      "deprecated": "This package is no longer supported.",
      "license": "ISC",
      "dependencies": {
        "are-we-there-yet": "^2.0.0",
        "console-control-strings": "^1.1.0",
        "gauge": "^3.0.0",
        "set-blocking": "^2.0.0"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.3",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.3.tgz",
      "integrity": "sha512-kDCGIbxkDSXE3euJZZXzc6to7fCrKHNI/hSRQnRuQ+BWjFNzZwiFF8fj/6o2t2G9/jTj8PSIYTfCLelLZEeRpA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "license": "MIT",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/on-headers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz",
      "integrity": "sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "license": "ISC",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.12",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==",
      "license": "MIT"
    },
    "node_modules/possible-typed-array-names": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/possible-typed-array-names/-/possible-typed-array-names-1.0.0.tgz",
      "integrity": "sha512-d7Uw+eZoloe0EHDIYoe+bQ5WXnGMOpmiZFTuMWCwpjzzkL2nTjcKiAk4hh8TjnGye2TwWOk3UXucZ+3rbmBa8Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "license": "MIT",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
      "license": "MIT"
    },
    "node_modules/qs": {
      "version": "6.13.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
      "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "side-channel": "^1.0.6"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/react-toastify": {
      "version": "11.0.5",
      "resolved": "https://registry.npmjs.org/react-toastify/-/react-toastify-11.0.5.tgz",
      "integrity": "sha512-EpqHBGvnSTtHYhCPLxML05NLY2ZX0JURbAdNYa6BUkk+amz4wbKBQvoKQAB0ardvSarUBuY4Q4s1sluAzZwkmA==",
      "license": "MIT",
      "dependencies": {
        "clsx": "^2.1.1"
      },
      "peerDependencies": {
        "react": "^18 || ^19",
        "react-dom": "^18 || ^19"
      }
    },
    "node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "license": "MIT",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "license": "ISC",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safe-regex-test": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/safe-regex-test/-/safe-regex-test-1.1.0.tgz",
      "integrity": "sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "is-regex": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "license": "MIT"
    },
    "node_modules/semver": {
      "version": "7.7.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.1.tgz",
      "integrity": "sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/send": {
      "version": "0.19.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
      "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/send/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/serve-static": {
      "version": "1.16.2",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
      "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
      "license": "MIT",
      "dependencies": {
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.19.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/set-blocking": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
      "integrity": "sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw==",
      "license": "ISC"
    },
    "node_modules/set-function-length": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
      "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.4",
        "gopd": "^1.0.1",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/setimmediate": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/setimmediate/-/setimmediate-1.0.5.tgz",
      "integrity": "sha512-MATJdZp8sLqDl/68LfQmbP8zKPLQNV6BIZoIgrscFDQ+RsvK/BxeDQOgyxKKoh0y/8h3BqVFnCqQ/gd+reiIXA==",
      "license": "MIT"
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "license": "ISC"
    },
    "node_modules/side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
      "license": "ISC"
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/tar": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/tar/-/tar-6.2.1.tgz",
      "integrity": "sha512-DZ4yORTwrbTj/7MZYq2w+/ZFdI6OZ/f9SFHR+71gIVUZhOQPHzVCLpvRnPgyaMpfWxxk/4ONva3GQSyNIKRv6A==",
      "license": "ISC",
      "dependencies": {
        "chownr": "^2.0.0",
        "fs-minipass": "^2.0.0",
        "minipass": "^5.0.0",
        "minizlib": "^2.1.1",
        "mkdirp": "^1.0.3",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/tslib": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.7.0.tgz",
      "integrity": "sha512-gLXCKdN1/j47AiHiOkJN69hJmcbGTHI0ImLmbYLHykhgeN0jVGola9yVjFgzCUklsZQMW55o+dW7IXv3RCXDzA==",
      "license": "0BSD"
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "license": "MIT",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/undici-types": {
      "version": "6.20.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.20.0.tgz",
      "integrity": "sha512-Ny6QZ2Nju20vw1SRHe3d9jVu6gJ+4e3+MMpqu7pqE5HT6WsTSlce++GQmK5UXS8mzV8DSYHrQH+Xrf2jVcuKNg==",
      "license": "MIT"
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/util": {
      "version": "0.12.5",
      "resolved": "https://registry.npmjs.org/util/-/util-0.12.5.tgz",
      "integrity": "sha512-kZf/K6hEIrWHI6XqOFUiiMa+79wE/D8Q+NCNAWclkyg3b4d2k7s0QGepNjiABc+aR3N1PAyHL7p6UcLY6LmrnA==",
      "license": "MIT",
      "dependencies": {
        "inherits": "^2.0.3",
        "is-arguments": "^1.0.4",
        "is-generator-function": "^1.0.7",
        "is-typed-array": "^1.1.3",
        "which-typed-array": "^1.1.2"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
      "license": "MIT"
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/validator": {
      "version": "13.12.0",
      "resolved": "https://registry.npmjs.org/validator/-/validator-13.12.0.tgz",
      "integrity": "sha512-c1Q0mCiPlgdTVVVIJIrBuxNicYE+t/7oKeI9MWLj3fh/uq2Pxh/3eeWbVZ4OcGW1TUf53At0njHw5SMdA3tmMg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/web3": {
      "version": "4.16.0",
      "resolved": "https://registry.npmjs.org/web3/-/web3-4.16.0.tgz",
      "integrity": "sha512-SgoMSBo6EsJ5GFCGar2E/pR2lcR/xmUSuQ61iK6yDqzxmm42aPPxSqZfJz2z/UCR6pk03u77pU8TGV6lgMDdIQ==",
      "license": "LGPL-3.0",
      "dependencies": {
        "web3-core": "^4.7.1",
        "web3-errors": "^1.3.1",
        "web3-eth": "^4.11.1",
        "web3-eth-abi": "^4.4.1",
        "web3-eth-accounts": "^4.3.1",
        "web3-eth-contract": "^4.7.2",
        "web3-eth-ens": "^4.4.0",
        "web3-eth-iban": "^4.0.7",
        "web3-eth-personal": "^4.1.0",
        "web3-net": "^4.1.0",
        "web3-providers-http": "^4.2.0",
        "web3-providers-ws": "^4.0.8",
        "web3-rpc-methods": "^1.3.0",
        "web3-rpc-providers": "^1.0.0-rc.4",
        "web3-types": "^1.10.0",
        "web3-utils": "^4.3.3",
        "web3-validator": "^2.0.6"
      },
      "engines": {
        "node": ">=14.0.0",
        "npm": ">=6.12.0"
      }
    },
    "node_modules/web3-core": {
      "version": "4.7.1",
      "resolved": "https://registry.npmjs.org/web3-core/-/web3-core-4.7.1.tgz",
      "integrity": "sha512-9KSeASCb/y6BG7rwhgtYC4CvYY66JfkmGNEYb7q1xgjt9BWfkf09MJPaRyoyT5trdOxYDHkT9tDlypvQWaU8UQ==",
      "license": "LGPL-3.0",
      "dependencies": {
        "web3-errors": "^1.3.1",
        "web3-eth-accounts": "^4.3.1",
        "web3-eth-iban": "^4.0.7",
        "web3-providers-http": "^4.2.0",
        "web3-providers-ws": "^4.0.8",
        "web3-types": "^1.10.0",
        "web3-utils": "^4.3.3",
        "web3-validator": "^2.0.6"
      },
      "engines": {
        "node": ">=14",
        "npm": ">=6.12.0"
      },
      "optionalDependencies": {
        "web3-providers-ipc": "^4.0.7"
      }
    },
    "node_modules/web3-errors": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/web3-errors/-/web3-errors-1.3.1.tgz",
      "integrity": "sha512-w3NMJujH+ZSW4ltIZZKtdbkbyQEvBzyp3JRn59Ckli0Nz4VMsVq8aF1bLWM7A2kuQ+yVEm3ySeNU+7mSRwx7RQ==",
      "license": "LGPL-3.0",
      "dependencies": {
        "web3-types": "^1.10.0"
      },
      "engines": {
        "node": ">=14",
        "npm": ">=6.12.0"
      }
    },
    "node_modules/web3-eth": {
      "version": "4.11.1",
      "resolved": "https://registry.npmjs.org/web3-eth/-/web3-eth-4.11.1.tgz",
      "integrity": "sha512-q9zOkzHnbLv44mwgLjLXuyqszHuUgZWsQayD2i/rus2uk0G7hMn11bE2Q3hOVnJS4ws4VCtUznlMxwKQ+38V2w==",
      "license": "LGPL-3.0",
      "dependencies": {
        "setimmediate": "^1.0.5",
        "web3-core": "^4.7.1",
        "web3-errors": "^1.3.1",
        "web3-eth-abi": "^4.4.1",
        "web3-eth-accounts": "^4.3.1",
        "web3-net": "^4.1.0",
        "web3-providers-ws": "^4.0.8",
        "web3-rpc-methods": "^1.3.0",
        "web3-types": "^1.10.0",
        "web3-utils": "^4.3.3",
        "web3-validator": "^2.0.6"
      },
      "engines": {
        "node": ">=14",
        "npm": ">=6.12.0"
      }
    },
    "node_modules/web3-eth-abi": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/web3-eth-abi/-/web3-eth-abi-4.4.1.tgz",
      "integrity": "sha512-60ecEkF6kQ9zAfbTY04Nc9q4eEYM0++BySpGi8wZ2PD1tw/c0SDvsKhV6IKURxLJhsDlb08dATc3iD6IbtWJmg==",
      "license": "LGPL-3.0",
      "dependencies": {
        "abitype": "0.7.1",
        "web3-errors": "^1.3.1",
        "web3-types": "^1.10.0",
        "web3-utils": "^4.3.3",
        "web3-validator": "^2.0.6"
      },
      "engines": {
        "node": ">=14",
        "npm": ">=6.12.0"
      }
    },
    "node_modules/web3-eth-accounts": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/web3-eth-accounts/-/web3-eth-accounts-4.3.1.tgz",
      "integrity": "sha512-rTXf+H9OKze6lxi7WMMOF1/2cZvJb2AOnbNQxPhBDssKOllAMzLhg1FbZ4Mf3lWecWfN6luWgRhaeSqO1l+IBQ==",
      "license": "LGPL-3.0",
      "dependencies": {
        "@ethereumjs/rlp": "^4.0.1",
        "crc-32": "^1.2.2",
        "ethereum-cryptography": "^2.0.0",
        "web3-errors": "^1.3.1",
        "web3-types": "^1.10.0",
        "web3-utils": "^4.3.3",
        "web3-validator": "^2.0.6"
      },
      "engines": {
        "node": ">=14",
        "npm": ">=6.12.0"
      }
    },
    "node_modules/web3-eth-contract": {
      "version": "4.7.2",
      "resolved": "https://registry.npmjs.org/web3-eth-contract/-/web3-eth-contract-4.7.2.tgz",
      "integrity": "sha512-3ETqs2pMNPEAc7BVY/C3voOhTUeJdkf2aM3X1v+edbngJLHAxbvxKpOqrcO0cjXzC4uc2Q8Zpf8n8zT5r0eLnA==",
      "license": "LGPL-3.0",
      "dependencies": {
        "@ethereumjs/rlp": "^5.0.2",
        "web3-core": "^4.7.1",
        "web3-errors": "^1.3.1",
        "web3-eth": "^4.11.1",
        "web3-eth-abi": "^4.4.1",
        "web3-types": "^1.10.0",
        "web3-utils": "^4.3.3",
        "web3-validator": "^2.0.6"
      },
      "engines": {
        "node": ">=14",
        "npm": ">=6.12.0"
      }
    },
    "node_modules/web3-eth-contract/node_modules/@ethereumjs/rlp": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/@ethereumjs/rlp/-/rlp-5.0.2.tgz",
      "integrity": "sha512-DziebCdg4JpGlEqEdGgXmjqcFoJi+JGulUXwEjsZGAscAQ7MyD/7LE/GVCP29vEQxKc7AAwjT3A2ywHp2xfoCA==",
      "license": "MPL-2.0",
      "bin": {
        "rlp": "bin/rlp.cjs"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/web3-eth-ens": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/web3-eth-ens/-/web3-eth-ens-4.4.0.tgz",
      "integrity": "sha512-DeyVIS060hNV9g8dnTx92syqvgbvPricE3MerCxe/DquNZT3tD8aVgFfq65GATtpCgDDJffO2bVeHp3XBemnSQ==",
      "license": "LGPL-3.0",
      "dependencies": {
        "@adraffy/ens-normalize": "^1.8.8",
        "web3-core": "^4.5.0",
        "web3-errors": "^1.2.0",
        "web3-eth": "^4.8.0",
        "web3-eth-contract": "^4.5.0",
        "web3-net": "^4.1.0",
        "web3-types": "^1.7.0",
        "web3-utils": "^4.3.0",
        "web3-validator": "^2.0.6"
      },
      "engines": {
        "node": ">=14",
        "npm": ">=6.12.0"
      }
    },
    "node_modules/web3-eth-iban": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/web3-eth-iban/-/web3-eth-iban-4.0.7.tgz",
      "integrity": "sha512-8weKLa9KuKRzibC87vNLdkinpUE30gn0IGY027F8doeJdcPUfsa4IlBgNC4k4HLBembBB2CTU0Kr/HAOqMeYVQ==",
      "license": "LGPL-3.0",
      "dependencies": {
        "web3-errors": "^1.1.3",
        "web3-types": "^1.3.0",
        "web3-utils": "^4.0.7",
        "web3-validator": "^2.0.3"
      },
      "engines": {
        "node": ">=14",
        "npm": ">=6.12.0"
      }
    },
    "node_modules/web3-eth-personal": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/web3-eth-personal/-/web3-eth-personal-4.1.0.tgz",
      "integrity": "sha512-RFN83uMuvA5cu1zIwwJh9A/bAj0OBxmGN3tgx19OD/9ygeUZbifOL06jgFzN0t+1ekHqm3DXYQM8UfHpXi7yDQ==",
      "license": "LGPL-3.0",
      "dependencies": {
        "web3-core": "^4.6.0",
        "web3-eth": "^4.9.0",
        "web3-rpc-methods": "^1.3.0",
        "web3-types": "^1.8.0",
        "web3-utils": "^4.3.1",
        "web3-validator": "^2.0.6"
      },
      "engines": {
        "node": ">=14",
        "npm": ">=6.12.0"
      }
    },
    "node_modules/web3-net": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/web3-net/-/web3-net-4.1.0.tgz",
      "integrity": "sha512-WWmfvHVIXWEoBDWdgKNYKN8rAy6SgluZ0abyRyXOL3ESr7ym7pKWbfP4fjApIHlYTh8tNqkrdPfM4Dyi6CA0SA==",
      "license": "LGPL-3.0",
      "dependencies": {
        "web3-core": "^4.4.0",
        "web3-rpc-methods": "^1.3.0",
        "web3-types": "^1.6.0",
        "web3-utils": "^4.3.0"
      },
      "engines": {
        "node": ">=14",
        "npm": ">=6.12.0"
      }
    },
    "node_modules/web3-providers-http": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/web3-providers-http/-/web3-providers-http-4.2.0.tgz",
      "integrity": "sha512-IPMnDtHB7dVwaB7/mMxAZzyq7d5ezfO1+Vw0bNfAeIi7gaDlJiggp85SdyAfOgov8AMUA/dyiY72kQ0KmjXKvQ==",
      "license": "LGPL-3.0",
      "dependencies": {
        "cross-fetch": "^4.0.0",
        "web3-errors": "^1.3.0",
        "web3-types": "^1.7.0",
        "web3-utils": "^4.3.1"
      },
      "engines": {
        "node": ">=14",
        "npm": ">=6.12.0"
      }
    },
    "node_modules/web3-providers-ipc": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/web3-providers-ipc/-/web3-providers-ipc-4.0.7.tgz",
      "integrity": "sha512-YbNqY4zUvIaK2MHr1lQFE53/8t/ejHtJchrWn9zVbFMGXlTsOAbNoIoZWROrg1v+hCBvT2c9z8xt7e/+uz5p1g==",
      "license": "LGPL-3.0",
      "optional": true,
      "dependencies": {
        "web3-errors": "^1.1.3",
        "web3-types": "^1.3.0",
        "web3-utils": "^4.0.7"
      },
      "engines": {
        "node": ">=14",
        "npm": ">=6.12.0"
      }
    },
    "node_modules/web3-providers-ws": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/web3-providers-ws/-/web3-providers-ws-4.0.8.tgz",
      "integrity": "sha512-goJdgata7v4pyzHRsg9fSegUG4gVnHZSHODhNnn6J93ykHkBI1nz4fjlGpcQLUMi4jAMz6SHl9Ibzs2jj9xqPw==",
      "license": "LGPL-3.0",
      "dependencies": {
        "@types/ws": "8.5.3",
        "isomorphic-ws": "^5.0.0",
        "web3-errors": "^1.2.0",
        "web3-types": "^1.7.0",
        "web3-utils": "^4.3.1",
        "ws": "^8.17.1"
      },
      "engines": {
        "node": ">=14",
        "npm": ">=6.12.0"
      }
    },
    "node_modules/web3-rpc-methods": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/web3-rpc-methods/-/web3-rpc-methods-1.3.0.tgz",
      "integrity": "sha512-/CHmzGN+IYgdBOme7PdqzF+FNeMleefzqs0LVOduncSaqsppeOEoskLXb2anSpzmQAP3xZJPaTrkQPWSJMORig==",
      "license": "LGPL-3.0",
      "dependencies": {
        "web3-core": "^4.4.0",
        "web3-types": "^1.6.0",
        "web3-validator": "^2.0.6"
      },
      "engines": {
        "node": ">=14",
        "npm": ">=6.12.0"
      }
    },
    "node_modules/web3-rpc-providers": {
      "version": "1.0.0-rc.4",
      "resolved": "https://registry.npmjs.org/web3-rpc-providers/-/web3-rpc-providers-1.0.0-rc.4.tgz",
      "integrity": "sha512-PXosCqHW0EADrYzgmueNHP3Y5jcSmSwH+Dkqvn7EYD0T2jcsdDAIHqk6szBiwIdhumM7gv9Raprsu/s/f7h1fw==",
      "license": "LGPL-3.0",
      "dependencies": {
        "web3-errors": "^1.3.1",
        "web3-providers-http": "^4.2.0",
        "web3-providers-ws": "^4.0.8",
        "web3-types": "^1.10.0",
        "web3-utils": "^4.3.3",
        "web3-validator": "^2.0.6"
      },
      "engines": {
        "node": ">=14",
        "npm": ">=6.12.0"
      }
    },
    "node_modules/web3-types": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/web3-types/-/web3-types-1.10.0.tgz",
      "integrity": "sha512-0IXoaAFtFc8Yin7cCdQfB9ZmjafrbP6BO0f0KT/khMhXKUpoJ6yShrVhiNpyRBo8QQjuOagsWzwSK2H49I7sbw==",
      "license": "LGPL-3.0",
      "engines": {
        "node": ">=14",
        "npm": ">=6.12.0"
      }
    },
    "node_modules/web3-utils": {
      "version": "4.3.3",
      "resolved": "https://registry.npmjs.org/web3-utils/-/web3-utils-4.3.3.tgz",
      "integrity": "sha512-kZUeCwaQm+RNc2Bf1V3BYbF29lQQKz28L0y+FA4G0lS8IxtJVGi5SeDTUkpwqqkdHHC7JcapPDnyyzJ1lfWlOw==",
      "license": "LGPL-3.0",
      "dependencies": {
        "ethereum-cryptography": "^2.0.0",
        "eventemitter3": "^5.0.1",
        "web3-errors": "^1.3.1",
        "web3-types": "^1.10.0",
        "web3-validator": "^2.0.6"
      },
      "engines": {
        "node": ">=14",
        "npm": ">=6.12.0"
      }
    },
    "node_modules/web3-validator": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/web3-validator/-/web3-validator-2.0.6.tgz",
      "integrity": "sha512-qn9id0/l1bWmvH4XfnG/JtGKKwut2Vokl6YXP5Kfg424npysmtRLe9DgiNBM9Op7QL/aSiaA0TVXibuIuWcizg==",
      "license": "LGPL-3.0",
      "dependencies": {
        "ethereum-cryptography": "^2.0.0",
        "util": "^0.12.5",
        "web3-errors": "^1.2.0",
        "web3-types": "^1.6.0",
        "zod": "^3.21.4"
      },
      "engines": {
        "node": ">=14",
        "npm": ">=6.12.0"
      }
    },
    "node_modules/which-typed-array": {
      "version": "1.1.18",
      "resolved": "https://registry.npmjs.org/which-typed-array/-/which-typed-array-1.1.18.tgz",
      "integrity": "sha512-qEcY+KJYlWyLH9vNbsr6/5j59AXk5ni5aakf8ldzBvGde6Iz4sxZGkJyWSAueTG7QhOvNRYb1lDdFmL5Td0QKA==",
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "for-each": "^0.3.3",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/wide-align": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/wide-align/-/wide-align-1.1.5.tgz",
      "integrity": "sha512-eDMORYaPNZ4sQIuuYPDHdQvf4gyCF9rEEV/yPxGfwPkRodwEgiMUUXTx/dex+Me0wxx53S+NgUHaP7y3MGlDmg==",
      "license": "ISC",
      "dependencies": {
        "string-width": "^1.0.2 || 2 || 3 || 4"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
      "license": "ISC"
    },
    "node_modules/ws": {
      "version": "8.18.0",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.18.0.tgz",
      "integrity": "sha512-8VbfWfHLbbwu3+N6OKsOMpBdT4kXPDDB9cJk2bJ6mh9ucxdlnNvH1e+roYkKmN9Nxw2yjz7VzeO9oOz2zJ04Pw==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
      "license": "ISC"
    },
    "node_modules/zod": {
      "version": "3.24.1",
      "resolved": "https://registry.npmjs.org/zod/-/zod-3.24.1.tgz",
      "integrity": "sha512-muH7gBL9sI1nciMZV67X5fTKKBLtwpZ5VBp1vsOQzj1MhrBZ4wlVCm3gedKZWLp0Oyel8sIGfeiz54Su+OVT+A==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/colinhacks"
      }
    }
  }
}



================================================
File: backend/package.json
================================================
{
  "name": "backend",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "start": "node server.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "type": "commonjs",
  "description": "",
  "dependencies": {
    "axios": "^1.7.9",
    "backend": "file:",
    "bcrypt": "^5.1.1",
    "body-parser": "^1.20.3",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "ethers": "^6.13.5",
    "express": "^4.21.2",
    "express-validator": "^7.2.1",
    "jsonwebtoken": "^9.0.2",
    "morgan": "^1.10.0",
    "react-toastify": "^11.0.5",
    "web3": "^4.16.0",
    "ws": "^8.18.0"
  }
}



================================================
File: backend/server.js
================================================
const express = require("express");
const cors = require("cors");
const http = require("http");
const WebSocket = require("ws");
const fs = require("fs");
const path = require("path");
const ethers = require("ethers");
require("dotenv").config();

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
const allowedOrigins = ["http://localhost:5173", "http://localhost:3000"];
app.use(
  cors({
    origin: (origin, callback) => {
      if (!origin || allowedOrigins.includes(origin)) {
        callback(null, true);
      } else {
        callback(new Error("Not allowed by CORS"));
      }
    },
  })
);
app.use(express.json());

// Admin wallets
let adminWallets = [];
const loadAdminWallets = () => {
  const configPath = path.join(__dirname, "config", "adminWallets.json");
  try {
    const configData = fs.readFileSync(configPath, "utf-8");
    const config = JSON.parse(configData);
    adminWallets = config.adminWallets.map((addr) => addr.toLowerCase());
    console.log("✅ Admin wallets loaded successfully.");
  } catch (error) {
    console.error("❌ Error reading adminWallets.json:", error.message);
    process.exit(1);
  }
};
loadAdminWallets();

let reloadTimeout;
fs.watch(path.join(__dirname, "config", "adminWallets.json"), () => {
  clearTimeout(reloadTimeout);
  reloadTimeout = setTimeout(() => {
    console.log("🔄 Admin wallet list updated. Reloading...");
    loadAdminWallets();
  }, 100);
});

// HTTP and WebSocket servers
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

const activeConnections = new Set();
wss.on("connection", (ws) => {
  console.log("🔗 New WebSocket connection established");
  activeConnections.add(ws);

  ws.on("message", (message) => {
    console.log(`📩 Received message: ${message}`);
  });

  ws.on("close", () => {
    console.log("🔌 WebSocket connection closed");
    activeConnections.delete(ws);
  });
});

wss.on("error", (error) => {
  console.error("🚨 WebSocket server error:", error.message);
});

function broadcast(data) {
  activeConnections.forEach((client) => {
    try {
      if (client.readyState === WebSocket.OPEN) {
        client.send(JSON.stringify(data));
      }
    } catch (error) {
      console.error("🚨 Error broadcasting message to client:", error.message);
    }
  });
}

// In-memory storage for events and votes
let events = [];
let votes = [];

// Record a vote
app.post("/api/vote", async (req, res) => {
  console.log("🗳️ Received vote request:", req.body);
  const { eventId, candidateIndex, signature, walletAddress } = req.body;

  // Validate input data
  if (
    !eventId ||
    candidateIndex === undefined ||
    !signature ||
    !walletAddress
  ) {
    console.error("❌ Invalid input data:", req.body);
    return res.status(400).json({ message: "Invalid input data" });
  }

  // Verify signature
  const message = "Please sign this message to confirm your vote";
  try {
    const signerAddress = ethers.verifyMessage(message, signature);
    if (signerAddress.toLowerCase() !== walletAddress.toLowerCase()) {
      console.error("❌ Invalid signature for wallet:", walletAddress);
      return res.status(401).json({ message: "Invalid signature" });
    }
  } catch (error) {
    console.error("❌ Error verifying signature:", error.message);
    return res.status(400).json({ message: "Invalid signature format" });
  }

  // Find the event
  const event = events.find((e) => e.id === parseInt(eventId));
  if (!event) {
    console.error("❌ Event not found for ID:", eventId);
    return res.status(404).json({ message: "Event not found" });
  }

  // Validate candidate index
  if (candidateIndex < 0 || candidateIndex >= event.candidates.length) {
    console.error("❌ Invalid candidate index:", candidateIndex);
    return res.status(400).json({ message: "Invalid candidate index" });
  }

  // Check if the user has already voted in this event
  const hasVoted = votes.some(
    (vote) => vote.eventId === eventId && vote.walletAddress === walletAddress
  );
  if (hasVoted) {
    console.error("❌ User has already voted in this event:", walletAddress);
    return res
      .status(400)
      .json({ message: "You have already voted in this event" });
  }

  // Record the vote
  votes.push({ eventId, candidateIndex, signature, walletAddress });
  event.candidates[candidateIndex].votes += 1;

  // Broadcast the updated vote count
  broadcast({
    type: "voteUpdate",
    data: {
      eventId,
      candidateIndex,
      updatedVoteCount: event.candidates[candidateIndex].votes,
    },
  });

  console.log("✅ Vote recorded successfully for wallet:", walletAddress);
  res.status(200).json({ message: "Vote recorded successfully" });
});

// Fetch event by ID
app.get("/api/events/:id", async (req, res) => {
  const eventId = parseInt(req.params.id);
  try {
    const event = events.find((e) => e.id === eventId);
    if (!event) {
      console.error("❌ Event not found for ID:", eventId);
      return res.status(404).json({ message: "Event not found" });
    }
    console.log("✅ Event fetched successfully:", event.title);
    res.json(event);
  } catch (error) {
    console.error("❌ Error fetching event:", error.message);
    res.status(500).json({ message: "Internal server error" });
  }
});

// Create a new event
app.post("/api/create-event", async (req, res) => {
  const {
    title,
    candidates,
    manifesto,
    voterLimit,
    startDate,
    startTime,
    endDate,
    endTime,
  } = req.body;

  console.log("📝 Received request to create event:", req.body);

  // Validate input data
  if (
    !title ||
    !Array.isArray(candidates) ||
    candidates.length < 2 ||
    !voterLimit ||
    !startDate ||
    !startTime ||
    !endDate ||
    !endTime
  ) {
    console.error("❌ Invalid input data:", req.body);
    return res.status(400).json({
      message: "Invalid input data",
      details: {
        title,
        candidates,
        manifesto,
        voterLimit,
        startDate,
        startTime,
        endDate,
        endTime,
      },
    });
  }

  // Validate each candidate
  for (const candidate of candidates) {
    if (!candidate.name || !candidate.bio) {
      console.error("❌ Each candidate must have a name and bio:", candidate);
      return res.status(400).json({
        message: "Each candidate must have a name and bio",
      });
    }
  }

  try {
    const newEvent = {
      id: Date.now(),
      title,
      candidates: candidates.map((candidate) => ({
        name: candidate.name,
        bio: candidate.bio,
        votes: 0,
      })),
      manifesto,
      voterLimit: parseInt(voterLimit, 10),
      startDate,
      startTime,
      endDate,
      endTime,
    };

    // Save the event in memory
    events.push(newEvent);

    console.log("🎉 New event created:", newEvent);

    // Broadcast the new event to all connected clients
    broadcast({
      type: "newEvent",
      data: {
        id: newEvent.id,
        title: newEvent.title,
        candidates: newEvent.candidates.map((candidate) => ({
          name: candidate.name,
          bio: candidate.bio,
        })),
        manifesto: newEvent.manifesto,
        voterLimit: newEvent.voterLimit,
        startDate: newEvent.startDate,
        startTime: newEvent.startTime,
        endDate: newEvent.endDate,
        endTime: newEvent.endTime,
      },
    });

    return res.status(201).json({
      message: "Event created successfully",
      event: newEvent,
    });
  } catch (error) {
    console.error("❌ Error creating event:", error.message);
    return res.status(500).json({
      message: "Internal server error",
      error: error.message,
    });
  }
});

// Wallet login
app.post("/api/wallet-login", async (req, res) => {
  const { walletAddress, signature } = req.body;

  if (!walletAddress || !signature) {
    console.warn("⚠️ Wallet login request missing required fields.");
    return res
      .status(400)
      .json({ message: "Wallet address and signature are required" });
  }

  try {
    const normalizedWallet = walletAddress.toLowerCase();
    const message = "Please sign this message to verify your identity.";

    try {
      const signerAddress = ethers.verifyMessage(message, signature);
      if (signerAddress.toLowerCase() !== normalizedWallet) {
        console.error("❌ Invalid signature for wallet:", walletAddress);
        return res.status(401).json({ message: "Invalid signature" });
      }
    } catch (error) {
      console.error("❌ Error verifying signature:", error.message);
      return res.status(400).json({ message: "Invalid signature format" });
    }

    const isAdmin = adminWallets.includes(normalizedWallet);
    console.log(
      `✅ Wallet logged in: ${walletAddress} (${isAdmin ? "Admin" : "User"})`
    );

    return res.status(200).json({
      message: `✅ Wallet connected! Role: ${isAdmin ? "Admin" : "User"}`,
      redirectTo: isAdmin ? "AdminDashboard" : "user-dashboard",
      role: isAdmin ? "admin" : "user",
    });
  } catch (error) {
    console.error("❌ Error processing wallet login:", error.message);
    return res.status(500).json({ message: "Internal server error" });
  }
});

// Wallet disconnect
app.post("/api/wallet-disconnect", async (req, res) => {
  const { walletAddress } = req.body;

  if (!walletAddress) {
    console.warn("⚠️ Disconnect request received without a wallet address.");
    return res.status(400).json({ message: "Wallet address is required" });
  }

  try {
    const normalizedWallet = walletAddress.toLowerCase();
    console.log(`🔌 Wallet disconnected: ${walletAddress}`);

    return res
      .status(200)
      .json({ message: "✅ Wallet disconnected successfully" });
  } catch (error) {
    console.error("❌ Error processing wallet disconnection:", error.message);
    return res.status(500).json({ message: "Internal server error" });
  }
});

// Helper functions
function isValidDate(date) {
  return /^\d{4}-\d{2}-\d{2}$/.test(date);
}

function isValidTime(time) {
  return /^\d{2}:\d{2}$/.test(time);
}

// Start the server
server.listen(PORT, () => {
  console.log(`🚀 Server running on http://localhost:${PORT}`);
});

// Graceful shutdown
process.on("SIGINT", () => {
  console.log("🛑 Shutting down server...");
  server.close(() => {
    console.log("✅ Server closed.");
    process.exit(0);
  });

  wss.clients.forEach((client) => {
    client.terminate();
  });
});

process.on("SIGTERM", () => {
  console.log("🛑 Terminating server...");
  server.close(() => {
    console.log("✅ Server terminated.");
    process.exit(0);
  });

  wss.clients.forEach((client) => {
    client.terminate();
  });
});



================================================
File: backend/config/adminWallets.json
================================================
{
  "adminWallets": [
    "0x2EBCF132340C1a3eBBc0605A9abF08082F0c69e6"
  ]
}



================================================
File: backend/controllers/adminController.js
================================================
// In-memory array to store admin wallet addresses
let adminWallets = [];

// Add a new admin
exports.addAdmin = async (req, res) => {
  const { walletAddress } = req.body;
  if (!walletAddress) {
    return res.status(400).json({ message: "Wallet address is required" });
  }
  try {
    // Normalize wallet address
    const normalizedWallet = walletAddress.toLowerCase();

    // Check if wallet address already exists
    const existingAdmin = adminWallets.find(
      (admin) => admin.walletAddress === normalizedWallet
    );
    if (existingAdmin) {
      return res.status(400).json({ message: "Wallet is already an admin" });
    }

    // Add new admin to the in-memory array
    adminWallets.push({ walletAddress: normalizedWallet });
    return res.status(201).json({ message: "Admin added successfully" });
  } catch (error) {
    console.error("Error adding admin:", error);
    return res.status(500).json({ message: "Internal server error" });
  }
};

// Get all admins
exports.getAdmins = async (req, res) => {
  try {
    // Return the list of admin wallet addresses
    return res.status(200).json(adminWallets);
  } catch (error) {
    console.error("Error fetching admins:", error);
    return res.status(500).json({ message: "Internal server error" });
  }
};



================================================
File: backend/controllers/authController.js
================================================
// In-memory arrays to store admin wallet addresses
let admins = [];

// Wallet Login for both admin and user
exports.walletLogin = async (req, res) => {
  const { walletAddress } = req.body;
  if (!walletAddress) {
    return res.status(400).json({ message: "Wallet address is required" });
  }
  try {
    // Normalize wallet address
    const normalizedWallet = walletAddress.toLowerCase();

    // Check if the wallet is an admin
    const isAdmin = admins.find(
      (admin) => admin.walletAddress === normalizedWallet
    );
    if (isAdmin) {
      return res.status(200).json({ redirectTo: "admin-dashboard" }); // Admin dashboard
    }

    // If not an admin, treat as a regular user
    return res.status(200).json({ redirectTo: "user-dashboard" }); // User dashboard
  } catch (error) {
    console.error("Error during login:", error);
    return res.status(500).json({ message: "Internal server error" });
  }
};

// Add a new admin
exports.addAdmin = async (req, res) => {
  const { walletAddress } = req.body;
  if (!walletAddress) {
    return res.status(400).json({ message: "Wallet address is required" });
  }
  try {
    // Normalize wallet address
    const normalizedWallet = walletAddress.toLowerCase();

    // Check if wallet address already exists as an admin
    const existingAdmin = admins.find(
      (admin) => admin.walletAddress === normalizedWallet
    );
    if (existingAdmin) {
      return res.status(400).json({ message: "Wallet is already an admin" });
    }

    // Add new admin
    admins.push({ walletAddress: normalizedWallet });
    return res.status(201).json({ message: "Admin added successfully" });
  } catch (error) {
    console.error("Error adding admin:", error);
    return res.status(500).json({ message: "Internal server error" });
  }
};

// Get all admins
exports.getAdmins = async (req, res) => {
  try {
    // Return the list of admin wallet addresses
    return res.status(200).json(admins);
  } catch (error) {
    console.error("Error fetching admins:", error);
    return res.status(500).json({ message: "Internal server error" });
  }
};



================================================
File: backend/middleware/verifyAdmin.js
================================================
const jwt = require("jsonwebtoken");

const verifyAdmin = (req, res, next) => {
  const token = req.header("Authorization")?.replace("Bearer ", "");

  if (!token) {
    return res
      .status(401)
      .json({ message: "Access denied. No token provided." });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    if (!decoded.isAdmin) {
      return res.status(403).json({ message: "Access denied. Not an admin." });
    }

    req.user = decoded;
    next();
  } catch (error) {
    res.status(400).json({ message: "Invalid token." });
  }
};

module.exports = verifyAdmin;



================================================
File: backend/routes/adminRoutes.js
================================================
const express = require("express");
const router = express.Router();
const { addAdmin, getAdmins } = require("../controllers/adminController");

// Route to add a new admin
router.post("/add", addAdmin);

// Route to get all admins
router.get("/", getAdmins);

module.exports = router;



================================================
File: backend/routes/authRoutes.js
================================================
const express = require("express");
const router = express.Router();
const { registerUser, walletLogin } = require("../controllers/authController");

// Route to register a new user
router.post("/register", registerUser);

// Route for wallet login (for both admin and user)
router.post("/wallet-login", walletLogin);

module.exports = router;



================================================
File: favicon/site.webmanifest
================================================
{"name":"","short_name":"","icons":[{"src":"/android-chrome-192x192.png","sizes":"192x192","type":"image/png"},{"src":"/android-chrome-512x512.png","sizes":"512x512","type":"image/png"}],"theme_color":"#ffffff","background_color":"#ffffff","display":"standalone"}


================================================
File: src/App.tsx
================================================
import React, { useEffect, useState } from "react";
import { BrowserRouter as Router, Routes, Route, useNavigate, Navigate, Outlet } from "react-router-dom";
import { Auth0Provider } from "@auth0/auth0-react";
import { useTranslation } from "react-i18next";
import { createRoot } from "react-dom/client"; // React 18 fix

import Navbar from "./components/Navbar";
import Home from "./pages/Home";
import About from "./pages/About";
import Contact from "./pages/Contact";
import Privacy from "./pages/Privacy";
import Dashboard from "./pages/UserDashboard";
import AdminDashboard from "./pages/AdminDashboard";
import Reports from "./pages/Reports";
import Tutorials from "./pages/Tutorials";
import Notifications from "./pages/Notifications";
import CreateEvent from "./pages/CreateEvent";
import VotingHistory from "./pages/VotingHistory";
import Sidebar from "./components/Sidebar";

import LanguageSelector from "./components/LanguageSelector";
import { WalletProvider } from "./components/WalletContext"; // Import WalletProvider
import { GoogleOAuthProvider } from "@react-oauth/google";
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import "./i18n";
import SystemLogs from "./pages/SystemLogs";
import LiveResults from "./pages/LiveResults";
import DashboardAnalytics from "./components/DashboardAnalytics";
import VoteNow from "./pages/VoteNow";
import UpcomingElections from "./components/UpcomingElections";
import DownloadReports from "./pages/DownloadReports";
import ViewPastElections from "./pages/ViewPastElections";
import SecurelyVoting from "./pages/SecurelyVoting";
import CreateSecureEvent from "./pages/CreateSecurePage";

const clientId =
  "618985753544-ru0sgmr1ad4fcmpgpaj8p1v2iopbhbnm.apps.googleusercontent.com";

const root = createRoot(document.getElementById("root")!); // React 18 syntax

root.render(
  <GoogleOAuthProvider clientId={clientId}>
    <WalletProvider>
      <App />
    </WalletProvider>
  </GoogleOAuthProvider>
);

function App() {
  const { i18n } = useTranslation();
  const [isSidebarOpen, setSidebarOpen] = useState(true);
  const [userRole, setUserRole] = useState<"user" | "admin" | null>(null);

  const handleLanguageChange = (lang: string) => {
    i18n.changeLanguage(lang);
    localStorage.setItem("language", lang);
  };

  const toggleSidebar = () => {
    setSidebarOpen(!isSidebarOpen);
  };

  useEffect(() => {
    const savedLanguage = localStorage.getItem("language");
    if (savedLanguage) {
      i18n.changeLanguage(savedLanguage);
    } else {
      i18n.changeLanguage(i18n.language);
    }

    // Fetch user role from local storage
    const role = localStorage.getItem("userRole") as "user" | "admin" | null;
    setUserRole(role);
  }, [i18n]);

  return (
    <Auth0Provider
      domain="YOUR_AUTH0_DOMAIN"
      clientId="YOUR_AUTH0_CLIENT_ID"
      authorizationParams={{ redirect_uri: window.location.origin }}
    >
      <Router>
        <Routes>
          {/* Public Layout (Navbar only) */}
          <Route
            element={
              <div className="min-h-screen bg-gray-50">
                <Navbar /> {/* Navbar will handle wallet logic inside */}
                <Outlet />
              </div>
            }
          >
            <Route path="/" element={<Home />} />
            <Route path="/about" element={<About />} />
            <Route path="/contact" element={<Contact />} />
            <Route path="/privacy" element={<Privacy />} />
          </Route>

          {/* Authenticated Layout (Sidebar only) */}
          <Route
            element={
              <div className="min-h-screen bg-gray-50 flex">
                <Sidebar isOpen={isSidebarOpen} toggleSidebar={toggleSidebar} isMobile={false} />
                <div
                  className={`flex-1 transition-all duration-300 ${isSidebarOpen ? "ml-48" : "ml-20"} p-6`}
                >
                  <Outlet />
                </div>
              </div>
            }
          >
            {/* Correct Dashboard Redirect */}
            <Route path="/user-dashboard" element={<Dashboard isSidebarOpen={isSidebarOpen} />} />
            <Route path="/admin-dashboard" element={<AdminDashboard />} />
            <Route path="/reports" element={<Reports />} />
            <Route path="/tutorials" element={<Tutorials />} />
            <Route path="/notifications" element={<Notifications />} />
            <Route path="/create-event" element={<CreateEvent />} />
            <Route path="/create-secure-event" element={<CreateSecureEvent />} />
            <Route path="/voting-history" element={<VotingHistory />} />
            <Route path="/past-elections" element={<ViewPastElections />} />
            <Route path="/download-reports" element={<DownloadReports />} />
            <Route path="/system-logs" element={<SystemLogs />} />
            <Route path="/upcoming-elections" element={<UpcomingElections />} />
            <Route path="/dashboard-analytics" element={<DashboardAnalytics />} />
            <Route path="/vote-now/:eventId" element={<VoteNow />} />
            <Route path="/live-results" element={<LiveResults />} />
            <Route path="/securely-voting" element={<SecurelyVoting />} />
          </Route>
        </Routes>
        <ToastContainer />
      </Router>
    </Auth0Provider>
  );
}

/**
 * Component to Redirect Users Based on Role
 */
function NavigateToDashboard() {
  const navigate = useNavigate();
  const userRole = localStorage.getItem("userRole");

  useEffect(() => {
    if (userRole === "admin") {
      navigate("/admin-dashboard");
    } else {
      navigate("/user-dashboard");
    }
  }, [userRole, navigate]);

  return null; // No need to render anything
}

export default App;


================================================
File: src/i18n.js
================================================
import i18n from "i18next";
import { initReactI18next } from "react-i18next";
import translationEN from "./locales/en/translation.json";
import translationHI from "./locales/hi/translation.json";
import translationMR from "./locales/mr/translation.json";
import translationGU from "./locales/gu/translation.json";
import translationBN from "./locales/bn/translation.json";
import translationTA from "./locales/ta/translation.json";

i18n.use(initReactI18next).init({
  resources: {
    en: { translation: translationEN },
    hi: { translation: translationHI },
    mr: { translation: translationMR },
    gu: { translation: translationGU },
    bn: { translation: translationBN },
    ta: { translation: translationTA },
  },
  lng: "en", // Default language
  fallbackLng: "en", // Fallback language if the selected one is missing
  interpolation: {
    escapeValue: false, // React already escapes values to avoid XSS
  },
});

// Add the language change listener
i18n.on("languageChanged", (lng) => {
  console.log(`Language changed to: ${lng}`);
});

export default i18n;



================================================
File: src/index.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;



================================================
File: src/main.tsx
================================================
// src/main.tsx

import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.tsx';
import './index.css';
import { WalletProvider } from './components/WalletContext'; // Import WalletProvider

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <WalletProvider> {/* Wrap your app with the WalletProvider */}
      <App />
    </WalletProvider>
  </StrictMode>
);



================================================
File: src/vite-env.d.ts
================================================
/// <reference types="vite/client" />



================================================
File: src/components/BackToTopButton.tsx
================================================
import React, { useState, useEffect } from 'react';
import { ArrowUp } from 'lucide-react';

const BackToTopButton = () => {
  const [isVisible, setIsVisible] = useState(false);

  // Scroll event listener
  useEffect(() => {
    const toggleVisibility = () => {
      if (window.scrollY > 300) {
        setIsVisible(true);
      } else {
        setIsVisible(false);
      }
    };

    window.addEventListener('scroll', toggleVisibility);

    return () => {
      window.removeEventListener('scroll', toggleVisibility);
    };
  }, []);

  // Scroll to top function
  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth',
    });
  };

  return (
    isVisible && (
      <button
        onClick={scrollToTop}
        className="fixed bottom-6 right-6 bg-indigo-600 text-white p-3 rounded-full shadow-lg hover:bg-indigo-700 transition-transform transform hover:scale-110"
        aria-label="Scroll to top"
      >
        <ArrowUp className="h-6 w-6" />
      </button>
    )
  );
};

export default BackToTopButton;



================================================
File: src/components/Button.tsx
================================================
import React from 'react';
import { motion } from 'framer-motion';

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary';
  icon?: React.ReactNode;
}

const Button: React.FC<ButtonProps> = ({
  children,
  variant = 'primary',
  icon,
  className = '',
  ...props
}) => {
  const baseStyles = 'flex items-center justify-center px-6 py-3 rounded-lg font-medium transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-offset-2';
  
  const variants = {
    primary: 'bg-gradient-to-r from-indigo-600 to-purple-600 text-white hover:from-indigo-700 hover:to-purple-700 focus:ring-indigo-500',
    secondary: 'bg-white text-indigo-600 border-2 border-indigo-600 hover:bg-indigo-50 focus:ring-indigo-500',
  };

  return (
    <motion.button
      whileHover={{ scale: 1.05 }}
      whileTap={{ scale: 0.95 }}
      className={`${baseStyles} ${variants[variant]} ${className}`}
      {...props}
    >
      {icon && <span className="mr-2">{icon}</span>}
      {children}
    </motion.button>
  );
};

export default Button;


================================================
File: src/components/Card.tsx
================================================
import React from 'react';
import { motion } from 'framer-motion';

interface CardProps {
  children: React.ReactNode;
  className?: string;
}

const Card: React.FC<CardProps> = ({ children, className = '' }) => {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      whileHover={{ y: -5 }}
      className={`bg-white rounded-lg shadow-md hover:shadow-xl transition-shadow duration-300 ${className}`}
    >
      {children}
    </motion.div>
  );
};

export default Card;


================================================
File: src/components/DashboardAnalytics.tsx
================================================
import React from "react";
import { BarChart, PieChart, LineChart } from "lucide-react";
import Card from "../components/Card";
import Button from "../components/Button";
import { useNavigate } from "react-router-dom";
import { Bar, Pie, Line } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  PointElement,
  LineElement,
} from "chart.js";

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  PointElement,
  LineElement
);

const DashboardAnalytics = () => {
  const navigate = useNavigate();

  const analyticsData = {
    labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun"],
    datasets: [
      {
        label: "Votes Cast",
        data: [120, 190, 300, 250, 200, 350],
        backgroundColor: "rgba(79, 70, 229, 0.6)",
      },
    ],
  };

  const pieData = {
    labels: ["Completed", "Ongoing", "Upcoming"],
    datasets: [
      {
        label: "Elections",
        data: [12, 5, 3],
        backgroundColor: ["#4F46E5", "#F59E0B", "#10B981"],
      },
    ],
  };

  const lineData = {
    labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun"],
    datasets: [
      {
        label: "Voter Turnout",
        data: [80, 85, 90, 88, 92, 95],
        borderColor: "#4F46E5",
        fill: false,
      },
    ],
  };

  const analyticsFeatures = [
    {
      title: "Voting Trends",
      icon: <BarChart className="h-8 w-8 text-indigo-600" />,
      description: "Analyze voting trends over time.",
      onClick: () => navigate("/voting-trends"),
    },
    {
      title: "Election Distribution",
      icon: <PieChart className="h-8 w-8 text-indigo-600" />,
      description: "View the distribution of elections by status.",
      onClick: () => navigate("/election-distribution"),
    },
    {
      title: "Voter Turnout",
      icon: <LineChart className="h-8 w-8 text-indigo-600" />,
      description: "Track voter turnout rates over time.",
      onClick: () => navigate("/voter-turnout"),
    },
  ];

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-gray-100">
      {/* Header */}
      <div className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white py-12 text-center">
        <h1 className="text-4xl font-bold">Dashboard Analytics</h1>
        <p className="mt-2 text-lg">Gain insights into voting trends and election data.</p>
      </div>

      {/* Analytics Grid */}
      <div className="max-w-7xl mx-auto px-4 py-12 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {analyticsFeatures.map((feature, index) => (
          <Card key={index} className="p-6 text-center hover:shadow-lg transition-shadow">
            <div className="flex justify-center mb-4">{feature.icon}</div>
            <h3 className="text-xl font-semibold text-gray-900 mb-2">
              {feature.title}
            </h3>
            <p className="text-gray-600 mb-4">{feature.description}</p>
            <Button onClick={feature.onClick} variant="primary" className="w-full">
              {feature.title}
            </Button>
          </Card>
        ))}
      </div>

      {/* Charts Section */}
      <div className="max-w-7xl mx-auto px-4 py-12 space-y-8">
        <Card className="p-6">
          <h2 className="text-2xl font-bold mb-4">Voting Trends</h2>
          <Bar data={analyticsData} />
        </Card>

        <Card className="p-6">
          <h2 className="text-2xl font-bold mb-4">Election Distribution</h2>
          <Pie data={pieData} />
        </Card>

        <Card className="p-6">
          <h2 className="text-2xl font-bold mb-4">Voter Turnout</h2>
          <Line data={lineData} />
        </Card>
      </div>
    </div>
  );
};

export default DashboardAnalytics;


================================================
File: src/components/Footer.tsx
================================================
import React from 'react';
import { Facebook, Twitter, Instagram, Linkedin } from 'lucide-react';

const Footer = () => {
  const handleScroll = (id: string) => {
    const target = document.getElementById(id);
    if (target) {
      target.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  };

  return (
    <footer className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white py-8">
      <div className="max-w-7xl mx-auto px-4">
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-8">
          {/* About Section */}
          <div>
            <h4 className="text-lg font-semibold mb-4">About EzyVote</h4>
            <p className="text-sm text-gray-200">
              EzyVote is a decentralized voting platform designed for secure and transparent elections. Powered by blockchain technology, it ensures integrity and ease of use.
            </p>
          </div>

          {/* Quick Links */}
          <div>
            <h4 className="text-lg font-semibold mb-4">Quick Navigates</h4>
            <ul className="space-y-2">
              <li>
                <button onClick={() => handleScroll('features')} className="text-gray-200 hover:text-white">
                  Features
                </button>
              </li>
              <li>
                <button onClick={() => handleScroll('how-it-works')} className="text-gray-200 hover:text-white">
                  How It Works
                </button>
              </li>
              <li>
                <button onClick={() => handleScroll('testimonials')} className="text-gray-200 hover:text-white">
                  Testimonials
                </button>
              </li>
              <li>
                <button onClick={() => handleScroll('fun-facts')} className="text-gray-200 hover:text-white">
                  Fun Facts
                </button>
              </li>
              <li>
                <button onClick={() => handleScroll('faq')} className="text-gray-200 hover:text-white">
                  FAQs
                </button>
              </li>
            </ul>
          </div>

          {/* Social Media */}
          <div>
            <h4 className="text-lg font-semibold mb-4">Follow Us</h4>
            <div className="flex space-x-4">
              {/* <a href="https://facebook.com" target="_blank" rel="noopener noreferrer" aria-label="Facebook">
                <Facebook className="h-6 w-6 text-gray-200 hover:text-white transition-transform transform hover:scale-110" />
              </a> */}
              <a href="https://twitter.com" target="_blank" rel="noopener noreferrer" aria-label="Twitter">
                <Twitter className="h-6 w-6 text-gray-200 hover:text-green-900 transition-transform transform hover:scale-110" />
              </a>
              <a href="https://www.instagram.com/ezyvote" target="_blank" rel="noopener noreferrer" aria-label="Instagram">
                <Instagram className="h-6 w-6 text-gray-200 hover:text-red-600 transition-transform transform hover:scale-110" />
              </a>
              {/* <a href="https://linkedin.com" target="_blank" rel="noopener noreferrer" aria-label="LinkedIn">
                <Linkedin className="h-6 w-6 text-gray-200 hover:text-blue-600 transition-transform transform hover:scale-110" />
              </a> */}
            </div>
          </div>
        </div>

        {/* Divider */}
        <div className="mt-8 border-t border-gray-400 pt-4 text-center text-sm text-gray-200">
          &copy; {new Date().getFullYear()} EzyVote. All rights reserved by Rakesh Mal.
        </div>
      </div>
    </footer>
  );
};

export default Footer;



================================================
File: src/components/FooterAbout.tsx
================================================
import React from 'react';
import { Facebook, Twitter, Instagram, Linkedin } from 'lucide-react';

const FooterAbout = () => {
  const handleScroll = (id: string) => {
    const target = document.getElementById(id);
    if (target) {
      target.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  };

  return (
    <footer className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white py-8">
      <div className="max-w-7xl mx-auto px-4">
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-8">
          {/* About Section */}
          <div>
            <h4 className="text-lg font-semibold mb-4">About EzyVote</h4>
            <p className="text-sm text-gray-200">
              EzyVote is a decentralized voting platform designed for secure and transparent elections. Powered by blockchain technology, it ensures integrity and ease of use.
            </p>
          </div>

          {/* Quick Links */}
          <div>
            <h4 className="text-lg font-semibold mb-4">Quick Navigates</h4>
            <ul className="space-y-2">
              <li>
                <button onClick={() => handleScroll('mission-statement')} className="text-gray-200 hover:text-white">
                  Mission Statement
                </button>
              </li>
              <li>
                <button onClick={() => handleScroll('core-values')} className="text-gray-200 hover:text-white">
                  Our Core Values
                </button>
              </li>
              <li>
                <button onClick={() => handleScroll('meet-the-team')} className="text-gray-200 hover:text-white">
                  Meet the Team
                </button>
              </li>
            </ul>
          </div>

          {/* Social Media */}
          <div>
            <h4 className="text-lg font-semibold mb-4">Follow Us</h4>
            <div className="flex space-x-4">
              {/* <a href="https://facebook.com" target="_blank" rel="noopener noreferrer" aria-label="Facebook">
                <Facebook className="h-6 w-6 text-gray-200 hover:text-white transition-transform transform hover:scale-110" />
              </a> */}
              <a href="https://twitter.com" target="_blank" rel="noopener noreferrer" aria-label="Twitter">
                <Twitter className="h-6 w-6 text-gray-200 hover:text-green-900 transition-transform transform hover:scale-110" />
              </a>
              <a href="https://www.instagram.com/ezyvote" target="_blank" rel="noopener noreferrer" aria-label="Instagram">
                <Instagram className="h-6 w-6 text-gray-200 hover:text-red-600 transition-transform transform hover:scale-110" />
              </a>
              {/* <a href="https://linkedin.com" target="_blank" rel="noopener noreferrer" aria-label="LinkedIn">
                <Linkedin className="h-6 w-6 text-gray-200 hover:text-blue-600 transition-transform transform hover:scale-110" />
              </a> */}
            </div>
          </div>
        </div>

        {/* Divider */}
        <div className="mt-8 border-t border-gray-400 pt-4 text-center text-sm text-gray-200">
          &copy; {new Date().getFullYear()} EzyVote. All rights reserved by Rakesh Mal.
        </div>
      </div>
    </footer>
  );
};

export default FooterAbout;



================================================
File: src/components/FooterContact.tsx
================================================
import React from 'react';
import { Facebook, Twitter, Instagram, Linkedin } from 'lucide-react';

const FooterContact = () => {
  const handleScroll = (id: string) => {
    const target = document.getElementById(id);
    if (target) {
      target.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  };

  return (
    <footer className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white py-8">
      <div className="max-w-7xl mx-auto px-4">
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-8">
          {/* About Section */}
          <div>
            <h4 className="text-lg font-semibold mb-4">About EzyVote</h4>
            <p className="text-sm text-gray-200">
              EzyVote is a decentralized voting platform designed for secure and transparent elections. Powered by blockchain technology, it ensures integrity and ease of use.
            </p>
          </div>

          {/* Quick Links */}
          <div>
            <h4 className="text-lg font-semibold mb-4">Quick Navigates</h4>
            <ul className="space-y-2">
              <li>
                <button onClick={() => handleScroll('contact-info')} className="text-gray-200 hover:text-white">
                  Contact Information
                </button>
              </li>
              <li>
                <button onClick={() => handleScroll('find-location')} className="text-gray-200 hover:text-white">
                  Find us our Location
                </button>
              </li>
              <li>
                <button onClick={() => handleScroll('save-contact')} className="text-gray-200 hover:text-white">
                  Scan To Save Contact
                </button>
              </li>
              <li>
                <button onClick={() => handleScroll('send-message')} className="text-gray-200 hover:text-white">
                  Send Us a Message
                </button>
              </li>
            </ul>
          </div>

          {/* Social Media */}
          <div>
            <h4 className="text-lg font-semibold mb-4">Follow Us</h4>
            <div className="flex space-x-4">
              {/* <a href="https://facebook.com" target="_blank" rel="noopener noreferrer" aria-label="Facebook">
                <Facebook className="h-6 w-6 text-gray-200 hover:text-white transition-transform transform hover:scale-110" />
              </a> */}
              <a href="https://twitter.com" target="_blank" rel="noopener noreferrer" aria-label="Twitter">
                <Twitter className="h-6 w-6 text-gray-200 hover:text-green-900 transition-transform transform hover:scale-110" />
              </a>
              <a href="https://www.instagram.com/ezyvote" target="_blank" rel="noopener noreferrer" aria-label="Instagram">
                <Instagram className="h-6 w-6 text-gray-200 hover:text-red-600 transition-transform transform hover:scale-110" />
              </a>
              {/* <a href="https://linkedin.com" target="_blank" rel="noopener noreferrer" aria-label="LinkedIn">
                <Linkedin className="h-6 w-6 text-gray-200 hover:text-blue-600 transition-transform transform hover:scale-110" />
              </a> */}
            </div>
          </div>
        </div>

        {/* Divider */}
        <div className="mt-8 border-t border-gray-400 pt-4 text-center text-sm text-gray-200">
          &copy; {new Date().getFullYear()} EzyVote. All rights reserved by Rakesh Mal.
        </div>
      </div>
    </footer>
  );
};

export default FooterContact;



================================================
File: src/components/FooterPrivacyPolicy.tsx
================================================
import React from 'react';
import { Facebook, Twitter, Instagram, Linkedin } from 'lucide-react';

const FooterPrivacyPolicy = () => {
  const handleScroll = (id: string) => {
    const target = document.getElementById(id);
    if (target) {
      target.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  };

  return (
    <footer className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white py-8">
      <div className="max-w-7xl mx-auto px-4">
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-8">
          {/* About Section */}
          <div>
            <h4 className="text-lg font-semibold mb-4">About EzyVote</h4>
            <p className="text-sm text-gray-200">
              EzyVote is a decentralized voting platform designed for secure and transparent elections. Powered by blockchain technology, it ensures integrity and ease of use.
            </p>
          </div>

          {/* Quick Links */}
          <div>
            <h4 className="text-lg font-semibold mb-4">Quick Navigates</h4>
            <ul className="space-y-2">
              <li>
                <button onClick={() => handleScroll('privacy-policy')} className="text-gray-200 hover:text-white">
                  Privacy Policy
                </button>
              </li>
            </ul>
          </div>

          {/* Social Media */}
          <div>
            <h4 className="text-lg font-semibold mb-4">Follow Us</h4>
            <div className="flex space-x-4">
              {/* <a href="https://facebook.com" target="_blank" rel="noopener noreferrer" aria-label="Facebook">
                <Facebook className="h-6 w-6 text-gray-200 hover:text-white transition-transform transform hover:scale-110" />
              </a> */}
              <a href="https://twitter.com" target="_blank" rel="noopener noreferrer" aria-label="Twitter">
                <Twitter className="h-6 w-6 text-gray-200 hover:text-green-900 transition-transform transform hover:scale-110" />
              </a>
              <a href="https://www.instagram.com/ezyvote" target="_blank" rel="noopener noreferrer" aria-label="Instagram">
                <Instagram className="h-6 w-6 text-gray-200 hover:text-red-600 transition-transform transform hover:scale-110" />
              </a>
              {/* <a href="https://linkedin.com" target="_blank" rel="noopener noreferrer" aria-label="LinkedIn">
                <Linkedin className="h-6 w-6 text-gray-200 hover:text-blue-600 transition-transform transform hover:scale-110" />
              </a> */}
            </div>
          </div>
        </div>

        {/* Divider */}
        <div className="mt-8 border-t border-gray-400 pt-4 text-center text-sm text-gray-200">
          &copy; {new Date().getFullYear()} EzyVote. All rights reserved by Rakesh Mal.
        </div>
      </div>
    </footer>
  );
};

export default FooterPrivacyPolicy;



================================================
File: src/components/LanguageSelector.tsx
================================================
import React from 'react';

interface LanguageSelectorProps {
  onChange: (lang: string) => void;
  currentLanguage: string;
}

const LanguageSelector: React.FC<LanguageSelectorProps> = ({
  onChange,
  currentLanguage,
}) => {
  const languages = [
    { code: 'en', label: 'English' },
    { code: 'hi', label: 'हिंदी' },
    { code: 'mr', label: 'मराठी' },
    { code: 'gu', label: 'ગુજરાતી' },
    { code: 'bn', label: 'বাংলা' },
    { code: 'ta', label: 'தமிழ்' },
  ];

  return (
    <div className="flex items-center space-x-4">
      <span className="text-gray-600">Language:</span>
      <select
        value={currentLanguage}
        onChange={(e) => {
          // console.log('Language selected:', e.target.value); // Log the selected language for checking in console
          onChange(e.target.value); // Call the onChange function passed as prop
        }}
        className="border rounded-md px-2 py-1 text-gray-600"
      >
        {languages.map((lang) => (
          <option key={lang.code} value={lang.code}>
            {lang.label}
          </option>
        ))}
      </select>
    </div>
  );
};

export default LanguageSelector;



================================================
File: src/components/LoadingSpinner.tsx
================================================
import React from 'react';

const LoadingSpinner: React.FC = () => {
  return (
    <div className="flex justify-center items-center">
      <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
    </div>
  );
};

export default LoadingSpinner;


================================================
File: src/components/NavUnderline.tsx
================================================
import React from 'react';
import { motion } from 'framer-motion';

const NavUnderline = () => {
  return (
    <motion.div
      className="absolute -bottom-1 left-0 right-0 h-0.5 bg-purple-200 origin-left"
      initial={{ scaleX: 0 }}
      animate={{ scaleX: 1 }}
      exit={{ scaleX: 0 }}
      transition={{ duration: 0.2 }}
    />
  );
};

export default NavUnderline;


================================================
File: src/components/Navbar.tsx
================================================
import React, { useState, useEffect, useCallback } from 'react';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import { Vote, Home, Info, Mail, Shield, Menu, X, LogOut } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import NavUnderline from './NavUnderline';
import { toast } from 'react-toastify';
import { useWallet } from './WalletContext';

const Navbar = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [isVisible, setIsVisible] = useState(true);
  const location = useLocation();
  const navigate = useNavigate();
  const { walletAddress, isWalletConnected, connectWallet, disconnectWallet } = useWallet();

  const navItems = [
    { path: '/', icon: <Home className="h-4 w-4" />, label: 'Home' },
    { path: '/about', icon: <Info className="h-4 w-4" />, label: 'About Us' },
    { path: '/contact', icon: <Mail className="h-4 w-4" />, label: 'Contact' },
    { path: '/privacy', icon: <Shield className="h-4 w-4" />, label: 'Privacy Policy' },
  ];

  const handleScroll = useCallback(() => {
    setIsVisible(window.scrollY < 50 || window.scrollY < window.prevScrollY);
    window.prevScrollY = window.scrollY;
  }, []);

  useEffect(() => {
    window.prevScrollY = window.scrollY;
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [handleScroll]);

  const handleConnectWallet = async () => {
    try {
      // Check if MetaMask is installed
      if (typeof window.ethereum === 'undefined') {
        toast.error('MetaMask is not installed. Please install MetaMask to connect your wallet.');
        return;
      }

      // Request wallet connection from MetaMask
      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });

      if (accounts && accounts.length > 0) {
        // Successfully connected wallet
        connectWallet(); // Call your connectWallet function to update state
        toast.success('Wallet connected successfully!');
      } else {
        // No accounts returned
        toast.error('Wallet connection failed. Please try again.');
      }
    } catch (error) {
      // If there's an error in connecting
      toast.error('Could not connect to MetaMask.');
      console.error('Error connecting MetaMask:', error);
    }
  };

  const handleDisconnectWallet = () => {
    disconnectWallet();
    toast.info('Wallet disconnected successfully!');
  };

  return (
    <nav
      className={`bg-gradient-to-r from-indigo-600 to-purple-600 text-white shadow-lg fixed w-full z-50 transition-transform duration-300 ${
        isVisible ? 'translate-y-0' : '-translate-y-full'
      }`}
    >
      <div className="max-w-7xl mx-auto px-4">
        <div className="flex items-center justify-between h-16">
          {/* Logo */}
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.5 }}
          >
            <Link to="/" className="flex items-center space-x-2 group">
              <Vote className="h-8 w-8 transform group-hover:rotate-12 transition-transform duration-300" />
              <span className="font-bold text-xl group-hover:text-purple-200 transition-colors">
                EzyVote
              </span>
            </Link>
          </motion.div>

          {/* Desktop Navigation */}
          <div className="hidden md:flex space-x-6">
            {navItems.map((item) => (
              <motion.div
                key={item.path}
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
              >
                <Link
                  to={item.path}
                  className={`flex items-center space-x-1 hover:text-purple-200 transition-colors relative group py-1 ${
                    location.pathname === item.path ? 'text-purple-200' : ''
                  }`}
                >
                  {item.icon}
                  <span>{item.label}</span>
                  <AnimatePresence>{location.pathname === item.path && <NavUnderline />}</AnimatePresence>
                </Link>
              </motion.div>
            ))}
            <button
              onClick={isWalletConnected ? handleDisconnectWallet : handleConnectWallet}
              className="flex items-center space-x-1 hover:text-purple-200 transition-colors"
            >
              <LogOut className="h-4 w-4" />
              <span>{isWalletConnected ? 'Disconnect' : 'Connect Wallet'}</span>
            </button>
          </div>

          {/* Mobile Menu Button */}
          <div className="md:hidden">
            <button
              onClick={() => setIsOpen(!isOpen)}
              className="p-2 rounded-md hover:bg-indigo-700 transition-colors"
            >
              {isOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
            </button>
          </div>
        </div>
      </div>

      {/* Mobile Navigation */}
      <motion.div
        initial={false}
        animate={{ height: isOpen ? 'auto' : 0 }}
        className={`md:hidden overflow-hidden bg-indigo-700`}
      >
        <div className="px-4 py-2 space-y-2">
          {navItems.map((item) => (
            <Link
              key={item.path}
              to={item.path}
              onClick={() => setIsOpen(false)}
              className={`flex items-center space-x-2 p-2 rounded-md hover:bg-indigo-600 transition-colors ${
                location.pathname === item.path ? 'bg-indigo-600' : ''
              }`}
            >
              {item.icon}
              <span>{item.label}</span>
            </Link>
          ))}
          <button
            onClick={() => {
              isWalletConnected ? handleDisconnectWallet() : handleConnectWallet();
              setIsOpen(false);
            }}
            className="flex items-center space-x-2 p-2 rounded-md hover:bg-indigo-600 transition-colors w-full"
          >
            <LogOut className="h-4 w-4" />
            <span>{isWalletConnected ? 'Disconnect' : 'Connect Wallet'}</span>
          </button>
        </div>
      </motion.div>
    </nav>
  );
};

export default Navbar;


================================================
File: src/components/Sidebar.tsx
================================================
// src/components/Sidebar.tsx
import React from 'react';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import { Home, BarChart, Book, Bell, Menu, X, LogOut } from 'lucide-react';
import { motion } from 'framer-motion';
import { useWallet } from './WalletContext'; // Assuming you're using WalletContext

interface SidebarProps {
  isOpen: boolean;
  toggleSidebar: () => void;
  isMobile: boolean;
}

const Sidebar: React.FC<SidebarProps> = ({ isOpen, toggleSidebar, isMobile }) => {
  const location = useLocation();
  const navigate = useNavigate();
  const {  disconnectWallet, userRole } = useWallet(); // Use wallet disconnect function and userRole

  // Common navigation items for both user and admin
  const commonNavItems = [
    { path: '/reports', icon: <BarChart className="h-6 w-6" />, label: 'Reports' },
    { path: '/tutorials', icon: <Book className="h-6 w-6" />, label: 'Tutorials' },
    { path: '/notifications', icon: <Bell className="h-6 w-6" />, label: 'Notifications' },
  ];

  // Role-specific navigation items
  const userNavItems = [
    { path: '/user-dashboard', icon: <Home className="h-6 w-6" />, label: 'Dashboard' },
  ];

  const adminNavItems = [
    { path: '/admin-dashboard', icon: <Home className="h-6 w-6" />, label: 'Dashboard' },
  ];

  // Combine common and role-specific navigation items
  const navItems = [
    ...(userRole === 'admin' ? adminNavItems : userNavItems),
    ...commonNavItems,
  ];

  // Function to handle wallet disconnection
  const handleDisconnect = async () => {
    await disconnectWallet(); // Disconnect wallet
    navigate('/'); // Redirect to home page after disconnecting
  };

  return (
    <motion.div
      className={`bg-gradient-to-t from-indigo-600 to-purple-600 text-white h-screen fixed top-0 left-0 z-40 transition-all duration-300 ${
        isOpen ? 'w-48' : isMobile ? 'w-0' : 'w-20'
      }`}
      initial={{ x: isMobile ? '-100%' : '0' }}
      animate={{ x: isOpen || !isMobile ? '0' : '-100%' }}
      transition={{ type: 'spring', stiffness: 80 }}
    >
      <div className="flex items-center justify-between p-4">
        {isOpen && (
          <Link to="/" className="flex items-center space-x-2 group">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
              className="lucide lucide-vote h-8 w-8 transform transition-transform duration-300 group-hover:rotate-12"
            >
              <path d="m9 12 2 2 4-4"></path>
              <path d="M5 7c0-1.1.9-2 2-2h10a2 2 0 0 1 2 2v12H5V7Z"></path>
              <path d="M22 19H2"></path>
            </svg>
            <span className="font-bold text-lg hover:text-purple-200 transition-colors">EzyVote</span>
          </Link>
        )}
        {!isMobile && (
          <button onClick={toggleSidebar} className="text-white text-xl focus:outline-none hover:bg-indigo-800 space-x-3 p-2 rounded-md">
            {isOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
          </button>
        )}
      </div>

      <div className="mt-10 space-y-2">
        {navItems.map((item) => (
          <Link
            key={item.path}
            to={item.path}
            className={`flex items-center space-x-4 p-4 hover:bg-indigo-800 rounded-md relative ${
              !isOpen && !isMobile ? 'justify-center' : ''
            } ${
              location.pathname === item.path ? 'bg-indigo-800' : ''
            }`}
          >
            {item.icon}
            {(isOpen || isMobile) && (
              <span className="whitespace-nowrap">
                {item.label}
                {location.pathname === item.path && (
                  <motion.div
                    className="absolute bottom-0 left-0 w-full h-1 bg-white"
                    initial={{ scaleX: 0 }}
                    animate={{ scaleX: 1 }}
                    transition={{ duration: 0.3 }}
                  />
                )}
              </span>
            )}
          </Link>
        ))}
      </div>

      {/* Disconnect Button */}
      <div className="absolute bottom-0 left-0 w-full p-4">
        <button
          onClick={handleDisconnect} // Call handleDisconnect instead of logout
          className="flex items-center space-x-4 p-4 hover:bg-indigo-800 rounded-md w-full"
        >
          <LogOut className="h-6 w-6" />
          {(isOpen || isMobile) && (
            <span className="whitespace-nowrap">Disconnect</span>
          )}
        </button>
      </div>
    </motion.div>
  );
};

export default Sidebar;


================================================
File: src/components/TermsAndConditionsPopup.tsx
================================================
import React from 'react';

interface TermsAndConditionsPopupProps {
  isOpen: boolean;
  onAccept: () => void;
  onCancel: () => void;
}

const TermsAndConditionsPopup: React.FC<TermsAndConditionsPopupProps> = ({
  isOpen,
  onAccept,
  onCancel,
}) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
      <div className="bg-white p-6 rounded-lg shadow-lg max-w-md w-full">
        <h2 className="text-xl font-bold mb-4">Terms and Conditions</h2>
        <p className="mb-4">
          By accepting these terms, you agree to abide by the rules and regulations of EzyVote.
          Please read carefully before proceeding.
        </p>
        <div className="flex justify-end space-x-4">
          <button
            onClick={onCancel}
            className="px-4 py-2 bg-gray-300 text-gray-800 rounded hover:bg-gray-400"
          >
            Cancel
          </button>
          <button
            onClick={onAccept}
            className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
          >
            Accept
          </button>
        </div>
      </div>
    </div>
  );
};

export default TermsAndConditionsPopup;


================================================
File: src/components/UpcomingElections.tsx
================================================
import React, { useEffect, useState } from "react";
import { Calendar, Clock, Vote, Trash2, X } from "lucide-react"; // Added X icon for delete
import Card from "../components/Card";
import Button from "../components/Button";
import { useNavigate } from "react-router-dom";
import BackToTopButton from "./BackToTopButton";

const UpcomingElections = () => {
  const navigate = useNavigate();
  const [elections, setElections] = useState([]); // State to store upcoming elections
  const [isLoading, setIsLoading] = useState(true); // Loading state
  const [isClearPopupOpen, setIsClearPopupOpen] = useState(false); // Clear all popup state
  const [deleteElectionId, setDeleteElectionId] = useState(null); // Delete specific election popup state

  useEffect(() => {
    // Load elections from localStorage on component mount
    const savedElections = localStorage.getItem("upcomingElections");
    if (savedElections) {
      setElections(JSON.parse(savedElections));
    }

    // Establish WebSocket connection
    const socket = new WebSocket("ws://localhost:5000");

    // Listen for messages from the server
    socket.onmessage = (event) => {
      try {
        const message = JSON.parse(event.data);
        if (message.type === "newEvent") {
          console.log("New event received:", message.data);
          // Add the new event to the elections list
          setElections((prevElections) => {
            const updatedElections = [...prevElections, message.data];
            // Sort events by start date and time
            const sortedElections = updatedElections.sort((a, b) => {
              const aDateTime = new Date(`${a.startDate || ""}T${a.startTime || ""}`);
              const bDateTime = new Date(`${b.startDate || ""}T${b.startTime || ""}`);
              return aDateTime.getTime() - bDateTime.getTime();
            });
            // Save updated elections to localStorage
            localStorage.setItem("upcomingElections", JSON.stringify(sortedElections));
            return sortedElections;
          });
        }
      } catch (error) {
        console.error("Error parsing WebSocket message:", error);
      } finally {
        setIsLoading(false); // Mark loading as complete
      }
    };

    // Handle WebSocket errors
    socket.onerror = (error) => {
      console.error("WebSocket error:", error);
      setIsLoading(false); // Mark loading as complete
    };

    // Cleanup WebSocket connection on component unmount
    return () => {
      socket.close();
    };
  }, []);

  // Function to determine the status of an event
  const getEventStatus = (
    startDate: string,
    startTime: string,
    endDate: string,
    endTime: string
  ): string => {
    const now = new Date();
    const startDateTime = new Date(`${startDate}T${startTime}`);
    const endDateTime = new Date(`${endDate}T${endTime}`);

    if (now >= startDateTime && now <= endDateTime) {
      return "Active"; // Event is currently active
    } else if (now < startDateTime) {
      return "Upcoming"; // Event is yet to start
    } else {
      return "Ended"; // Event has ended
    }
  };

  // Periodically update the status of events
  useEffect(() => {
    const interval = setInterval(() => {
      setElections((prevElections) => {
        // Check if any event's status has changed
        const updatedElections = prevElections.map((election) => {
          const status = getEventStatus(
            election.startDate,
            election.startTime,
            election.endDate,
            election.endTime
          );
          return { ...election, status }; // Add the status to each election object
        });

        // Only update state if there's a change in status
        if (
          JSON.stringify(updatedElections) !== JSON.stringify(prevElections)
        ) {
          return updatedElections;
        }
        return prevElections;
      });
    }, 1000); // Check every second

    return () => clearInterval(interval); // Cleanup interval on unmount
  }, []);

  // Helper function to format date as dd/mm/yyyy
  const formatDate = (dateString: string): string => {
    if (!dateString) return "Not specified";
    const date = new Date(dateString);
    const day = String(date.getDate()).padStart(2, "0");
    const month = String(date.getMonth() + 1).padStart(2, "0"); // Months are zero-indexed
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
  };

  // Function to clear all elections
  const handleClearElections = () => {
    setElections([]); // Clear the state
    localStorage.removeItem("upcomingElections"); // Clear from localStorage
    setIsClearPopupOpen(false); // Close the popup
  };

  // Function to delete a specific election
  const handleDeleteElection = () => {
    if (deleteElectionId) {
      const updatedElections = elections.filter((election) => election.id !== deleteElectionId);
      setElections(updatedElections); // Update state
      localStorage.setItem("upcomingElections", JSON.stringify(updatedElections)); // Update localStorage
      setDeleteElectionId(null); // Close the popup
    }
  };

  return (
    <div className="flex-1 transition-all duration-300 mt-[-50px] p-6">
      {/* Header */}
      <div className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white py-12 text-center mb-8">
        <h1 className="text-4xl font-bold">Upcoming Elections</h1>
        <p className="mt-2 text-lg">Stay informed about upcoming voting events.</p>
      </div>

      {/* Elections List */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {isLoading ? (
          <p className="text-gray-600 text-center col-span-full">Loading elections...</p>
        ) : elections.length > 0 ? (
          elections.map((election) => {
            const status = getEventStatus(
              election.startDate,
              election.startTime,
              election.endDate,
              election.endTime
            );
            return (
              <Card
                key={election.id}
                className="p-6 text-center hover:shadow-lg transition-shadow relative" // Added 'relative' for positioning
              >
                {/* Status Badge */}
                <div
                  className={`absolute top-2 right-2 px-2 py-1 text-xs font-semibold rounded ${
                    status === "Active"
                      ? "bg-green-500 text-white"
                      : status === "Upcoming"
                      ? "bg-blue-500 text-white"
                      : "bg-red-400 text-white"
                  }`}
                >
                  {status}
                </div>
                {/* Delete Button for Ended Elections */}
                {status === "Ended" && (
                  <button
                    onClick={() => setDeleteElectionId(election.id)}
                    className="absolute top-2 left-2 text-red-500 hover:text-red-700"
                  >
                    <X className="w-4 h-4" />
                  </button>
                )}
                <h3 className="text-xl font-semibold text-gray-900 mb-2">{election.title}</h3>
                <p className="text-gray-600 mb-4">{election.candidateBio}</p>
                <div className="flex justify-center items-center gap-2 text-gray-500 mb-2">
                  <Calendar className="w-4 h-4" />
                  <span>
                    Start:{" "}
                    {election.startDate
                      ? `${formatDate(election.startDate)} ${
                          election.startTime || "Not specified"
                        }`
                      : "Not specified"}
                  </span>
                </div>
                <div className="flex justify-center items-center gap-2 text-gray-500 mb-4">
                  <Clock className="w-4 h-4" />
                  <span>
                    End:{" "}
                    {election.endDate
                      ? `${formatDate(election.endDate)} ${
                          election.endTime || "Not specified"
                        }`
                      : "Not specified"}
                  </span>
                </div>
                {/* Conditional Button */}
                {status === "Active" ? (
                  <Button
                    onClick={() => navigate(`/vote-now/${election.id}`)}
                    variant="primary"
                    className="w-full"
                  >
                    Vote Now
                  </Button>
                ) : status === "Upcoming" ? (
                  <Button
                    variant="secondary"
                    className="w-full cursor-not-allowed"
                    disabled
                  >
                    Starts Soon
                  </Button>
                ) : (
                  <Button
                    variant="secondary"
                    className="w-full cursor-not-allowed"
                    disabled
                  >
                    Election Ended
                  </Button>
                )}
              </Card>
            );
          })
        ) : (
          <p className="text-gray-600 text-center col-span-full">No upcoming elections at the moment.</p>
        )}
      </div>

      {/* Clear Elections Button */}
      <div className="flex justify-center mt-6">
        <Button
          onClick={() => setIsClearPopupOpen(true)}
          variant="danger"
          className="w-full sm:w-auto"
        >
          <Trash2 className="w-4 h-4 mr-2" /> Clear All Elections
        </Button>
      </div>

      {/* Clear All Elections Popup */}
      {isClearPopupOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-lg text-center">
            <h2 className="text-xl font-bold mb-4">Clear All Elections</h2>
            <p>Are you sure you want to clear all elections?</p>
            <div className="flex justify-center gap-4 mt-4">
              <Button onClick={() => setIsClearPopupOpen(false)} variant="secondary">
                No
              </Button>
              <Button onClick={handleClearElections} variant="danger">
                Yes
              </Button>
            </div>
          </div>
        </div>
      )}

      {/* Delete Election Popup */}
      {deleteElectionId && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-lg text-center">
            <h2 className="text-xl font-bold mb-4">Delete Election</h2>
            <p>Are you sure you want to delete this election?</p>
            <div className="flex justify-center gap-4 mt-4">
              <Button onClick={() => setDeleteElectionId(null)} variant="secondary">
                No
              </Button>
              <Button onClick={handleDeleteElection} variant="danger">
                Yes
              </Button>
            </div>
          </div>
        </div>
      )}
    <BackToTopButton />
    </div>
  );
};

export default UpcomingElections;


================================================
File: src/components/WalletContext.tsx
================================================
import React, { createContext, useState, useContext, useEffect } from 'react';
import { toast } from 'react-toastify';
import TermsAndConditionsPopup from './TermsAndConditionsPopup'; // Import the popup component

interface WalletContextType {
  walletAddress: string | null;
  isWalletConnected: boolean;
  connectWallet: () => Promise<void>;
  disconnectWallet: () => void;
  userRole: 'user' | 'admin' | null;
}

const WalletContext = createContext<WalletContextType | undefined>(undefined);

export const WalletProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [walletAddress, setWalletAddress] = useState<string | null>(null);
  const [isWalletConnected, setIsWalletConnected] = useState(false);
  const [userRole, setUserRole] = useState<'user' | 'admin' | null>(null);
  const [showTermsModal, setShowTermsModal] = useState(false); // State for modal visibility

  // Check for cached wallet connection on initial load
  useEffect(() => {
    const savedAddress = localStorage.getItem('walletAddress');
    const savedRole = localStorage.getItem('userRole') as 'user' | 'admin' | null;
    if (savedAddress && savedRole) {
      setWalletAddress(savedAddress);
      setIsWalletConnected(true);
      setUserRole(savedRole);
    }
  }, []);

  // Periodically check if the wallet is still connected
  useEffect(() => {
    const checkWalletConnection = async () => {
      if (typeof window.ethereum !== 'undefined') {
        try {
          const accounts = await window.ethereum.request({ method: 'eth_accounts' });
          if (accounts.length === 0 && isWalletConnected) {
            // Wallet disconnected, trigger logout
            await disconnectWallet();
          }
        } catch (error) {
          console.error('Error checking wallet connection:', error);
        }
      }
    };
    const interval = setInterval(checkWalletConnection, 3000); // Check every 3 seconds
    return () => clearInterval(interval); // Cleanup interval on unmount
  }, [isWalletConnected]);

  const connectWallet = async () => {
    if (typeof window.ethereum === 'undefined') {
      toast.error('MetaMask is not installed. Please install MetaMask to connect your wallet.');
      return;
    }
    try {
      // Request account access via MetaMask popup
      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
      if (accounts.length > 0) {
        const normalizedWallet = accounts[0].toLowerCase();
        // Request signature from the user
        const message = 'Please sign this message to verify your identity.';
        const signature = await window.ethereum.request({
          method: 'personal_sign',
          params: [message, normalizedWallet],
        });
        console.log('Signature:', signature);

        // Send wallet address and signature to backend for verification
        const response = await fetch('http://localhost:5000/api/wallet-login', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ walletAddress: normalizedWallet, signature }),
        });

        const data = await response.json();
        if (response.ok) {
          setWalletAddress(normalizedWallet);
          setIsWalletConnected(true);
          setUserRole(data.role);
          localStorage.setItem('walletAddress', normalizedWallet);
          localStorage.setItem('userRole', data.role);

          // Show terms and conditions modal
          setShowTermsModal(true);
        } else {
          throw new Error(data.message || 'Failed to authenticate wallet');
        }
      } else {
        toast.error('No account found. Please try again.');
      }
    } catch (error) {
      toast.error('Could not connect to MetaMask.');
      console.error('Error connecting wallet:', error);
    }
  };

  const disconnectWallet = async () => {
    try {
      if (walletAddress) {
        const response = await fetch('http://localhost:5000/api/wallet-disconnect', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ walletAddress }),
        });
        if (response.ok) {
          setWalletAddress(null);
          setIsWalletConnected(false);
          setUserRole(null);
          localStorage.removeItem('walletAddress');
          localStorage.removeItem('userRole');

          // Forcefully disconnect the wallet in MetaMask
          if (typeof window.ethereum !== 'undefined' && window.ethereum?.request) {
            await window.ethereum.request({
              method: 'wallet_revokePermissions',
              params: [{ eth_accounts: {} }],
            });
          }

          toast.success('Wallet disconnected successfully!');
          // Redirect to home page after disconnecting
          window.location.href = '/';
        } else {
          throw new Error('Failed to disconnect wallet.');
        }
      }
    } catch (error) {
      toast.error('An error occurred while disconnecting the wallet.');
      console.error('Error disconnecting wallet:', error);
    }
  };

  const handleTermsAccept = () => {
    setShowTermsModal(false); // Close the modal
    // Redirect based on role
    if (userRole === 'admin') {
      window.location.href = '/admin-dashboard';
    } else {
      window.location.href = '/user-dashboard';
    }
  };

  const handleTermsCancel = () => {
    setShowTermsModal(false); // Close the modal
    disconnectWallet(); // Disconnect the wallet
  };

  return (
    <WalletContext.Provider
      value={{ walletAddress, isWalletConnected, connectWallet, disconnectWallet, userRole }}
    >
      {children}
      {/* Render the Terms and Conditions Popup */}
      <TermsAndConditionsPopup
        isOpen={showTermsModal}
        onAccept={handleTermsAccept}
        onCancel={handleTermsCancel}
      />
    </WalletContext.Provider>
  );
};

export const useWallet = (): WalletContextType => {
  const context = useContext(WalletContext);
  if (!context) {
    throw new Error('useWallet must be used within a WalletProvider');
  }
  return context;
};


================================================
File: src/locales/bn/translation.json
================================================
{
  "hero": {
    "welcome": "ইজিভোটে স্বাগতম",
    "description": "ব্লকচেইন প্রযুক্তির মাধ্যমে পরিচালিত একটি বিকেন্দ্রীকৃত ভোটিং প্ল্যাটফর্ম। নিরাপদ, স্বচ্ছ এবং ব্যবহার করা সহজ।",
    "connectWallet": "ওয়ালেট সংযোগ করুন",
    "newUserRegistration": "নতুন ব্যবহারকারী নিবন্ধন করুন"
  },
  "features": [
    {
      "title": "ইভেন্ট তৈরি করুন",
      "description": "সহজেই অনুকূলনযোগ্য বিকল্প এবং অংশগ্রহণকারীদের সীমা সহ ভোটিং ইভেন্ট তৈরি করুন।"
    },
    {
      "title": "নিরাপদ ভোটিং",
      "description": "ব্লকচেইন-ভিত্তিক ভোটিং স্বচ্ছতা এবং তথ্য পরিবর্তন রোধ করে।"
    },
    {
      "title": "রিয়েল-টাইম ফলাফল",
      "description": "ইন্টারেক্টিভ গ্রাফ এবং ত্বরিত আপডেট সহ লাইভ ভোটিং অগ্রগতি দেখুন।"
    }
  ],
  "howItWorksTitle": "এটি কিভাবে কাজ করে",
  "howItWorks": [
    {
      "step": "1",
      "title": "নিবন্ধন করুন",
      "description": "নিবন্ধন করুন এবং আপনার অ্যাকাউন্ট তৈরি করুন।"
    },
    {
      "step": "2",
      "title": "ইভেন্ট তৈরি করুন",
      "description": "আপনার অনুষ্ঠানের জন্য ভোটিং ইভেন্ট সেট করুন।"
    },
    {
      "step": "3",
      "title": "নিরাপদে ভোটিং",
      "description": "লিংক শেয়ার করুন এবং অংশগ্রহণকারীদের নিরাপদে ভোটিং করতে দিন।"
    },
    {
      "step": "4",
      "title": "ফলাফল দেখুন",
      "description": "লাইভ ট্যালি ফলাফল এবং বিবরণ দেখুন।"
    }
  ],
  "testimonialsTitle": "আমাদের ব্যবহারকারীরা কী বলে",
  "testimonials": [
    {
      "name": "রিয়া শুক্লা",
      "feedback": "ইজিভোট আমাদের টিম নির্বাচনকে এত সুবিন্যস্ত এবং নিরাপদ করেছে!",
      "image": "https://shorturl.at/dlZsR"
    },
    {
      "name": "ময়ঙ্ক সোলাংকি",
      "feedback": "রিয়েল-টাইম ফলাফল আমাদের জন্য একটি গেম-চেঞ্জার ছিল!",
      "image": "https://shorturl.at/wOuoU"
    },
    {
      "name": "ভূমিকা শেট্টি",
      "feedback": "আমি এটি পছন্দ করেছি যে কীভাবে আমি একটি ইভেন্ট সেট করেছি এবং ভোটিং শুরু করেছি।",
      "image": "https://shorturl.at/q0h9W"
    },
    {
      "name": "সূর্য যাদব",
      "feedback": "প্ল্যাটফর্মটি সহজে ব্যবহার করা যায় এবং অসাধারণভাবে নিরাপদ।",
      "image": "https://shorturl.at/E9dPa"
    },
    {
      "name": "সত্যম সি.",
      "feedback": "দ্রুত এবং ন্যায্য নির্বাচনের জন্য ভাল!",
      "image": "https://shorturl.at/f2HmS"
    },
    {
      "name": "অঙ্কিত পাল",
      "feedback": "ব্লকচেইন প্রযুক্তিটি এই প্ল্যাটফর্মকে অনন্য করে তোলে!",
      "image": "https://shorturl.at/lv3PI"
    }
  ],
  "funFactsTitle": "ইজিভোট সম্পর্কে মজার তথ্য",
  "funFacts": [
    "ব্লকচেইন প্রযুক্তি ডেটা অমিটতা এবং তথ্য পরিবর্তন প্রতিরোধ করে।",
    "আপনি কি জানেন? ব্লকচেইনের প্রথম পরিচিত সৃষ্টি সতোশি নাকামোটো দ্বারা তৈরি করা হয়েছিল।",
    "ব্লকচেইনে ভোটিং করা সম্ভাব্য জালিয়াতি 90% কমিয়ে দেয়।",
    "ইজিভোট গড়ে 10 সেকেন্ডের মধ্যে ভোটিং প্রক্রিয়া সম্পন্ন করে!"
  ],
  "statistics": [
    { "value": "500+", "label": "ইভেন্ট তৈরি করা হয়েছে" },
    { "value": "10,000+", "label": "ভোট দেওয়া হয়েছে" },
    { "value": "99.9%", "label": "আপটাইম গ্যারান্টি" }
  ],
  "faq": {
    "heading": "প্রায়শই জিজ্ঞাসা করা প্রশ্ন",
    "items": [
      {
        "question": "ইজিভোট কী?",
        "answer": "ইজিভোট হল একটি ব্লকচেইন-ভিত্তিক ভোটিং প্ল্যাটফর্ম যা নিরাপত্তা এবং স্বচ্ছতার জন্য ডিজাইন করা হয়েছে।"
      },
      {
        "question": "ইজিভোট নিরাপত্তা কীভাবে নিশ্চিত করে?",
        "answer": "ব্লকচেইন প্রযুক্তি ব্যবহার করে, ইজিভোট ভোটিং অমিটতা এবং তথ্য পরিবর্তন প্রতিরোধ করে।"
      },
      {
        "question": "আমি ইজিভোট ব্যবহার করে বড় আকারের নির্বাচন করতে পারি কিনা?",
        "answer": "বর্তমানে, ইজিভোট ছোট নির্বাচনের জন্য উপযুক্ত, তবে প্রয়োজন অনুসারে বৃদ্ধি করা যেতে পারে।"
      },
      {
        "question": "অংশগ্রহণকারীদের ক্রিপ্টো ওয়ালেটের প্রয়োজন হবে কিনা?",
        "answer": "হ্যাঁ, অংশগ্রহণকারীদের প্রমাণীকরণ এবং নিরাপত্তার জন্য তাদের ক্রিপ্টো ওয়ালেট সংযোগ করতে হবে।"
      }
    ]
  }
}



================================================
File: src/locales/en/translation.json
================================================
{
  "hero": {
    "welcome": "Welcome to EzyVote",
    "description": "A decentralized voting platform powered by blockchain technology. Secure, transparent, and easy to use.",
    "connectWallet": "Connect Wallet",
    "disconnectWallet": "Disconnect"
  },
  "features": [
    {
      "title": "Create Events",
      "description": "Easily create voting events with customizable options and participant limits."
    },
    {
      "title": "Secure Voting",
      "description": "Blockchain-based voting ensures transparency and prevents tampering."
    },
    {
      "title": "Real-Time Results",
      "description": "View live voting progress with interactive graphs and instant updates."
    }
  ],
  "howItWorksTitle": "How It Works",
  "howItWorks": [
    {
      "step": "1",
      "title": "Register",
      "description": "Sign up for free and create your account."
    },
    {
      "step": "2",
      "title": "Create an Event",
      "description": "Setup a voting event for your occasion."
    },
    {
      "step": "3",
      "title": "Vote Securely",
      "description": "Share the link and let participants vote securely."
    },
    {
      "step": "4",
      "title": "View Results",
      "description": "Track live tally results and details."
    }
  ],
  "testimonialsTitle": "What Our Users Say",
  "testimonials": [
    {
      "name": "Riya Shukla",
      "feedback": "EzyVote made our team elections so smooth and secure!",
      "image": "https://shorturl.at/dlZsR"
    },
    {
      "name": "Mayank Solanki",
      "feedback": "The real-time results were a game-changer for us!",
      "image": "https://shorturl.at/wOuoU"
    },
    {
      "name": "Bhoomika Shetty",
      "feedback": "I loved how easy it was to set up an event and start voting.",
      "image": "https://shorturl.at/q0h9W"
    },
    {
      "name": "Suraj Yadav",
      "feedback": "The platform is intuitive and incredibly secure.",
      "image": "https://shorturl.at/E9dPa"
    },
    {
      "name": "Satyam C.",
      "feedback": "Great for organizing quick and fair elections!",
      "image": "https://shorturl.at/f2HmS"
    },
    {
      "name": "Ankit Pal",
      "feedback": "Blockchain technology makes this platform unbeatable!",
      "image": "https://shorturl.at/lv3PI"
    }
  ],
  "funFactsTitle": "Fun Facts About EzyVote",
  "funFacts": [
    "Blockchain technology ensures data immutability and tamper-resistance.",
    "Did you know? The first known blockchain was created by Satoshi Nakamoto.",
    "Voting on the blockchain reduces potential fraud by up to 90%.",
    "EzyVote processes votes in an average of 10 seconds!"
  ],
  "statistics": [
    { "value": "500+", "label": "Events Created" },
    { "value": "10,000+", "label": "Votes Cast" },
    { "value": "99.9%", "label": "Uptime Guarantee" }
  ],
  "faq": {
    "heading": "Frequently Asked Questions",
    "items": [
      {
        "question": "What is EzyVote?",
        "answer": "EzyVote is a blockchain-based voting platform designed for security and transparency."
      },
      {
        "question": "How does EzyVote ensure security?",
        "answer": "Using blockchain technology, EzyVote guarantees votes are immutable and tamper-proof."
      },
      {
        "question": "Can I use EzyVote for large scale elections?",
        "answer": "Currently, EzyVote is well-suited for smaller elections but can scale as needed."
      },
      {
        "question": "Do participants need a crypto wallet?",
        "answer": "Yes, participants need to connect their crypto wallets for authentication and security."
      }
    ]
  },
  "about": {
    "header": {
      "title": "About EzyVote",
      "description": "Revolutionizing small-scale voting with blockchain technology"
    },
    "mission": {
      "title": "Our Mission",
      "description": "At EzyVote, our mission is to empower communities with a secure, transparent, and efficient platform for conducting small-scale elections. We leverage the power of blockchain technology to ensure every vote counts and every voice is heard."
    },
    "values": {
      "title": "Our Core Values",
      "transparency": "Transparency: Ensuring every step of the process is visible and verifiable.",
      "security": "Security: Protecting user data and election integrity with state-of-the-art blockchain technology.",
      "inclusivity": "Inclusivity: Making the platform accessible and easy to use for everyone.",
      "innovation": "Innovation: Constantly improving and adapting to meet the needs of our users."
    },
    "team": {
      "title": "Meet the Team",
      "members": [
        {
          "name": "Rakesh Mal",
          "role": "Founder & Developer",
          "image": "https://shorturl.at/9GNoP",
          "social": {
            "instagram": "https://instagram.com/_rakeshmal",
            "linkedin": "https://linkedin.com/in/rakeshmal",
            "twitter": "https://x.com/_rakeshmal"
          }
        },
        {
          "name": "Mayuresh Tardekar",
          "role": "Co-founder & Developer",
          "image": "https://shorturl.at/Geb6Z",
          "social": {
            "instagram": "https://www.instagram.com/mayu_tardekar/",
            "linkedin": "https://www.linkedin.com/in/mayuresh-tardekar-a1736425a/",
            "twitter": "https://x.com/MTardekar"
          }
        }
      ]
    }
  },
  "contact": {
    "header": {
      "title": "Contact Us",
      "description": "Have questions? We'd love to hear from you. Send us a message and we'll respond as soon as possible."
    },
    "contactInfo": [
      {
        "icon": "Mail",
        "title": "Email",
        "content": "malrakesh172@gmail.com"
      },
      {
        "icon": "Phone",
        "title": "Phone",
        "content": "+91 7738431349"
      },
      {
        "icon": "MapPin",
        "title": "Location",
        "content": "Anand Nagar\nDahisar (East), Mumbai - 400068"
      }
    ],
    "mapSection": {
      "title": "Find Us Here"
    },
    "qrCodeSection": {
      "title": "Scan to Save Contact",
      "description": "Scan this QR code to save our contact details directly to your phone."
    },
    "formSection": {
      "title": "Send Us a Message",
      "labels": {
        "name": "Name",
        "email": "Email",
        "message": "Message"
      },
      "button": "Send Message"
    }
  }
}



================================================
File: src/locales/gu/translation.json
================================================
{
  "hero": {
    "welcome": "EzyVote માં આપનું સ્વાગત છે",
    "description": "બ્લોકચેઇન ટેકનોલોજી દ્વારા સંચાલિત એક વિખંડિત મતદાન પ્લેટફોર્મ. સુરક્ષિત, પારદર્શી, અને ઉપયોગ કરવા માટે સરળ.",
    "connectWallet": "વૉલેટ કનેક્ટ કરો",
    "newUserRegistration": "નવો યુઝર તરીકે નોંધણી કરો"
  },
  "features": [
    {
      "title": "ઇવેન્ટ બનાવો",
      "description": "આસાનીથી વૈકલ્પિક વિકલ્પો અને ભાગીદારોની મર્યાદાઓ સાથે મતદાન ઇવેન્ટ બનાવો."
    },
    {
      "title": "સુરક્ષિત મતદાન",
      "description": "બ્લોકચેઇન આધારિત મતદાન પારદર્શિતા સુનિશ્ચિત કરે છે અને છેડછાડ અટકાવે છે."
    },
    {
      "title": "વાસ્તવિક-સમયના પરિણામો",
      "description": "ઇન્ટરેક્ટિવ ગ્રાફ્સ અને તાત્કાલિક અપડેટ્સ સાથે જીવંત મતદાન પ્રગતિ જુઓ."
    }
  ],
  "howItWorksTitle": "કેવી રીતે કામ કરે છે",
  "howItWorks": [
    {
      "step": "1",
      "title": "પાત્રતા",
      "description": "મફતમાં સાઇન અપ કરો અને તમારું અકાઉન્ટ બનાવો."
    },
    {
      "step": "2",
      "title": "ઇવેન્ટ બનાવો",
      "description": "તમારા પ્રસંગ માટે મતદાન ઇવેન્ટ સુયોજિત કરો."
    },
    {
      "step": "3",
      "title": "સુરક્ષિત રીતે મતદાન કરો",
      "description": "લિંક શેર કરો અને ભાગીદારોને સુરક્ષિત રીતે મતદાન કરવા દો."
    },
    {
      "step": "4",
      "title": "પરિણામો જુઓ",
      "description": "જીવંત ગણતરીના પરિણામો અને વિગતો ટ્રેક કરો."
    }
  ],
  "testimonialsTitle": "આપણી વપરાશકર્તાઓ શું કહે છે",
  "testimonials": [
    {
      "name": "રિયા શુક્લા",
      "feedback": "EzyVoteએ અમારી ટીમની ચૂંટણી ખૂબ સરળ અને સુરક્ષિત બનાવી દીધી!",
      "image": "https://shorturl.at/dlZsR"
    },
    {
      "name": "મયંક સોલંકી",
      "feedback": "વાસ્તવિક-સમયના પરિણામો અમારો રમત બદલાવા માટે હતા!",
      "image": "https://shorturl.at/wOuoU"
    },
    {
      "name": "ભૂમિકા શેટી",
      "feedback": "મને એ પસંદ આવ્યું કે ઇવેન્ટ સેટઅપ કરવું અને મતદાન શરૂ કરવું કેટલું સરળ હતું.",
      "image": "https://shorturl.at/q0h9W"
    },
    {
      "name": "સુરજ યાદવ",
      "feedback": "પ્લેટફોર્મ એ અંગત અને અસાધારણ રીતે સુરક્ષિત છે.",
      "image": "https://shorturl.at/E9dPa"
    },
    {
      "name": "સત્યમ સી.",
      "feedback": "ઝટપટ અને ન્યાયી ચૂંટણીઓનું આયોજન કરવા માટે મહાન!",
      "image": "https://shorturl.at/f2HmS"
    },
    {
      "name": "અંકિત પાલ",
      "feedback": "બ્લોકચેઇન ટેકનોલોજી આ પ્લેટફોર્મને અપ્રતિમ બનાવે છે!",
      "image": "https://shorturl.at/lv3PI"
    }
  ],
  "funFactsTitle": "EzyVote વિશે રસપ્રદ તથ્યો",
  "funFacts": [
    "બ્લોકચેઇન ટેકનોલોજી ડેટા માટે અચૂકતા અને દેખાવ પ્રતિકાર સુનિશ્ચિત કરે છે.",
    "શું તમે જાણો છો? પ્રથમ ઓળખાયેલા બ્લોકચેઇનને સાતોશી નાકામોટોએ બનાવ્યું હતું.",
    "બ્લોકચેઇનમાં મતદાન કરવું 90% સુધી ઠગાઈ ઘટાડી શકે છે.",
    "EzyVote સરેરાશ 10 સેકંડમાં મતદાન પ્રક્રિયા કરે છે!"
  ],
  "statistics": [
    { "value": "500+", "label": "ઈવેન્ટ્સ બનાવવામાં આવ્યા" },
    { "value": "10,000+", "label": "મતદાન કરવામાં આવ્યા" },
    { "value": "99.9%", "label": "ઉપલબ્ધતા ખાતરી" }
  ],
  "faq": {
    "heading": "વારંવાર પૂછાતા પ્રશ્નો",
    "items": [
      {
        "question": "EzyVote શું છે?",
        "answer": "EzyVote એ એક બ્લોકચેઇન આધારિત મતદાન પ્લેટફોર્મ છે જે સુરક્ષા અને પારદર્શિતા માટે ડિઝાઇન કરવામાં આવ્યું છે."
      },
      {
        "question": "EzyVote સુરક્ષા કેવી રીતે સુનિશ્ચિત કરે છે?",
        "answer": "બ્લોકચેઇન ટેકનોલોજીનો ઉપયોગ કરીને, EzyVote સુરક્ષિત કરે છે કે મતદાન અચૂક છે અને તે ટૅમ્પર-પ્રૂફ છે."
      },
      {
        "question": "શું હું EzyVoteનો ઉપયોગ મોટા પાયે ચૂંટણી માટે કરી શકું છું?",
        "answer": "વર્તમાનમાં, EzyVote નાના પાયે ચૂંટણી માટે યોગ્ય છે પરંતુ આવશ્યકતા મુજબ તે સ્કેલ કરી શકાય છે."
      },
      {
        "question": "શું ભાગીદારોને ક્રિપ્ટો વૉલેટની જરૂર છે?",
        "answer": "હા, ભાગીદારોને ઓળખાણ અને સુરક્ષાના માટે તેમના ક્રિપ્ટો વૉલેટને કનેક્ટ કરવા માટે જરૂર છે."
      }
    ]
  }
}



================================================
File: src/locales/hi/translation.json
================================================
{
  "hero": {
    "welcome": "EzyVote में आपका स्वागत है",
    "description": "ब्लॉकचेन तकनीक द्वारा संचालित एक विकेन्द्रीकृत मतदान प्लेटफॉर्म। सुरक्षित, पारदर्शी और उपयोग में आसान।",
    "connectWallet": "वॉलेट कनेक्ट करें",
    "copyAddress": "पता कॉपी करें",
    "disconnectWallet": "डिस्कनेक्ट करें",
    "newUserRegistration": "नए उपयोगकर्ता के रूप में पंजीकरण करें"
  },
  "features": [
    {
      "title": "इवेंट्स बनाएं",
      "description": "आसान और अनुकूलित विकल्पों के साथ मतदान इवेंट बनाएं।"
    },
    {
      "title": "सुरक्षित मतदान",
      "description": "ब्लॉकचेन-आधारित मतदान पारदर्शिता सुनिश्चित करता है और छेड़छाड़ को रोकता है।"
    },
    {
      "title": "रियल-टाइम परिणाम",
      "description": "इंटरैक्टिव ग्राफ़ और त्वरित अपडेट के साथ लाइव मतदान प्रगति देखें।"
    }
  ],
  "howItWorksTitle": "यह कैसे काम करता है",
  "howItWorks": [
    {
      "step": "1",
      "title": "पंजीकरण करें",
      "description": "मुफ़्त साइन अप करें और अपना खाता बनाएं।"
    },
    {
      "step": "2",
      "title": "इवेंट बनाएं",
      "description": "अपने अवसर के लिए मतदान इवेंट सेट करें।"
    },
    {
      "step": "3",
      "title": "सुरक्षित रूप से वोट करें",
      "description": "लिंक साझा करें और प्रतिभागियों को सुरक्षित रूप से मतदान करने दें।"
    },
    {
      "step": "4",
      "title": "परिणाम देखें",
      "description": "लाइव गिनती के परिणाम और विवरण ट्रैक करें।"
    }
  ],
  "testimonialsTitle": "हमारे उपयोगकर्ता क्या कहते हैं",
  "testimonials": [
    {
      "name": "रिया शुक्ला",
      "feedback": "EzyVote ने हमारी टीम के चुनावों को बहुत आसान और सुरक्षित बना दिया!",
      "image": "https://shorturl.at/dlZsR"
    },
    {
      "name": "मयंक सोलंकी",
      "feedback": "रियल-टाइम परिणाम हमारे लिए गेम-चेंजर थे!",
      "image": "https://shorturl.at/wOuoU"
    },
    {
      "name": "भूमिका शेट्टी",
      "feedback": "इवेंट सेट करना और मतदान शुरू करना बेहद आसान था।",
      "image": "https://shorturl.at/q0h9W"
    },
    {
      "name": "सुरज यादव",
      "feedback": "प्लेटफ़ॉर्म सहज और अत्यधिक सुरक्षित है।",
      "image": "https://shorturl.at/E9dPa"
    },
    {
      "name": "सत्यम् सी.",
      "feedback": "त्वरित और निष्पक्ष चुनाव आयोजित करने के लिए बेहतरीन!",
      "image": "https://shorturl.at/f2HmS"
    },
    {
      "name": "अंकित पाल",
      "feedback": "ब्लॉकचेन तकनीक इस प्लेटफ़ॉर्म को अद्वितीय बनाती है!",
      "image": "https://shorturl.at/lv3PI"
    }
  ],
  "funFactsTitle": "EzyVote के बारे में रोचक तथ्य",
  "funFacts": [
    "ब्लॉकचेन तकनीक डेटा को अपरिवर्तनीय और छेड़छाड़-रोधी बनाती है।",
    "क्या आप जानते हैं? पहला ज्ञात ब्लॉकचेन सातोशी नाकामोटो ने बनाया था।",
    "ब्लॉकचेन पर मतदान संभावित धोखाधड़ी को 90% तक कम कर देता है।",
    "EzyVote औसतन 10 सेकंड में वोट प्रोसेस करता है!"
  ],
  "statistics": [
    { "value": "500+", "label": "बने हुए इवेंट्स" },
    { "value": "10,000+", "label": "डाले गए वोट्स" },
    { "value": "99.9%", "label": "अपटाइम गारंटी" }
  ],
  "faq": {
    "heading": "अक्सर पूछे जाने वाले प्रश्न",
    "items": [
      {
        "question": "EzyVote क्या है?",
        "answer": "EzyVote एक ब्लॉकचेन-आधारित मतदान प्लेटफ़ॉर्म है जो सुरक्षा और पारदर्शिता प्रदान करता है।"
      },
      {
        "question": "EzyVote सुरक्षा कैसे सुनिश्चित करता है?",
        "answer": "ब्लॉकचेन तकनीक का उपयोग करके, EzyVote यह गारंटी देता है कि वोट अपरिवर्तनीय और छेड़छाड़-रहित हैं।"
      },
      {
        "question": "क्या मैं EzyVote का उपयोग बड़े पैमाने के चुनावों के लिए कर सकता हूँ?",
        "answer": "फिलहाल, EzyVote छोटे चुनावों के लिए उपयुक्त है, लेकिन आवश्यकतानुसार इसे बढ़ाया जा सकता है।"
      },
      {
        "question": "क्या प्रतिभागियों को क्रिप्टो वॉलेट की आवश्यकता है?",
        "answer": "हाँ, प्रतिभागियों को प्रमाणीकरण और सुरक्षा के लिए अपने क्रिप्टो वॉलेट से कनेक्ट करना होगा।"
      }
    ]
  },
  "about": {
    "header": {
      "title": "EzyVote के बारे में",
      "description": "ब्लॉकचेन तकनीक के साथ छोटे पैमाने के मतदान में क्रांति लाना"
    },
    "mission": {
      "title": "हमारा उद्देश्य",
      "description": "EzyVote का उद्देश्य समुदायों को एक सुरक्षित, पारदर्शी और प्रभावी प्लेटफॉर्म प्रदान करना है ताकि वे छोटे पैमाने के चुनाव आसानी से संचालित कर सकें। हम यह सुनिश्चित करने के लिए ब्लॉकचेन तकनीक का उपयोग करते हैं कि हर वोट मायने रखता है और हर आवाज़ सुनी जाती है।"
    },
    "values": {
      "title": "हमारे मुख्य मूल्य",
      "transparency": "पारदर्शिता: यह सुनिश्चित करना कि प्रक्रिया का हर चरण दृश्यमान और सत्यापित करने योग्य हो।",
      "security": "सुरक्षा: अत्याधुनिक ब्लॉकचेन तकनीक से उपयोगकर्ता डेटा और चुनाव की अखंडता की रक्षा करना।",
      "inclusivity": "समावेशिता: सभी के लिए प्लेटफॉर्म को सुलभ और उपयोग में आसान बनाना।",
      "innovation": "नवाचार: उपयोगकर्ताओं की आवश्यकताओं को पूरा करने के लिए लगातार सुधार और अनुकूलन।"
    },
    "team": {
      "title": "हमारी टीम से मिलें",
      "members": [
        {
          "name": "राकेश माल",
          "role": "संस्थापक और डेवलपर",
          "image": "https://shorturl.at/9GNoP",
          "social": {
            "instagram": "https://instagram.com/_rakeshmal",
            "linkedin": "https://linkedin.com/in/rakeshmal",
            "twitter": "https://x.com/_rakeshmal"
          }
        },
        {
          "name": "मयुरेश तर्देकर",
          "role": "सह-संस्थापक और डेवलपर",
          "image": "https://shorturl.at/Geb6Z",
          "social": {
            "instagram": "https://www.instagram.com/mayu_tardekar/",
            "linkedin": "https://www.linkedin.com/in/mayuresh-tardekar-a1736425a/",
            "twitter": "https://x.com/MTardekar"
          }
        }
      ]
    }
  }
}



================================================
File: src/locales/mr/translation.json
================================================
{
  "hero": {
    "welcome": "ईजीवोट मध्ये तुमचे स्वागत आहे",
    "description": "ब्लॉकचेन तंत्रज्ञानाद्वारे चालविलेले एक विकेंद्रित मतदान मंच. सुरक्षित, पारदर्शक आणि वापरण्यास सोपे.",
    "connectWallet": "वॉलेट कनेक्ट करा",
    "newUserRegistration": "नवीन वापरकर्ता नोंदणी करा"
  },
  "features": [
    {
      "title": "कार्यक्रम तयार करा",
      "description": "सोप्या पद्धतीने अनुकूलन करण्यायोग्य पर्याय आणि सहभागी मर्यादांसह मतदान कार्यक्रम तयार करा."
    },
    {
      "title": "सुरक्षित मतदान",
      "description": "ब्लॉकचेन-आधारित मतदान पारदर्शकता आणि छेडछाड प्रतिबंधित करते."
    },
    {
      "title": "रिअल-टाइम परिणाम",
      "description": "माहिती-स्पीड ग्राफ आणि तत्काळ अपडेटसह लाइव्ह मतदान प्रगती पाहा."
    }
  ],
  "howItWorksTitle": "हे कसे कार्य करते",
  "howItWorks": [
    {
      "step": "1",
      "title": "नोंदणी करा",
      "description": "विनामूल्य नोंदणी करा आणि तुमचे खाते तयार करा."
    },
    {
      "step": "2",
      "title": "कार्यक्रम तयार करा",
      "description": "तुमच्या प्रसंगासाठी मतदान कार्यक्रम सेट करा."
    },
    {
      "step": "3",
      "title": "सुरक्षित मतदान",
      "description": "लिंक शेअर करा आणि सहभागींना सुरक्षितपणे मतदान करू द्या."
    },
    {
      "step": "4",
      "title": "परिणाम पाहा",
      "description": "लाइव्ह टॅली परिणाम आणि तपशील पाहा."
    }
  ],
  "testimonialsTitle": "आमचे वापरकर्ते काय म्हणतात",
  "testimonials": [
    {
      "name": "ऋया शुक्ला",
      "feedback": "ईजीवोटने आमच्या संघ स्पर्धांना इतके सुसंबद्ध आणि सुरक्षित बनवले!",
      "image": "https://shorturl.at/dlZsR"
    },
    {
      "name": "मयंक सोलंकी",
      "feedback": "रिअल-टाइम परिणाम आमच्यासाठी एक गेम-चेंजर होते!",
      "image": "https://shorturl.at/wOuoU"
    },
    {
      "name": "भूमिका शेट्टी",
      "feedback": "मला असे वाटले की मी अशा सोप्या पद्धतीने कार्यक्रम सेट केला आणि मतदान सुरू केले.",
      "image": "https://shorturl.at/q0h9W"
    },
    {
      "name": "सूरज यादव",
      "feedback": "प्लॅटफॉर्म सुलभ आणि अविश्वसनीयपणे सुरक्षित आहे.",
      "image": "https://shorturl.at/E9dPa"
    },
    {
      "name": "सत्यम सी.",
      "feedback": "त्वरित आणि न्याय्य निवडणुकांसाठी चांगला!",
      "image": "https://shorturl.at/f2HmS"
    },
    {
      "name": "अंकित पाल",
      "feedback": "ब्लॉकचेन तंत्रज्ञान या प्लॅटफॉर्मला अद्वितीय बनवते!",
      "image": "https://shorturl.at/lv3PI"
    }
  ],
  "funFactsTitle": "ईजीवोट बद्दल मजेदार तथ्य",
  "funFacts": [
    "ब्लॉकचेन तंत्रज्ञान डेटा अमिटता आणि छेडछाड प्रतिकार करण्यास सक्षम करते.",
    "काय तुम्हाला माहित आहे? ब्लॉकचेनची पहिली माहिती सतोशी नाकामोटो द्वारे तयार केली गेली आहे.",
    "ब्लॉकचेनवरील मतदान संभाव्य फसवणुकीचे प्रमाण 90% कमी करते.",
    "ईजीवोट सरासरी 10 सेकंदात मतदान प्रक्रिया पूर्ण करते!"
  ],
  "statistics": [
    { "value": "500+", "label": "कार्यक्रम तयार केले" },
    { "value": "10,000+", "label": "मतदान केले" },
    { "value": "99.9%", "label": "अपटाइम गॅरंटी" }
  ],
  "faq": {
    "heading": "प्रायः विचारले जाणारे प्रश्न",
    "items": [
      {
        "question": "ईजीवोट काय आहे?",
        "answer": "ईजीवोट हे एक ब्लॉकचेन-आधारित मतदान प्लॅटफॉर्म आहे जो सुरक्षितता आणि पारदर्शकतेसाठी डिझाइन केलेला आहे."
      },
      {
        "question": "ईजीवोट सुरक्षितता कशी सुनिश्चित करतो?",
        "answer": "ब्लॉकचेन तंत्रज्ञानाचा वापर करून, ईजीवोट मतदानाची अमिटता आणि छेडछाड प्रतिकार सुनिश्चित करतो."
      },
      {
        "question": "मी ईजीवोटचा वापर मोठ्या प्रमाणावर निवडणुकांसाठी करू शकतो का?",
        "answer": "सध्या, ईजीवोट लहान निवडणुकांसाठी योग्य आहे परंतु आवश्यकतेनुसार वाढविले जाऊ शकते."
      },
      {
        "question": "सहभागींना क्रिप्टो वॉलेटची आवश्यकता असेल का?",
        "answer": "होय, सहभागींना प्रामाणिकता आणि सुरक्षिततेसाठी त्यांचे क्रिप्टो वॉलेट कनेक्ट करण्याची आवश्यकता असेल."
      }
    ]
  }
}



================================================
File: src/locales/ta/translation.json
================================================
{
  "hero": {
    "welcome": "EzyVote-க்கு வரவேற்கின்றோம்",
    "description": "பிளாக்செயின் தொழில்நுட்பம் மூலம் இயக்கப்படும் ஒரு மறுவினை வாக்குரிமைத் தளம். பாதுகாப்பானது, வெளிப்படையானது மற்றும் பயன்படுத்த எளிதானது.",
    "connectWallet": "பணப் பைவு இணைக்கவும்",
    "newUserRegistration": "புதிய பயனராக பதிவு செய்யவும்"
  },
  "features": [
    {
      "title": "நிகழ்வுகளை உருவாக்கவும்",
      "description": "எளிதாக வாக்குரிமை நிகழ்வுகளை உருவாக்கி தனிப்பயனாக்க முடியும் விருப்பங்களையும் பங்கேற்பாளர் வரம்புகளையும் கொண்டது."
    },
    {
      "title": "பாதுகாப்பான வாக்குப்பதிவு",
      "description": "பிளாக்செயின் அடிப்படையிலான வாக்குப்பதிவு வெளிப்படையானது மற்றும் தகராறு தடுப்பதாக இருக்கின்றது."
    },
    {
      "title": "உயிரின் நேர முடிவுகள்",
      "description": "செயல்பாட்டுத் தரவரிசைகளுடன் உடனடி புதுப்பிப்புகளுடன் நேரடி வாக்குப்பதிவு முன்னேற்றத்தை பார்வையிடுங்கள்."
    }
  ],
  "howItWorksTitle": "இது எப்படி செயல்படுகிறது",
  "howItWorks": [
    {
      "step": "1",
      "title": "பதிவு செய்யவும்",
      "description": "புதிய பயனராக இலவசமாக சைன் அப் செய்து உங்கள் கணக்கை உருவாக்கவும்."
    },
    {
      "step": "2",
      "title": "ஒரு நிகழ்வு உருவாக்கவும்",
      "description": "உங்கள் நிகழ்வுக்கான வாக்குக்கான நிகழ்வை அமைக்கவும்."
    },
    {
      "step": "3",
      "title": "பாதுகாப்பான முறையில் வாக்களிக்கவும்",
      "description": "இணைப்பைப் பகிர்ந்து பங்கேற்பாளர்களுக்கு பாதுகாப்பான முறையில் வாக்களிக்க அனுமதிக்கவும்."
    },
    {
      "step": "4",
      "title": "முடிவுகளைப் பார்க்கவும்",
      "description": "உயிரின் நேர வாக்கு எண்ணிக்கை முடிவுகளை மற்றும் விவரங்களை கண்காணிக்கவும்."
    }
  ],
  "testimonialsTitle": "எங்கள் பயனர்கள் என்ன சொல்லுகிறார்கள்",
  "testimonials": [
    {
      "name": "ரியா ஷுக்லா",
      "feedback": "EzyVote எங்கள் குழு தேர்தல்களை மிகவும் எளிதான மற்றும் பாதுகாப்பானவையாக மாற்றியது!",
      "image": "https://shorturl.at/dlZsR"
    },
    {
      "name": "மயங்க் சோலன்கி",
      "feedback": "உயிரின் நேர முடிவுகள் எங்களுக்கு ஒரு விளையாட்டு மாற்றியமைப்பாக இருந்தது!",
      "image": "https://shorturl.at/wOuoU"
    },
    {
      "name": "பூமிகா ஷெட்டி",
      "feedback": "நிகழ்வு அமைக்க மற்றும் வாக்களிக்க ஆரம்பிப்பது எவ்வளவு எளிதாக இருந்தது என்பதை நான் விரும்பினேன்.",
      "image": "https://shorturl.at/q0h9W"
    },
    {
      "name": "சுரஜ் யாதவ்",
      "feedback": "இந்த தளம் மிகவும் எளிமையானது மற்றும் அற்புதமான பாதுகாப்புடன் உள்ளது.",
      "image": "https://shorturl.at/E9dPa"
    },
    {
      "name": "சத்யம் சி.",
      "feedback": "விரைவாகவும் நீதி மிக்க வாக்குச்செய்திகளைக் கையாள இந்தத் தளம் சிறந்தது!",
      "image": "https://shorturl.at/f2HmS"
    },
    {
      "name": "அங்கித் பால்",
      "feedback": "பிளாக்செயின் தொழில்நுட்பம் இந்த தளத்தை மிக அரிதானதாக மாற்றுகிறது!",
      "image": "https://shorturl.at/lv3PI"
    }
  ],
  "funFactsTitle": "EzyVote பற்றி சுவாரஸ்ய உண்மைகள்",
  "funFacts": [
    "பிளாக்செயின் தொழில்நுட்பம் தரவு மாறாததையும் தடையற்றதையும் உறுதி செய்கிறது.",
    "நீங்கள் அறிவீர்களா? முதன்முதலில் அறியப்பட்ட பிளாக்செயின் சதோஷி நாகமோட்டோவால் உருவாக்கப்பட்டது.",
    "பிளாக்செயினில் வாக்குச்செய்தி நடத்துவது போலி நடவடிக்கைகளை 90% குறைக்கும்.",
    "EzyVote சராசரியாக 10 விநாடிகளுக்குள் வாக்குகளை செயலாக்குகிறது!"
  ],
  "statistics": [
    { "value": "500+", "label": "உருவாக்கப்பட்ட நிகழ்வுகள்" },
    { "value": "10,000+", "label": "வாக்குகள் பதிவிடப்பட்டவை" },
    { "value": "99.9%", "label": "உயர்தர செயல்பாடுகள்" }
  ],
  "faq": {
    "heading": "பரிசோதிக்கப்பட்ட கேள்விகள்",
    "items": [
      {
        "question": "EzyVote என்ன?",
        "answer": "EzyVote என்பது பாதுகாப்பு மற்றும் வெளிப்படைத்தன்மைக்காக வடிவமைக்கப்பட்ட பிளாக்செயின் அடிப்படையிலான வாக்கு தளம்."
      },
      {
        "question": "EzyVote பாதுகாப்பை எப்படி உறுதி செய்கிறது?",
        "answer": "பிளாக்செயின் தொழில்நுட்பத்தை பயன்படுத்தி EzyVote வாக்குகளை மாறாததாக மற்றும் தடையற்றதாக உறுதி செய்கிறது."
      },
      {
        "question": "நான் EzyVote-ஐ பெரிய அளவிலான தேர்தல்களுக்குப் பயன்படுத்த முடிகிறதா?",
        "answer": "நடப்பு நிலையில் EzyVote சிறிய Elections களுக்கே ஏற்றதாக உள்ளது, ஆனால் தேவையானால் இது அளவை விரிவாக்க முடியும்."
      },
      {
        "question": "பங்கேற்பாளர்கள் கிரிப்டோ வாலட்டை பயன்படுத்த வேண்டும் என்று போதுமா?",
        "answer": "ஆம், பங்கேற்பாளர்கள் தங்கள் கிரிப்டோ வாலட்டை உணர்ச்சி மற்றும் பாதுகாப்பு கோரிகைகளுக்கானது இணைக்க வேண்டும்."
      }
    ]
  }
}



================================================
File: src/pages/About.tsx
================================================
import React, { useState } from 'react';
import { Vote, Linkedin, Twitter, Target, ShieldCheck } from 'lucide-react'; // Added icons
import { FaInstagram } from 'react-icons/fa';
import Card from '../components/Card';
import BackToTopButton from '../components/BackToTopButton';
import FooterAbout from '../components/FooterAbout';
import { useTranslation } from 'react-i18next'; // Import the useTranslation hook

const About = () => {
  const [hoveredIndex, setHoveredIndex] = useState(null);
  const [isIconHovered, setIconHovered] = useState(false);
  const [isTitleHovered, setTitleHovered] = useState(false);
  const [hoveredSection, setHoveredSection] = useState(null);
  const { t } = useTranslation(); // Initialize the useTranslation hook

  // Fetch team members from translation.json
  const teamMembers = Array.isArray(t('about.team.members', { returnObjects: true }))
    ? t('about.team.members', { returnObjects: true })
    : []; // Fallback to an empty array if data is invalid

  // Debugging: Log teamMembers to ensure data is fetched correctly
  console.log(teamMembers);

  return (
    <div className="min-h-[calc(100vh-4rem)] bg-gray-50 pt-16">
      {/* Header Section */}
      <div className="max-w-7xl mx-auto px-4 py-12">
        <div className="text-center mb-12">
          <Vote
            className={`h-16 w-16 mx-auto mb-4 transition-transform transform ${
              isIconHovered ? 'scale-105 text-indigo-600' : 'text-indigo-600'
            }`}
            onMouseEnter={() => setIconHovered(true)}
            onMouseLeave={() => setIconHovered(false)}
          />
          <h1
            className={`text-4xl font-bold mb-4 transition-colors duration-200 ${
              isTitleHovered ? 'text-indigo-600' : 'text-gray-900'
            }`}
            onMouseEnter={() => setTitleHovered(true)}
            onMouseLeave={() => setTitleHovered(false)}
          >
            {t('about.header.title')}
          </h1>
          <p
            className="text-lg text-gray-600 max-w-2xl mx-auto cursor-default"
            onMouseEnter={() => setTitleHovered(true)}
            onMouseLeave={() => setTitleHovered(false)}
          >
            {t('about.header.description')}
          </p>
        </div>

        {/* Mission Statement */}
        <div
          id="mission-statement"
          className="bg-white p-8 rounded-lg shadow-md mb-12 transition-all duration-300 hover:shadow-lg hover:scale-102 hover:bg-indigo-50"
          onMouseEnter={() => setHoveredSection('mission')}
          onMouseLeave={() => setHoveredSection(null)}
        >
          <div className="flex items-center mb-4">
            <Target
              className={`h-6 w-6 mr-2 transition-transform transform duration-300 ${
                hoveredSection === 'mission' ? 'text-indigo-600 scale-110' : 'text-gray-900'
              }`}
            />
            <h2
              className={`text-2xl font-bold transition-colors duration-300 ${
                hoveredSection === 'mission' ? 'text-indigo-600' : 'text-gray-900'
              }`}
            >
              {t('about.mission.title')}
            </h2>
          </div>
          <p className="text-gray-700">{t('about.mission.description')}</p>
        </div>

        {/* Core Values */}
        <div
          id="core-values"
          className="bg-white p-8 rounded-lg shadow-md mb-12 transition-all duration-300 hover:shadow-lg hover:scale-102 hover:bg-indigo-50"
          onMouseEnter={() => setHoveredSection('values')}
          onMouseLeave={() => setHoveredSection(null)}
        >
          <div className="flex items-center mb-4">
            <ShieldCheck
              className={`h-6 w-6 mr-2 transition-transform transform duration-300 ${
                hoveredSection === 'values' ? 'text-indigo-600 scale-110' : 'text-gray-900'
              }`}
            />
            <h2
              className={`text-2xl font-bold transition-colors duration-300 ${
                hoveredSection === 'values' ? 'text-indigo-600' : 'text-gray-900'
              }`}
            >
              {t('about.values.title')}
            </h2>
          </div>
          <ul className="list-disc pl-5 text-gray-700 space-y-2">
            <li>{t('about.values.transparency')}</li>
            <li>{t('about.values.security')}</li>
            <li>{t('about.values.inclusivity')}</li>
            <li>{t('about.values.innovation')}</li>
          </ul>
        </div>

        {/* Team Section */}
        <div id="meet-the-team" className="bg-white p-8 rounded-lg shadow-md">
          <h2 className="text-2xl font-bold text-gray-900 mb-4">{t('about.team.title')}</h2>
          <div className="grid md:grid-cols-2 gap-8">
            {teamMembers.length > 0 ? (
              teamMembers.map((member, index) => (
                <Card
                  key={index}
                  className="p-6 text-center"
                  onMouseEnter={() => setHoveredIndex(index)}
                  onMouseLeave={() => setHoveredIndex(null)}
                >
                  {/* Render the image dynamically */}
                  <img
                    src={member.image || `https://via.placeholder.com/150?text=${encodeURIComponent(member.name)}`} // Fallback image
                    alt={member.name}
                    className="w-32 h-32 rounded-full mx-auto mb-4 object-cover"
                  />
                  <h3
                    className={`text-xl font-semibold transition-colors duration-200 ${
                      hoveredIndex === index ? 'text-indigo-600' : 'text-gray-900'
                    }`}
                    onMouseEnter={() => setHoveredIndex(index)}
                    onMouseLeave={() => setHoveredIndex(null)}
                  >
                    {member.name}
                  </h3>
                  <p
                    className="text-gray-600 mb-4"
                    onMouseEnter={() => setHoveredIndex(index)}
                    onMouseLeave={() => setHoveredIndex(null)}
                  >
                    {member.role}
                  </p>
                  <div className="flex justify-center space-x-4">
                    <a
                      href={member.social?.instagram}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-gray-600 hover:text-red-600 transition-transform transform hover:scale-110"
                    >
                      <FaInstagram className="h-5 w-5" />
                    </a>
                    <a
                      href={member.social?.linkedin}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-gray-600 hover:text-indigo-600 transition-transform transform hover:scale-110"
                    >
                      <Linkedin className="h-5 w-5" />
                    </a>
                    <a
                      href={member.social?.twitter}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-gray-600 hover:text-blue-600 transition-transform transform hover:scale-110"
                    >
                      <Twitter className="h-5 w-5" />
                    </a>
                  </div>
                </Card>
              ))
            ) : (
              <p className="text-gray-600 text-center">No team members available.</p>
            )}
          </div>
        </div>
      </div>
      <BackToTopButton />
      <FooterAbout />
    </div>
  );
};

export default About;


================================================
File: src/pages/AdminDashboard.tsx
================================================
import React from "react";
import { motion } from "framer-motion";
import {
  BarChart,
  Users,
  Settings,
  FileText,
  Clock,
  Shield,
  Activity,
  BookOpen,
  KeyIcon,
  KeySquare,
  LockKeyhole,
} from "lucide-react";
import Card from "../components/Card";
import Button from "../components/Button";
import { useNavigate } from "react-router-dom";
import BackToTopButton from "../components/BackToTopButton";

const AdminDashboard = () => {
  const navigate = useNavigate();

  // Admin features
  const adminFeatures = [
    {
      title: "Create Event",
      icon: <BookOpen className="h-8 w-8 text-indigo-600" />,
      description: "Set up new voting events with customizable options.",
      onClick: () => navigate("/create-event"),
    },
    {
      title: "Create Secure Event",
      icon: <LockKeyhole className="h-8 w-8 text-indigo-600" />,
      description: "Set up new secure voting events with more privacy options.",
      onClick: () => navigate("/create-secure-event"),
    },
    {
      title: "View Reports",
      icon: <FileText className="h-8 w-8 text-indigo-600" />,
      description: "Analyze voting results and generate detailed reports.",
      onClick: () => navigate("/reports"),
    },
    {
      title: "Voting History",
      icon: <Clock className="h-8 w-8 text-indigo-600" />,
      description: "View detailed logs of all past voting activities.",
      onClick: () => navigate("/voting-history"),
    },
    {
      title: "Live Results",
      icon: <Activity className="h-8 w-8 text-indigo-600" />,
      description: "Monitor real-time voting results and analytics.",
      onClick: () => navigate("/live-results"),
    },
    {
      title: "System Logs",
      icon: <Shield className="h-8 w-8 text-indigo-600" />,
      description: "Access system logs for debugging and monitoring.",
      onClick: () => navigate("/system-logs"),
    },
  ];

  return (
    <div
      className={`flex-1 transition-all duration-300 mt-[-50px] p-6`}
    >
      {/* Header */}
      <div className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white py-12 text-center mb-8">
        <h1 className="text-4xl font-bold">Admin Dashboard</h1>
        <p className="mt-2 text-lg">Manage your platform with ease and efficiency.</p>
      </div>

      {/* Features Grid */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {adminFeatures.map((feature, index) => (
          <motion.div
            key={index}
            whileHover={{ scale: 1.05 }}
            transition={{ duration: 0.3 }}
          >
            <Card className="p-6 text-center hover:shadow-lg transition-shadow">
              <div className="flex justify-center mb-4">{feature.icon}</div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                {feature.title}
              </h3>
              <p className="text-gray-600 mb-4">{feature.description}</p>
              <Button onClick={feature.onClick} variant="primary" className="w-full">
                {feature.title}
              </Button>
            </Card>
          </motion.div>
        ))}
      </div>
      <BackToTopButton />
    </div>
  );
};

export default AdminDashboard;


================================================
File: src/pages/Contact.tsx
================================================
import React, { useState } from 'react';
import { Mail, Phone, MapPin, Send, MessageCircle } from 'lucide-react';
import Card from '../components/Card';
import { QRCodeCanvas } from 'qrcode.react';
import { useTranslation } from 'react-i18next'; // Import the useTranslation hook
import FooterContact from '../components/FooterContact';
import BackToTopButton from '../components/BackToTopButton';

const Contact = () => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    message: ''
  });
  const [isIconHovered, setIsIconHovered] = useState(false);
  const [isTitleHovered, setIsTitleHovered] = useState(false);
  const { t } = useTranslation(); // Initialize the useTranslation hook

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log('Form submitted:', formData);
    setFormData({ name: '', email: '', message: '' }); // Reset form after submission
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({ ...prevData, [name]: value }));
  };

  // Fetch contact info from translation.json
  const contactInfo = Array.isArray(t('contact.contactInfo', { returnObjects: true }))
    ? t('contact.contactInfo', { returnObjects: true })
    : []; // Fallback to an empty array if data is invalid

  // Debugging: Log contactInfo to ensure data is fetched correctly
  console.log(contactInfo);

  const vCardData = `
BEGIN:VCARD
VERSION:3.0
FN:Rakesh Mal
TEL:+91 7738431349
EMAIL:malrakesh172@gmail.com
ADR:;;Anand Nagar, Dahisar (East);Mumbai;Maharashtra;400068;India
END:VCARD
`;

  return (
    <div className="min-h-[calc(100vh-4rem)] bg-gray-50 pt-16">
      <div className="max-w-7xl mx-auto px-4 py-12">
        {/* Contact Us Title and Icon */}
        <div className="text-center mb-12">
          <MessageCircle
            className={`h-16 w-16 mx-auto mb-4 transition-transform transform ${
              isIconHovered ? 'scale-110 text-indigo-600' : 'text-indigo-600'
            }`}
            onMouseEnter={() => setIsIconHovered(true)}
            onMouseLeave={() => setIsIconHovered(false)}
          />
          <h1
            className={`text-4xl font-bold mb-4 transition-colors duration-200 ${
              isTitleHovered ? 'text-indigo-600' : 'text-gray-900'
            }`}
            onMouseEnter={() => setIsTitleHovered(true)}
            onMouseLeave={() => setIsTitleHovered(false)}
          >
            {t('contact.header.title')}
          </h1>
          <p
            className="text-lg text-gray-600 max-w-2xl mx-auto"
            onMouseEnter={() => setIsTitleHovered(true)} // Trigger hover effect on "Contact Us" when hovering over description
            onMouseLeave={() => setIsTitleHovered(false)}
          >
            {t('contact.header.description')}
          </p>
        </div>

        {/* Contact Information */}
        <div id="contact-info" className="grid md:grid-cols-2 gap-12">
          <div className="space-y-8">
            {contactInfo.length > 0 ? (
              contactInfo.map((info, index) => (
                <Card key={index} className="p-6 transform hover:scale-105 transition-transform duration-300 border border-gray-300">
                  <div className="flex items-start space-x-4">
                    {info.icon === 'Mail' && <Mail className="h-6 w-6 text-indigo-600" />}
                    {info.icon === 'Phone' && <Phone className="h-6 w-6 text-indigo-600" />}
                    {info.icon === 'MapPin' && <MapPin className="h-6 w-6 text-indigo-600" />}
                    <div>
                      <h3 className="text-lg font-semibold text-gray-900">{info.title}</h3>
                      <p className="text-gray-600 whitespace-pre-line">{info.content}</p>
                    </div>
                  </div>
                </Card>
              ))
            ) : (
              <p className="text-gray-600 text-center">No contact information available.</p>
            )}
          </div>

          {/* Map Section */}
          <div id="find-location" className="h-full">
            <Card className="p-6 border border-gray-300 h-full">
              <h2 className="text-2xl font-bold mb-4">{t('contact.mapSection.title')}</h2>
              <div className="relative w-full h-0 pb-[56.25%]"> {/* Responsive aspect ratio for the map */}
                <iframe
                  title="Location Map"
                  src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3763.9251482573264!2d72.90958211517465!3d19.19125618690806!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3be7c7982eecfd09%3A0x9bebdb8d67242485!2sAnand%20Nagar%20Dahisar!5e0!3m2!1sen!2sin!4v1634054825061!5m2!1sen!2sin"
                  className="absolute top-0 left-0 w-full h-full" // Full width and height within the container
                  style={{ border: 0 }}
                  allowFullScreen=""
                  loading="lazy"
                ></iframe>
              </div>
            </Card>
          </div>
        </div>

        {/* Scan to Save Contact */}
        <div id="save-contact" className="mt-12">
          <Card className="p-6 border border-gray-300">
            <h2 className="text-2xl font-bold mb-4">{t('contact.qrCodeSection.title')}</h2>
            <div className="flex justify-center">
              <QRCodeCanvas
                value={vCardData}
                size={200}
                bgColor="#ffffff"
                fgColor="#000000"
                level="H"
                includeMargin={true}
              />
            </div>
            <p className="text-center text-gray-600 mt-4">
              {t('contact.qrCodeSection.description')}
            </p>
          </Card>
        </div>

        {/* Contact Form */}
        <div id="send-message" className="mt-12">
          <Card className="p-6 border border-gray-300">
            <h2 className="text-2xl font-bold mb-4">{t('contact.formSection.title')}</h2>
            <form onSubmit={handleSubmit}>
              <div className="mb-4">
                <label className="block mb-2 text-sm font-semibold text-gray-700" htmlFor="name">
                  {t('contact.formSection.labels.name')}
                </label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  value={formData.name}
                  onChange={handleChange}
                  className="w-full p-2 border border-gray-300 rounded"
                  required
                />
              </div>
              <div className="mb-4">
                <label className="block mb-2 text-sm font-semibold text-gray-700" htmlFor="email">
                  {t('contact.formSection.labels.email')}
                </label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={formData.email}
                  onChange={handleChange}
                  className="w-full p-2 border border-gray-300 rounded"
                  required
                />
              </div>
              <div className="mb-4">
                <label className="block mb-2 text-sm font-semibold text-gray-700" htmlFor="message">
                  {t('contact.formSection.labels.message')}
                </label>
                <textarea
                  id="message"
                  name="message"
                  value={formData.message}
                  onChange={handleChange}
                  className="w-full p-2 border border-gray-300 rounded"
                  rows={5}
                  required
                ></textarea>
              </div>
              <button
                type="submit"
                className="flex items-center justify-center px-4 py-2 text-white bg-indigo-600 rounded hover:bg-indigo-700 transition duration-200"
              >
                <Send className="mr-2 h-4 w-4" />
                {t('contact.formSection.button')}
              </button>
            </form>
          </Card>
        </div>
      </div>
      <BackToTopButton />
      <FooterContact />
    </div>
  );
};

export default Contact;


================================================
File: src/pages/CreateEvent.tsx
================================================
import React, { useState, useRef } from "react";
import { Plus, Vote, Trash2 } from "lucide-react";
import Card from "../components/Card";
import Button from "../components/Button";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const CreateEvent = () => {
  // State to manage form data
  const [eventData, setEventData] = useState({
    title: "",
    candidates: [
      { name: "", bio: "" }, // Default candidate 1
      { name: "", bio: "" }, // Default candidate 2
    ],
    manifesto: "",
    voterLimit: 0,
    startDate: "", // Add start date
    startTime: "", // Add start time
    endDate: "",   // Add end date
    endTime: "",   // Add end time
  });

  // Ref for file input to reset it programmatically
  const fileInputRef = useRef(null);

  // Get today's date in YYYY-MM-DD format
  const getTodayDate = () => {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, "0");
    const day = String(today.getDate()).padStart(2, "0");
    return `${year}-${month}-${day}`;
  };

  // Handle input changes for text fields
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setEventData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  // Handle changes for candidate fields
  const handleCandidateChange = (index: number, field: string, value: string) => {
    const updatedCandidates = [...eventData.candidates];
    updatedCandidates[index][field] = value;
    setEventData((prevData) => ({
      ...prevData,
      candidates: updatedCandidates,
    }));
  };

  // Add a new candidate field
  const addCandidate = () => {
    setEventData((prevData) => ({
      ...prevData,
      candidates: [...prevData.candidates, { name: "", bio: "" }],
    }));
  };

  // Remove a candidate field
  const removeCandidate = (index: number) => {
    if (eventData.candidates.length > 2) {
      const updatedCandidates = eventData.candidates.filter((_, i) => i !== index);
      setEventData((prevData) => ({
        ...prevData,
        candidates: updatedCandidates,
      }));
    } else {
      toast.error("At least 2 candidates are required.");
    }
  };

  // Handle form submission
const handleSubmit = async (e: React.FormEvent) => {
  e.preventDefault();

  // Validate required fields
  if (
    !eventData.title ||
    eventData.candidates.some((candidate) => !candidate.name || !candidate.bio) ||
    eventData.voterLimit <= 0 ||
    !eventData.startDate ||
    !eventData.startTime ||
    !eventData.endDate ||
    !eventData.endTime
  ) {
    toast.error("Please fill out all required fields.");
    return;
  }

  try {
    // Send POST request to create the event
    const response = await fetch("/api/create-event", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(eventData),
    });

    // Check if the request was successful
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || "Failed to create event.");
    }

    // Show success notification
    toast.success("Event created successfully!");

    // Reset form fields after successful submission
    setEventData({
      title: "",
      candidates: [
        { name: "", bio: "" }, // Default candidate 1
        { name: "", bio: "" }, // Default candidate 2
      ],
      manifesto: "",
      voterLimit: 0,
      startDate: "",
      startTime: "",
      endDate: "",
      endTime: "",
    });
  } catch (error) {
    // Show error notification
    toast.error("An error occurred while creating the event. Please try again.");
    console.error("Error creating event:", error);
  }
};
  
  return (
    <>
      {/* Header */}
      <header className="text-center py-6">
        <h1 className="text-3xl font-bold">Create New Voting Event</h1>
        <p className="mt-2 text-gray-500">Set up your voting event with all the necessary details.</p>
      </header>

      {/* Event Form */}
      <form onSubmit={handleSubmit} className="max-w-4xl mx-auto p-6 bg-white rounded-lg shadow-md">
        {/* Event Title */}
        <div className="mb-4">
          <label htmlFor="title" className="block text-sm font-medium text-gray-700">
            Event Title
          </label>
          <input
            type="text"
            id="title"
            name="title"
            value={eventData.title}
            onChange={handleInputChange}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            placeholder="Enter event title"
            required
          />
        </div>

        {/* Candidates Section */}
        <div className="mb-6">
          <h2 className="text-xl font-semibold mb-4">Candidates</h2>
          {eventData.candidates.map((candidate, index) => (
            <div key={index} className="mb-4">
              <div className="mb-2">
                <label htmlFor={`candidate-name-${index}`} className="block text-sm font-medium text-gray-700">
                  Candidate Name
                </label>
                <input
                  type="text"
                  id={`candidate-name-${index}`}
                  value={candidate.name}
                  onChange={(e) => handleCandidateChange(index, "name", e.target.value)}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                  placeholder="Enter candidate name"
                  required
                />
              </div>
              <div className="mb-2">
                <label htmlFor={`candidate-bio-${index}`} className="block text-sm font-medium text-gray-700">
                  Candidate Bio
                </label>
                <textarea
                  id={`candidate-bio-${index}`}
                  value={candidate.bio}
                  onChange={(e) => handleCandidateChange(index, "bio", e.target.value)}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                  placeholder="Enter candidate bio"
                  rows={3}
                  required
                />
              </div>
              {eventData.candidates.length > 2 && (
                <button
                  type="button"
                  onClick={() => removeCandidate(index)}
                  className="text-red-500 hover:text-red-700 flex items-center gap-1"
                >
                  <Trash2 size={16} /> Remove Candidate
                </button>
              )}
            </div>
          ))}
          <Button
            type="button"
            onClick={addCandidate}
            variant="secondary"
            className="mt-4"
          >
            <Plus size={16} /> Add Candidate
          </Button>
        </div>

        {/* Manifesto (Optional) */}
        <div className="mb-4">
          <label htmlFor="manifesto" className="block text-sm font-medium text-gray-700">
            Manifesto (Optional)
          </label>
          <textarea
            id="manifesto"
            name="manifesto"
            value={eventData.manifesto}
            onChange={handleInputChange}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            placeholder="Enter manifesto details"
            rows={4}
          />
        </div>

        {/* Number of Voters */}
        <div className="mb-4">
          <label htmlFor="voterLimit" className="block text-sm font-medium text-gray-700">
            Number of Voters
          </label>
          <input
            type="number"
            id="voterLimit"
            name="voterLimit"
            value={eventData.voterLimit}
            onChange={handleInputChange}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            placeholder="Enter voter limit"
            required
          />
        </div>

        {/* Start Date */}
        <div className="mb-4">
          <label htmlFor="startDate" className="block text-sm font-medium text-gray-700">
            Start Date
          </label>
          <input
            type="date"
            id="startDate"
            name="startDate"
            value={eventData.startDate}
            onChange={handleInputChange}
            min={getTodayDate()}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            required
          />
        </div>

        {/* Start Time */}
        <div className="mb-4">
          <label htmlFor="startTime" className="block text-sm font-medium text-gray-700">
            Start Time
          </label>
          <input
            type="time"
            id="startTime"
            name="startTime"
            value={eventData.startTime}
            onChange={handleInputChange}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            required
          />
        </div>

        {/* End Date */}
        <div className="mb-4">
          <label htmlFor="endDate" className="block text-sm font-medium text-gray-700">
            End Date
          </label>
          <input
            type="date"
            id="endDate"
            name="endDate"
            value={eventData.endDate}
            onChange={handleInputChange}
            min={getTodayDate()}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            required
          />
        </div>

        {/* End Time */}
        <div className="mb-4">
          <label htmlFor="endTime" className="block text-sm font-medium text-gray-700">
            End Time
          </label>
          <input
            type="time"
            id="endTime"
            name="endTime"
            value={eventData.endTime}
            onChange={handleInputChange}
            className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            required
          />
        </div>

        {/* Submit Button */}
        <Button type="submit" className="w-full">
          Create Event
        </Button>
      </form>

      {/* Toast Notifications */}
      <ToastContainer />
    </>
  );
};

export default CreateEvent;


================================================
File: src/pages/CreateSecurePage.tsx
================================================
import React, { useState } from "react";
import { Plus, Vote, Trash2, Shield } from "lucide-react";
import Card from "../components/Card";
import Button from "../components/Button";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const CreateSecureEvent = () => {
  const [eventData, setEventData] = useState({
    title: "",
    candidates: [
      { name: "", bio: "" },
      { name: "", bio: "" },
    ],
    voterAddresses: [],
    voterLimit: 0,
    startDate: "",
    startTime: "",
    endDate: "",
    endTime: "",
  });

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      const response = await fetch("/api/create-secure-event", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(eventData),
      });

      if (response.ok) {
        toast.success("Secure event created successfully!");
        setEventData({
          title: "",
          candidates: [
            { name: "", bio: "" },
            { name: "", bio: "" },
          ],
          voterAddresses: [],
          voterLimit: 0,
          startDate: "",
          startTime: "",
          endDate: "",
          endTime: "",
        });
      } else {
        throw new Error("Failed to create secure event");
      }
    } catch (error) {
      toast.error("An error occurred while creating the secure event");
      console.error(error);
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 py-8">
      <header className="mb-8 text-center">
        <h1 className="text-3xl font-bold text-indigo-700">Create Secure Event</h1>
        <p className="mt-2 text-gray-600">Create a secure voting event with whitelisted addresses.</p>
      </header>

      <Card className="mx-auto max-w-4xl p-6">
        <form onSubmit={handleSubmit}>
          {/* Form fields similar to CreateEvent.tsx */}
          {/* Add a field for voterAddresses */}
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Whitelisted Addresses (comma separated)
            </label>
            <textarea
              value={eventData.voterAddresses.join(",")}
              onChange={(e) =>
                setEventData({
                  ...eventData,
                  voterAddresses: e.target.value.split(","),
                })
              }
              className="w-full p-2 border border-gray-300 rounded"
              rows={3}
              required
            />
          </div>

          <Button type="submit" variant="primary" className="w-full">
            Create Secure Event
          </Button>
        </form>
      </Card>
      <ToastContainer />
    </div>
  );
};

export default CreateSecureEvent;


================================================
File: src/pages/DownloadReports.tsx
================================================
import React from "react";
import { Download } from "lucide-react";
import Button from "../components/Button";

const DownloadReports = () => {
  const handleDownload = (format: string) => {
    const element = document.createElement("a");
    const file = new Blob([`Sample report in ${format.toUpperCase()} format.`], {
      type: format === "csv" ? "text/csv" : "application/pdf",
    });
    element.href = URL.createObjectURL(file);
    element.download = `report.${format}`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  return (
    <div className="p-6">
      {/* Header */}
      <h1 className="text-2xl font-bold mb-4">Download Reports</h1>
      <p className="text-gray-600 mb-8">Generate and download detailed election reports.</p>

      {/* Download Options */}
      <div className="space-y-4">
        <Button
          onClick={() => handleDownload("csv")}
          className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded"
        >
          <Download className="mr-2 inline-block" /> Download CSV
        </Button>
        <Button
          onClick={() => handleDownload("pdf")}
          className="w-full bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded"
        >
          <Download className="mr-2 inline-block" /> Download PDF
        </Button>
      </div>
    </div>
  );
};

export default DownloadReports;


================================================
File: src/pages/Home.tsx
================================================
// src/pages/Home.tsx
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import Slider from 'react-slick';
import CountUp from 'react-countup';
import { Wallet, UserPlus, Vote, Shield, LineChart, LogInIcon, LogOut } from 'lucide-react';
import Button from '../components/Button';
import Card from '../components/Card';
import 'slick-carousel/slick/slick.css';
import 'slick-carousel/slick/slick-theme.css';
import Footer from '../components/Footer';
import BackToTopButton from '../components/BackToTopButton';
import LanguageSelector from '../components/LanguageSelector';
import { useTranslation } from 'react-i18next';
import { useWallet } from '../components/WalletContext';
import enData from '../locales/en/translation.json';
import hiData from '../locales/hi/translation.json';
import taData from '../locales/ta/translation.json';
import bnData from '../locales/bn/translation.json';
import mrData from '../locales/mr/translation.json';
import guData from '../locales/gu/translation.json';
import { toast } from 'react-toastify';
import { useNavigate } from 'react-router-dom';


const localeData = {
  en: enData,
  hi: hiData,
  ta: taData,
  bn: bnData,
  mr: mrData,
  gu: guData,
};

const Home = () => {
  const [currentLanguage, setCurrentLanguage] = useState('en');
  const [hoveredFeature, setHoveredFeature] = useState<number | null>(null);
  const [activeFAQ, setActiveFAQ] = useState<number | null>(null);
  const { t, i18n } = useTranslation();
  const { walletAddress, isWalletConnected, connectWallet, disconnectWallet } = useWallet();
const navigate = useNavigate();

  useEffect(() => {
    i18n.changeLanguage(currentLanguage);
  }, [currentLanguage, i18n]);

  const handleLanguageChange = (language: string) => {
    setCurrentLanguage(language);
  };

    const handleDisconnectWallet = () => {
    disconnectWallet();
    toast.success('Wallet disconnected successfully!');
  };

  const handleConnectWallet = async () => {
    try {
      // Check if MetaMask is installed
      if (typeof window.ethereum === 'undefined') {
        toast.error('MetaMask is not installed. Please install MetaMask to connect your wallet.');
        return;
      }

      // Request wallet connection from MetaMask
      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });

      if (accounts && accounts.length > 0) {
        // Successfully connected wallet
        connectWallet(); // Call your connectWallet function to update state
        toast.success('Wallet connected successfully!');
      } else {
        // No accounts returned
        toast.error('Wallet connection failed. Please try again.');
      }
    } catch (error) {
      // If there's an error in connecting
      toast.error('Could not connect to MetaMask.');
      console.error('Error connecting MetaMask:', error);
    }
  };
  
  const features = t('features', { returnObjects: true }) || [];
  const steps = t('howItWorks', { returnObjects: true }) || [];
  const testimonials = t('testimonials', { returnObjects: true }) || [];
  const funFacts = t('funFacts', { returnObjects: true }) || [];
  const statistics = t('statistics', { returnObjects: true }) || [];

  const slickSettings = {
    dots: true,
    infinite: true,
    speed: 500,
    slidesToShow: 1,
    slidesToScroll: 1,
    autoplay: true,
    autoplaySpeed: 3000,
    draggable: true,
    pauseOnHover: true,
  };

  const copyToClipboard = () => {
    if (walletAddress) {
      navigator.clipboard.writeText(walletAddress);
      toast.success('Wallet address copied to clipboard!');
    }
  };

  const truncateWalletAddress = (address: string) => {
    return `${address.slice(0, 6)}...${address.slice(-6)}`;
  };

  return (
    <div className="min-h-screen pt-16 bg-gradient-to-b from-indigo-50 via-purple-50 to-white">
      {/* Language Selector */}
      <div className="absolute top-20 left-6 sm:left-12 sm:top-20 z-10 sm:block hidden">
        <LanguageSelector onChange={handleLanguageChange} currentLanguage={currentLanguage} />
      </div>

      <div className="flex justify-end sm:hidden px-4 pt-4">
        <LanguageSelector onChange={handleLanguageChange} currentLanguage={currentLanguage} />
      </div>

      {/* Hero Section */}
      <div className="max-w-7xl mx-auto px-4 py-12">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          className="text-center mb-12"
        >
          <h1 className="text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-indigo-600 to-purple-600 mb-4">
            {t('hero.welcome')}
          </h1>
          <p className="text-xl text-gray-600 max-w-2xl mx-auto">
            {t('hero.description')}
          </p>
        </motion.div>

        {/* Wallet Section */}
        <div className="flex flex-col sm:flex-row justify-center space-y-4 sm:space-y-0 sm:space-x-6 mb-16">
          {!isWalletConnected ? (
            <Button onClick={handleConnectWallet} icon={<Wallet />} variant="primary">
              {t('hero.connectWallet')}
            </Button>
          ) : (
 // No display of wallet address or Disconnect button
          <div className="text-center">
            <p className="text-gray-700 mb-4">
              <Button onClick={handleDisconnectWallet} icon={<LogOut />} variant="primary">
                {t('hero.disconnectWallet')}
              </Button>
            </p>
          </div>
          )}
        </div>

        {/* Features Section */}
        <div id="features" className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-16">
          {features.map((feature: any, index: number) => (
            <Card key={index} className="p-6">
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.2 }}
                className="text-center"
              >
                <div className="mb-4 transform hover:scale-110 transition-transform duration-300">
                  {index === 0 ? <Vote className="h-8 w-8 text-indigo-600" /> : index === 1 ? <Shield className="h-8 w-8 text-indigo-600" /> : <LineChart className="h-8 w-8 text-indigo-600" />}
                </div>
                <h3
                  className={`text-xl font-semibold mb-3 transition-colors duration-200 ${
                    hoveredFeature === index ? 'text-indigo-600' : 'text-gray-900'
                  }`}
                  onMouseEnter={() => setHoveredFeature(index)}
                  onMouseLeave={() => setHoveredFeature(null)}
                >
                  {feature.title}
                </h3>
                <p className="text-gray-600">{feature.description}</p>
              </motion.div>
            </Card>
          ))}
        </div>

        {/* How It Works Section */}
        <div id="how-it-works" className="bg-white-50 py-16">
          <h2 className="text-3xl font-bold text-center text-gray-900 mb-12">
            {t('howItWorksTitle', { defaultValue: 'How It Works' })}
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-8 text-center">
            {steps.map((step: any, index: number) => (
              <div key={index} className="p-6 bg-white rounded-lg shadow-md hover:shadow-lg transition">
                <span className="block w-12 h-12 rounded-full bg-indigo-600 text-white mx-auto text-lg font-bold flex items-center justify-center mb-4">
                  {step.step}
                </span>
                <h3 className="text-xl font-semibold text-gray-900 mb-2">{step.title}</h3>
                <p className="text-gray-600">{step.description}</p>
              </div>
            ))}
          </div>
        </div>

        {/* Testimonials Section */}
        <div id='testimonials' className="py-16">
          <h2 className="text-3xl font-bold text-center text-gray-900 mb-12">
            {t('testimonialsTitle', { defaultValue: 'What Our Users Say' })}
          </h2>
          <div className="max-w-4xl mx-auto">
            <Slider {...slickSettings}>
              {testimonials.map((testimonial: any, index: number) => (
                <div key={index} className="p-6 bg-white rounded-lg shadow-md text-center">
                  <img src={testimonial.image} alt={testimonial.name} className="w-20 h-20 rounded-full mx-auto mb-4" />
                  <p className="text-gray-600 mb-4">&ldquo;{testimonial.feedback}&rdquo;</p>
                  <h4 className="text-gray-900 font-bold">{testimonial.name}</h4>
                </div>
              ))}
            </Slider>
          </div>
        </div>

        {/* Fun Fact Section */}
        <div id='fun-facts' className="bg-indigo-100 py-12">
          <h2 className="text-3xl font-bold text-center text-indigo-800 mb-6">
            {t('funFactsTitle', { defaultValue: 'Fun Facts About EzyVote' })}
          </h2>
          <div className="text-center text-lg text-indigo-600 max-w-2xl mx-auto">
            {funFacts.map((fact: string, index: number) => (
              <motion.p
                key={index}
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.3 }}
                className="mb-4"
              >
                {fact}
              </motion.p>
            ))}
          </div>
        </div>
    
        {/* Statistics Section */}
        <div className="bg-gray-900 text-white py-16">
          <div className="max-w-7xl mx-auto grid grid-cols-1 md:grid-cols-3 gap-8 text-center">
            {statistics.map((stat: any, index: number) => (
              <div key={index} className="p-6">
                <h3 className="text-5xl font-bold text-indigo-400 mb-2">
                  <CountUp start={0} end={parseInt(stat.value.replace(/[^0-9]/g, '')) || 0} duration={30} />
                </h3>
                <p className="text-3xl font-bold mb-5 text-white">{stat.label}</p>
              </div>
            ))}
          </div>
        </div>

        {/* FAQ Section */}
        <div id="faq" className="bg-white-50 py-12">
          <h2 className="text-3xl font-bold text-center text-gray-900 mb-6">
            {t('faq.heading')}
          </h2>
          <div className="max-w-4xl mx-auto space-y-4">
            {t('faq.items', { returnObjects: true }).map((faq: any, index: number) => (
              <div key={index} className="p-4 bg-white rounded-lg shadow hover:shadow-md">
                <button
                  onClick={() => setActiveFAQ(activeFAQ === index ? null : index)}
                  className="w-full text-left flex justify-between items-center"
                >
                  <h3 className="text-lg font-semibold text-indigo-600">{faq.question}</h3>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className={`h-5 w-5 transform transition-transform ${activeFAQ === index ? 'rotate-180' : ''}`}
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path fillRule="evenodd" d="M5.293 9.293a1 1 0 011.414 0L10 12.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                  </svg>
                </button>
                {activeFAQ === index && (
                  <motion.div
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: 'auto' }}
                    className="mt-2 text-gray-600"
                  >
                    {faq.answer}
                  </motion.div>
                )}
              </div>
            ))}
          </div>
        </div>
      </div>
      <BackToTopButton />
      <Footer />
    </div>
  );
};

export default Home;


================================================
File: src/pages/LiveResults.tsx
================================================
import React, { useEffect, useState } from "react";
import { Activity, BarChart, Users } from "lucide-react";
import Card from "../components/Card";
import Button from "../components/Button";
import { useNavigate } from "react-router-dom";

const LiveResults = () => {
  const navigate = useNavigate();
  const [voteData, setVoteData] = useState([]);

  useEffect(() => {
    // Establish WebSocket connection
    const ws = new WebSocket("ws://localhost:5000");

    // Listen for messages from the server
    ws.onmessage = (event) => {
      const data = JSON.parse(event.data);

      if (data.type === "voteUpdate") {
        // Update the vote data in real-time
        setVoteData((prevData) => {
          const newData = [...prevData];
          const eventIndex = newData.findIndex(
            (item) => item.eventId === data.data.eventId
          );

          if (eventIndex !== -1) {
            newData[eventIndex].candidates[data.data.candidateIndex].votes =
              data.data.updatedVoteCount;
          }

          return newData;
        });
      }
    };

    // Cleanup WebSocket connection on unmount
    return () => {
      ws.close();
    };
  }, []);

  const liveFeatures = [
    {
      title: "Real-Time Results",
      icon: <Activity className="h-8 w-8 text-indigo-600" />,
      description: "Monitor live voting results as they come in.",
      onClick: () => navigate("/real-time-results"),
    },
    {
      title: "Analytics Dashboard",
      icon: <BarChart className="h-8 w-8 text-indigo-600" />,
      description: "View detailed analytics and insights.",
      onClick: () => navigate("/analytics-dashboard"),
    },
    {
      title: "Voter Participation",
      icon: <Users className="h-8 w-8 text-indigo-600" />,
      description: "Track voter turnout and participation rates.",
      onClick: () => navigate("/voter-participation"),
    },
  ];

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-gray-100">
      {/* Header */}
      <div className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white py-12 text-center">
        <h1 className="text-4xl font-bold">Live Results</h1>
        <p className="mt-2 text-lg">Track live voting results and analytics.</p>
      </div>

      {/* Features Grid */}
      <div className="max-w-7xl mx-auto px-4 py-12 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {liveFeatures.map((feature, index) => (
          <Card key={index} className="p-6 text-center hover:shadow-lg transition-shadow">
            <div className="flex justify-center mb-4">{feature.icon}</div>
            <h3 className="text-xl font-semibold text-gray-900 mb-2">
              {feature.title}
            </h3>
            <p className="text-gray-600 mb-4">{feature.description}</p>
            <Button onClick={feature.onClick} variant="primary" className="w-full">
              {feature.title}
            </Button>
          </Card>
        ))}
      </div>

      {/* Real-Time Vote Data */}
      <div className="max-w-7xl mx-auto px-4 py-12">
        <h2 className="text-2xl font-bold text-gray-900 mb-4">Real-Time Votes</h2>
        <ul>
          {voteData.map((event, index) => (
            <li key={index} className="mb-4">
              <h3 className="text-xl font-semibold text-indigo-600">{event.title}</h3>
              <ul>
                {event.candidates.map((candidate, idx) => (
                  <li key={idx}>
                    {candidate.name}: {candidate.votes} votes
                  </li>
                ))}
              </ul>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default LiveResults;


================================================
File: src/pages/Notifications.tsx
================================================
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Bell, CheckCircle, Info, X } from 'lucide-react';

const notificationsData = [
  {
    id: 1,
    type: 'success',
    title: 'Event Created Successfully',
    message: 'Your event "Annual Meeting" was created successfully.',
    time: '2 hours ago',
  },
  {
    id: 2,
    type: 'info',
    title: 'New Voter Registered',
    message: 'A new voter has registered for your event.',
    time: '4 hours ago',
  },
  {
    id: 3,
    type: 'error',
    title: 'Failed Login Attempt',
    message: 'There was an unsuccessful login attempt on your account.',
    time: '1 day ago',
  },
  {
    id: 4,
    type: 'info',
    title: 'Event Reminder',
    message: 'Your event "Weekly Poll" is scheduled for tomorrow.',
    time: '2 days ago',
  },
];

const NotificationCard = ({ notification, onDismiss }: any) => {
  const icons = {
    success: <CheckCircle className="text-green-600 h-6 w-6" />,
    info: <Info className="text-blue-600 h-6 w-6" />,
    error: <Bell className="text-red-600 h-6 w-6" />,
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -10 }}
      transition={{ duration: 0.3 }}
      className="bg-white shadow-md rounded-lg p-4 flex items-center gap-4"
    >
      <div className="flex-shrink-0">{icons[notification.type]}</div>
      <div className="flex-1">
        <h4 className="text-lg font-semibold text-gray-800">{notification.title}</h4>
        <p className="text-gray-600 text-sm">{notification.message}</p>
        <span className="text-gray-400 text-xs">{notification.time}</span>
      </div>
      <button
        onClick={() => onDismiss(notification.id)}
        className="text-gray-400 hover:text-gray-600"
      >
        <X className="h-5 w-5" />
      </button>
    </motion.div>
  );
};

const Notifications = () => {
  const [notifications, setNotifications] = useState(notificationsData);
  const [filter, setFilter] = useState('all');

  const handleDismiss = (id: number) => {
    setNotifications((prev) => prev.filter((notif) => notif.id !== id));
  };

  const filteredNotifications =
    filter === 'all'
      ? notifications
      : notifications.filter((notif) => notif.type === filter);

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-gray-100 mt-[-25px]">
      {/* Header */}
      <div className="bg-gradient-to-l from-indigo-600 to-purple-600 text-white py-8 sm:py-12 px-4 text-center">
        <motion.h1
          className="text-3xl sm:text-4xl font-bold"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          Notifications
        </motion.h1>
        <motion.p
          className="mt-2 text-base sm:text-lg"
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2, duration: 0.5 }}
        >
          Stay updated with the latest activities and alerts.
        </motion.p>
      </div>

      {/* Filters */}
      <div className="max-w-6xl mx-auto px-4 py-6">
        <div className="flex flex-wrap justify-center gap-2 sm:gap-4">
          {['all', 'success', 'info', 'error'].map((type) => (
            <button
              key={type}
              onClick={() => setFilter(type)}
              className={`px-3 py-1 sm:px-4 sm:py-2 rounded-lg font-medium text-xs sm:text-sm ${
                filter === type
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-200 text-gray-600 hover:bg-gray-300'
              }`}
            >
              {type === 'all' ? 'All Notifications' : type.charAt(0).toUpperCase() + type.slice(1)}
            </button>
          ))}
        </div>
      </div>

      {/* Notifications List */}
      <div className="max-w-6xl mx-auto px-4 py-6 grid gap-4 sm:gap-6 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3">
        {filteredNotifications.length > 0 ? (
          filteredNotifications.map((notification) => (
            <NotificationCard
              key={notification.id}
              notification={notification}
              onDismiss={handleDismiss}
            />
          ))
        ) : (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="text-center text-gray-500 col-span-full"
          >
            No notifications available.
          </motion.div>
        )}
      </div>
    </div>
  );
};

export default Notifications;


================================================
File: src/pages/Privacy.tsx
================================================
import React, { useState } from 'react';
import { Shield, Lock, Eye, Database, ThumbsUp, Mail } from 'lucide-react'; // Import icons for Your Rights and Contact Us
import BackToTopButton from '../components/BackToTopButton';
import FooterPrivacyPolicy from '../components/FooterPrivacyPolicy';

const Privacy = () => {
  // State to track whether a section is hovered
  const [hoveredSection, setHoveredSection] = useState(null);
  const [isTitleHovered, setIsTitleHovered] = useState(false); // Hover state for "Privacy Policy" title

  const sections = [
    {
      title: 'Data Security',
      icon: <Lock className="h-6 w-6 mr-2" />,
      content: (
        <p className="text-gray-600 leading-relaxed mb-4">
          At EzyVote, we take the security of your data seriously. All voting data is stored on 
          the blockchain, ensuring transparency and immutability. Personal information is 
          encrypted and stored securely following industry best practices.
        </p>
      ),
    },
    {
      title: 'Information We Collect',
      icon: <Eye className="h-6 w-6 mr-2" />,
      content: (
        <ul className="list-disc list-inside text-gray-600 space-y-2">
          <li>Email address (for authentication)</li>
          <li>Wallet address (for blockchain transactions)</li>
          <li>Voting preferences and history</li>
          <li>Device information for security purposes</li>
        </ul>
      ),
    },
    {
      title: 'How We Use Your Information',
      icon: <Database className="h-6 w-6 mr-2" />,
      content: (
        <>
          <p className="text-gray-600 leading-relaxed mb-4">
            Your information is used solely for:
          </p>
          <ul className="list-disc list-inside text-gray-600 space-y-2">
            <li>Facilitating secure voting processes</li>
            <li>Authenticating your identity</li>
            <li>Sending important notifications about votes</li>
            <li>Improving our platform's functionality</li>
          </ul>
        </>
      ),
    },
    {
      title: 'Your Rights',
      icon: <ThumbsUp className="h-6 w-6 mr-2" />,
      content: (
        <>
          <p className="text-gray-600 leading-relaxed mb-4">
            You have the right to:
          </p>
          <ul className="list-disc list-inside text-gray-600 space-y-2">
            <li>Access your personal data</li>
            <li>Request data correction</li>
            <li>Delete your account</li>
            <li>Export your voting history</li>
          </ul>
        </>
      ),
    },
    {
      title: 'Contact Us',
      icon: <Mail className="h-6 w-6 mr-2" />,
      content: (
        <p className="text-gray-600 leading-relaxed">
          If you have any questions about our privacy policy, please contact us at{' '}
          <a href="mailto:malrakesh172@gmail.com" className="text-indigo-600 hover:text-indigo-500">
            malrakesh172@gmail.com
          </a>
        </p>
      ),
    },
  ];

  return (
    <div className="min-h-screen pt-16 bg-gradient-to-b from-indigo-50 via-purple-50 to-white">
      <div className="max-w-4xl mx-auto px-4">
        <div className="bg-white rounded-lg shadow-md p-8">
          <div className="text-center mb-12">
            <Shield className="h-16 w-16 text-indigo-600 mx-auto mb-4 transition-transform transform hover:scale-110" />
            <h1
              className={`text-4xl font-bold mb-4 transition-colors duration-200 ${
                isTitleHovered ? 'text-indigo-600' : 'text-gray-900'
              }`}
              onMouseEnter={() => setIsTitleHovered(true)} // On mouse enter
              onMouseLeave={() => setIsTitleHovered(false)} // On mouse leave
            >
              Privacy Policy
            </h1>
            <p
              className="text-gray-600"
              onMouseEnter={() => setIsTitleHovered(true)} // On mouse enter of "Last updated"
              onMouseLeave={() => setIsTitleHovered(false)} // On mouse leave of "Last updated"
            >
              {/* Last updated: {new Date().toLocaleDateString('en-IN')}  // English-India */}
              {/* 'en-GM' - English- Great Britain */}
              Last updated: {new Date().toLocaleDateString('en-GB')}
            </p>
          </div>

          <div id="privacy-policy" className="space-y-8">
            {sections.map((section, index) => (
              <section
                key={index} 
                onMouseEnter={() => setHoveredSection(index)}
                onMouseLeave={() => setHoveredSection(null)}
              >
                <h2
                  className={`text-2xl font-bold mb-4 flex items-center transition-colors duration-200 ${
                    hoveredSection === index ? 'text-indigo-600' : 'text-gray-900'
                  }`}
                >
                  {React.cloneElement(section.icon, {
                    className: `h-6 w-6 mr-2 text-indigo-600 transition-transform transform ${
                      hoveredSection === index ? 'scale-110' : ''
                    }`
                  })}
                  {section.title}
                </h2>
                {section.content}
              </section>
            ))}
          </div>
        </div>
      </div>
      <BackToTopButton />
      <FooterPrivacyPolicy />
    </div>
  );
};

export default Privacy;



================================================
File: src/pages/Reports.tsx
================================================
import React, { useState, useEffect } from 'react';
import { Bar, Pie } from 'react-chartjs-2';
import Button from '../components/Button';
import { Download } from 'lucide-react';
import Card from '../components/Card';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
} from 'chart.js';
import LoadingSpinner from '../components/LoadingSpinner'; // Add a loading spinner component

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement
);

const Reports = () => {
  const [reportData, setReportData] = useState<any>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchReportData = async () => {
      setLoading(true);
      setError(null);
      try {
        // Simulate an API call
        const data = await new Promise((resolve) =>
          setTimeout(() => {
            resolve({
              overview: {
                totalVoters: 1200,
                totalVotes: 1150,
                voterTurnout: 95,
              },
              eventStats: {
                event1: {
                  votes: 350,
                  turnout: 90,
                },
                event2: {
                  votes: 500,
                  turnout: 92,
                },
              },
              chartData: {
                labels: ['Event 1', 'Event 2'],
                datasets: [
                  {
                    label: 'Votes',
                    data: [350, 500],
                    backgroundColor: 'rgba(75, 192, 192, 0.6)',
                  },
                  {
                    label: 'Voter Turnout',
                    data: [90, 92],
                    backgroundColor: 'rgba(255, 159, 64, 0.6)',
                  },
                ],
              },
            });
          }, 1000)
        );
        setReportData(data);
      } catch (err) {
        setError('Failed to fetch report data. Please try again later.');
      } finally {
        setLoading(false);
      }
    };

    fetchReportData();
  }, []);

  const handleDownload = (format: string) => {
    const element = document.createElement('a');
    const file = new Blob([`Sample report in ${format}`], {
      type: format === 'csv' ? 'text/csv' : 'application/pdf',
    });
    element.href = URL.createObjectURL(file);
    element.download = `report.${format}`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <LoadingSpinner />
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex justify-center items-center min-h-screen text-red-500 text-xl">
        {error}
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-100 to-gray-200">
      {/* Page Content */}
      <div className="p-4 sm:p-6">
        {/* Page Title */}
        <h1 className="text-2xl sm:text-4xl font-semibold text-gray-800 mb-4 sm:mb-6 text-center sm:text-left">
          Reports
        </h1>

        {/* Overview Section */}
        <Card className="mb-6 sm:mb-8 p-4 sm:p-6 bg-gradient-to-r from-blue-100 via-blue-50 to-blue-100">
          <h2 className="text-xl sm:text-2xl font-bold text-gray-800 mb-3 sm:mb-4">
            Overview
          </h2>
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 sm:gap-6">
            <div className="text-center p-3 sm:p-4 bg-white rounded-lg shadow-sm">
              <h3 className="text-sm sm:text-lg text-gray-600">Total Voters</h3>
              <p className="text-xl sm:text-3xl font-bold text-blue-600">
                {reportData?.overview.totalVoters}
              </p>
            </div>
            <div className="text-center p-3 sm:p-4 bg-white rounded-lg shadow-sm">
              <h3 className="text-sm sm:text-lg text-gray-600">Total Votes</h3>
              <p className="text-xl sm:text-3xl font-bold text-green-600">
                {reportData?.overview.totalVotes}
              </p>
            </div>
            <div className="text-center p-3 sm:p-4 bg-white rounded-lg shadow-sm">
              <h3 className="text-sm sm:text-lg text-gray-600">Voter Turnout</h3>
              <p className="text-xl sm:text-3xl font-bold text-purple-600">
                {reportData?.overview.voterTurnout}%
              </p>
            </div>
          </div>
        </Card>

        {/* Voting Results Section */}
        <Card className="mb-6 sm:mb-8 p-4 sm:p-6">
          <h2 className="text-xl sm:text-2xl font-bold text-gray-800 mb-3 sm:mb-4">
            Voting Results
          </h2>
          <div className="flex flex-col gap-6">
            <div className="w-full h-64 sm:h-80">
              <Bar
                data={reportData?.chartData}
                options={{
                  responsive: true,
                  maintainAspectRatio: false,
                  plugins: {
                    legend: {
                      position: 'bottom',
                    },
                  },
                }}
              />
            </div>
            <div className="w-full h-64 sm:h-80">
              <Pie
                data={reportData?.chartData}
                options={{
                  responsive: true,
                  maintainAspectRatio: false,
                  plugins: {
                    legend: {
                      position: 'bottom',
                    },
                  },
                }}
              />
            </div>
          </div>
        </Card>

        {/* Download Section */}
        <Card className="p-4 sm:p-6 bg-gradient-to-r from-yellow-50 to-yellow-100">
          <h2 className="text-xl sm:text-2xl font-bold text-gray-800 mb-3 sm:mb-4">
            Download Report
          </h2>
          <div className="flex flex-wrap gap-3 sm:gap-4 justify-center sm:justify-start">
            <Button
              variant="secondary"
              icon={<Download className="h-4 w-4 sm:h-5 sm:w-5" />}
              onClick={() => handleDownload('csv')}
              className="text-sm sm:text-base hover:bg-blue-100"
            >
              CSV
            </Button>
            <Button
              variant="secondary"
              icon={<Download className="h-4 w-4 sm:h-5 sm:w-5" />}
              onClick={() => handleDownload('pdf')}
              className="text-sm sm:text-base hover:bg-red-100"
            >
              PDF
            </Button>
          </div>
        </Card>
      </div>
    </div>
  );
};

export default Reports;


================================================
File: src/pages/SecurelyVoting.tsx
================================================
import React, { useEffect, useState } from "react";
import { Shield, Vote, Clock } from "lucide-react";
import Card from "../components/Card";
import Button from "../components/Button";
import { useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { ethers } from "ethers";

const SecurelyVoting = () => {
  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(true);
  const [votedEventIds, setVotedEventIds] = useState([]);
  const [whitelistedAddresses, setWhitelistedAddresses] = useState([]);

  useEffect(() => {
    const fetchEvents = async () => {
      try {
        const response = await fetch("http://localhost:5000/api/secure-events");
        const data = await response.json();
        if (response.ok) {
          setEvents(data.events);
          setWhitelistedAddresses(data.whitelist);
        } else {
          toast.error("Failed to fetch secure events");
        }
      } catch (error) {
        console.error("Error fetching secure events:", error);
        toast.error("An error occurred while fetching secure events");
      } finally {
        setLoading(false);
      }
    };

    fetchEvents();
  }, []);

  const handleVote = async (eventId) => {
    if (!window.ethereum) {
      toast.error("Please install MetaMask to vote");
      return;
    }

    try {
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = provider.getSigner();
      const address = await signer.getAddress();

      // Check if address is whitelisted
      if (!whitelistedAddresses.includes(address.toLowerCase())) {
        toast.error("You are not authorized to vote in this election");
        return;
      }

      // Request transaction
      const tx = await signer.sendTransaction({
        to: "0x2EBCF132340C1a3eBBc0605A9abF08082F0c69e6", // Replace with your contract address
        value: ethers.utils.parseEther("0.01") // Optional: Add value if needed
      });
      
      // Wait for transaction to be mined
      await tx.wait();
      
      // Request signature
      const message = "Please sign this message to confirm your vote";
      const signature = await signer.signMessage(message);
      
      toast.success("Vote recorded successfully!");
      setVotedEventIds((prev) => [...prev, eventId]);
      
    } catch (error) {
      console.error("Error voting:", error);
      toast.error("Failed to record vote");
    }
  };

  if (loading) return <p className="text-center">Loading...</p>;

  return (
    <div className="min-h-screen bg-gray-100 py-8">
      <header className="mb-8 text-center">
        <h1 className="text-3xl font-bold text-indigo-700">Securely Voting</h1>
        <p className="mt-2 text-gray-600">Participate in secure elections with whitelisted addresses.</p>
      </header>

      <Card className="mx-auto max-w-4xl p-6">
        {events.length > 0 ? (
          events.map((event) => (
            <div key={event._id} className="mb-6">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-xl font-semibold text-gray-800">{event.title}</h2>
                <div className="flex items-center gap-2 text-gray-500">
                  <Clock className="w-4 h-4" />
                  <span>{new Date(event.endDate).toLocaleDateString()}</span>
                </div>
              </div>

              <Button
                onClick={() => handleVote(event._id)}
                variant="primary"
                className="w-full mt-4"
                disabled={votedEventIds.includes(event._id)}
              >
                {votedEventIds.includes(event._id) ? "Voted" : "Vote Securely"}
              </Button>
            </div>
          ))
        ) : (
          <p className="text-center text-gray-600">No secure elections available at the moment.</p>
        )}
      </Card>
    </div>
  );
};

export default SecurelyVoting;


================================================
File: src/pages/SystemLogs.tsx
================================================
import React from "react";
import { FileText, Shield, Activity } from "lucide-react";
import Card from "../components/Card";
import Button from "../components/Button";
import { useNavigate } from "react-router-dom";

const SystemLogs = () => {
  const navigate = useNavigate();

  const logFeatures = [
    {
      title: "View Logs",
      icon: <FileText className="h-8 w-8 text-indigo-600" />,
      description: "Access detailed system logs for debugging.",
      onClick: () => navigate("/view-logs"),
    },
    {
      title: "Security Logs",
      icon: <Shield className="h-8 w-8 text-indigo-600" />,
      description: "Monitor security-related activities and events.",
      onClick: () => navigate("/security-logs"),
    },
    {
      title: "Activity Logs",
      icon: <Activity className="h-8 w-8 text-indigo-600" />,
      description: "Track user activities and system events.",
      onClick: () => navigate("/activity-logs"),
    },
  ];

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-gray-100">
      {/* Header */}
      <div className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white py-12 text-center">
        <h1 className="text-4xl font-bold">System Logs</h1>
        <p className="mt-2 text-lg">Monitor and manage system logs.</p>
      </div>

      {/* Features Grid */}
      <div className="max-w-7xl mx-auto px-4 py-12 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {logFeatures.map((feature, index) => (
          <Card key={index} className="p-6 text-center hover:shadow-lg transition-shadow">
            <div className="flex justify-center mb-4">{feature.icon}</div>
            <h3 className="text-xl font-semibold text-gray-900 mb-2">
              {feature.title}
            </h3>
            <p className="text-gray-600 mb-4">{feature.description}</p>
            <Button onClick={feature.onClick} variant="primary" className="w-full">
              {feature.title}
            </Button>
          </Card>
        ))}
      </div>
    </div>
  );
};

export default SystemLogs;


================================================
File: src/pages/Tutorials.tsx
================================================
import React from 'react';
import { motion } from 'framer-motion';

// Tutorial data with 10 tutorials (some are blogs, some are YouTube videos)
const tutorialsData = [
  {
    id: 1,
    title: 'What is Blockchain? How Elections on Blockchain work?',
    description: 'Blockchain is a secure digital ledger, and blockchain elections use it to securely store votes.',
    duration: '5 min read',
    thumbnail: '',
    type: 'video', // Indicates this is a blog
    link: 'https://youtu.be/ENrjn-lD1e8?si=fbjV7eR4Ezp1zge9', // Link to the YouTube video
  },
  {
    id: 2,
    title: 'Could We Use Blockchain For Voting',
    description: 'Blockchain can securely record votes, ensuring transparency and preventing tampering.',
    duration: '8 min read',
    thumbnail: '', // Leave this empty for YouTube videos
    type: 'video', // Indicates this is a YouTube video
    link: 'https://youtu.be/G60DzaQy3a4?si=xXcSkZau0a1XbaJi', // Link to the blog page
  },
  {
    id: 3,
    title: 'Bringing Voting Systems into the Digital Age with Blockchain',
    description: 'Blockchain can modernize voting systems by offering secure, transparent, and tamper-proof digital voting.',
    duration: '12 min read',
    thumbnail: '', // Leave this empty for YouTube videos
    type: 'video', // Indicates this is a YouTube video
    link: 'https://youtu.be/EKzZOZUAbfg?si=g_b2YzlMI-HkkSNz', // Link to the YouTube video
  },
  // Add other tutorials here...
  // Ensure the total number of tutorials does not exceed 10
];

// Function to extract YouTube video ID from URL
const getYouTubeVideoId = (url) => {
  // Handle full YouTube URLs (https://www.youtube.com/watch?v=VIDEO_ID)
  if (url.includes('v=')) {
    const match = url.match(/[?&]v=([^&]+)/);
    return match ? match[1] : null;
  }
  // Handle shortened YouTube URLs (https://youtu.be/VIDEO_ID)
  else if (url.includes('youtu.be')) {
    const match = url.match(/youtu.be\/([^&]+)/);
    return match ? match[1] : null;
  }
  // Handle embedded YouTube URLs (https://www.youtube.com/embed/VIDEO_ID)
  else if (url.includes('embed')) {
    const match = url.match(/embed\/([^&]+)/);
    return match ? match[1] : null;
  }
  return null;
};

// Function to get YouTube embed URL
const getYouTubeEmbedUrl = (videoId) => {
  return `https://www.youtube.com/embed/${videoId}`;
};

// Tutorial Card Component
const TutorialCard = ({ tutorial }) => {
  const isVideo = tutorial.type === 'video';
  const videoId = isVideo ? getYouTubeVideoId(tutorial.link) : null;
  const embedUrl = isVideo ? getYouTubeEmbedUrl(videoId) : null;

  const handleClick = () => {
    if (tutorial.type === 'blog') {
      // Navigate to the blog page
      window.location.href = tutorial.link;
    } else if (tutorial.type === 'video') {
      // Open the YouTube video in a new tab
      window.open(tutorial.link, '_blank');
    }
  };

  return (
    <motion.div
      className="bg-white rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-300 cursor-pointer"
      whileHover={{ scale: 1.03 }}
      onClick={handleClick} // Make the card clickable
    >
      {isVideo ? (
        // Embed YouTube video
        <iframe
          src={embedUrl}
          title={tutorial.title}
          className="w-full h-48 sm:h-56 md:h-48 lg:h-56"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
          allowFullScreen
        ></iframe>
      ) : (
        // Show thumbnail for blogs
        <img
          src={tutorial.thumbnail}
          alt={tutorial.title}
          className="w-full h-48 sm:h-56 md:h-48 lg:h-56 object-cover"
          onError={(e) => {
            // Fallback to a default thumbnail if the image fails to load
            e.target.src = 'https://via.placeholder.com/300x200'; // Replace with a fallback image URL
          }}
        />
      )}
      <div className="p-4 sm:p-6">
        <h3 className="text-lg sm:text-xl font-bold text-gray-800">{tutorial.title}</h3>
        <p className="text-sm sm:text-base text-gray-600 mt-2">{tutorial.description}</p>
        <p className="mt-2 sm:mt-4 text-xs sm:text-sm text-blue-500">{tutorial.duration}</p>
      </div>
    </motion.div>
  );
};

// Tutorials Component
const Tutorials = () => {
  // Limit the number of tutorials to 10
  const limitedTutorialsData = tutorialsData.slice(0, 10);

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-gray-100 mt-[-25px]">
      {/* Header */}
      <div className="bg-gradient-to-l from-indigo-600 to-purple-600 text-white py-8 sm:py-12 px-4 text-center">
        <motion.h1
          className="text-3xl sm:text-4xl font-bold"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
        >
          Tutorials
        </motion.h1>
        <motion.p
          className="mt-2 text-base sm:text-lg"
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2, duration: 0.5 }}
        >
          Explore guides and resources to make the most out of EzyVote.
        </motion.p>
      </div>

      {/* Tutorials Grid */}
      <div className="max-w-6xl mx-auto px-4 py-8 sm:py-12 grid gap-6 sm:gap-8 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3">
        {limitedTutorialsData.map((tutorial) => (
          <TutorialCard key={tutorial.id} tutorial={tutorial} />
        ))}
      </div>
    </div>
  );
};

export default Tutorials;


================================================
File: src/pages/UserDashboard.tsx
================================================
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Wallet, Clock, Vote, Activity, BookOpen } from 'lucide-react';
import Card from '../components/Card';
import Button from '../components/Button';
import { useNavigate } from 'react-router-dom';
import { ethers } from 'ethers';
import BackToTopButton from '../components/BackToTopButton';

const Dashboard = ({ isSidebarOpen }: { isSidebarOpen: boolean }) => {
  const navigate = useNavigate();
  const [walletAddress, setWalletAddress] = useState<string | null>(null);
  const [isWalletConnected, setIsWalletConnected] = useState(false);

  const userFeatures = [
    {
      title: 'Upcoming Elections',
      icon: <Clock className="h-8 w-8 text-indigo-600" />,
      description: 'View and participate in upcoming voting events.',
      onClick: () => navigate('/upcoming-elections'),
    },
    {
      title: 'Securely Voting',
      icon: <Vote className="h-8 w-8 text-indigo-600" />,
      description: 'Cast your vote in securely active elections.',
      onClick: () => navigate('/securely-voting'),
    },
    {
      title: 'Voting History',
      icon: <BookOpen className="h-8 w-8 text-indigo-600" />,
      description: 'View your past voting activities and results.',
      onClick: () => navigate('/voting-history'),
    },
    {
      title: 'Live Results',
      icon: <Activity className="h-8 w-8 text-indigo-600" />,
      description: 'Monitor real-time voting results and analytics.',
      onClick: () => navigate('/live-results'),
    },
  ];

  const connectWallet = async () => {
    if (typeof window.ethereum === 'undefined') {
      alert('MetaMask is not installed. Please install MetaMask to connect your wallet.');
      return;
    }

    try {
      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
      setWalletAddress(accounts[0]);
      setIsWalletConnected(true);
    } catch (error) {
      alert('Could not connect to MetaMask. Please try again.');
    }
  };

  return (
    <div
      className={`flex-1 transition-all duration-300 mt-[-50px] ${
        isSidebarOpen ? 'ml-1' : 'ml-0'
      } p-6`}
    >
      {/* Header */}
      <div className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white py-12 text-center  mb-8">
        <h1 className="text-4xl font-bold">User Dashboard</h1>
        <p className="mt-2 text-lg">Participate in elections and manage your voting activities.</p>
      </div>

      {/* Features Grid */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {userFeatures.map((feature, index) => (
          <motion.div
            key={index}
            whileHover={{ scale: 1.05 }}
            transition={{ duration: 0.3 }}
          >
            <Card className="p-6 text-center hover:shadow-lg transition-shadow">
              <div className="flex justify-center mb-4">{feature.icon}</div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                {feature.title}
              </h3>
              <p className="text-gray-600 mb-4">{feature.description}</p>
              <Button onClick={feature.onClick} variant="primary" className="w-full">
                {feature.title}
              </Button>
            </Card>
          </motion.div>
        ))}
      </div>

      {/* Wallet Connection Status */}
      {isWalletConnected && (
        <div className="mt-8 text-center">
          <p className="text-gray-700">
            Connected wallet: <strong>{walletAddress}</strong>
          </p>
        </div>
      )}
      <BackToTopButton />
    </div>
  );
};

export default Dashboard;


================================================
File: src/pages/ViewPastElections.tsx
================================================
import React, { useEffect, useState } from "react";
import { Clock, ChevronRight } from "lucide-react";
import { useNavigate } from "react-router-dom";

const ViewPastElections = () => {
  const navigate = useNavigate();
  const [elections, setElections] = useState([]);

  useEffect(() => {
    // Fetch past elections from the backend
    fetch("http://localhost:5000/api/events")
      .then((res) => res.json())
      .then((data) => setElections(data));
  }, []);

  return (
    <div className="p-6">
      {/* Header */}
      <h1 className="text-2xl font-bold mb-4">Past Elections</h1>
      <p className="text-gray-600 mb-8">View details of all past elections.</p>

      {/* Elections List */}
      <div className="space-y-4">
        {elections.length > 0 ? (
          elections.map((election, index) => (
            <div
              key={index}
              className="bg-white shadow rounded-lg p-4 flex justify-between items-center cursor-pointer"
              onClick={() => navigate(`/election-details/${election.id}`)}
            >
              <div>
                <h3 className="font-semibold">{election.title}</h3>
                <p className="text-sm text-gray-600">
                  Total Votes: {election.candidates.reduce((sum, candidate) => sum + candidate.votes, 0)}
                </p>
              </div>
              <ChevronRight className="text-gray-400" />
            </div>
          ))
        ) : (
          <p className="text-gray-600">No past elections available.</p>
        )}
      </div>
    </div>
  );
};

export default ViewPastElections;


================================================
File: src/pages/VoteNow.tsx
================================================
import React, { useEffect, useState } from "react";
import { Clock } from "lucide-react";
import Card from "../components/Card";
import Button from "../components/Button";
import { useNavigate, useParams } from "react-router-dom";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { ethers } from "ethers";
import { useWallet } from "../components/WalletContext";

const VoteNow = () => {
  const { eventId } = useParams(); // Get the eventId from the URL
  const navigate = useNavigate();
  const [event, setEvent] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [voted, setVoted] = useState(false);
  const [selectedCandidate, setSelectedCandidate] = useState<number | null>(null);
  const [timeRemaining, setTimeRemaining] = useState("");
  const { walletAddress, isWalletConnected, connectWallet } = useWallet();

  useEffect(() => {
    const fetchEvent = async () => {
      try {
        // Fetch event data from the backend
        const response = await fetch(`http://localhost:5000/api/events/${eventId}`);
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        const data = await response.json();
        setEvent(data);
      } catch (error) {
        console.error("Error fetching event:", error);
        toast.error("Failed to fetch event. Please check your connection or try again later.");
      } finally {
        setLoading(false);
      }
    };

    fetchEvent();
  }, [eventId]);

  const handleVote = async () => {
    if (!isWalletConnected) {
      toast.error("Please connect your wallet to vote.");
      return;
    }

    if (selectedCandidate === null) {
      toast.error("Please select a candidate before submitting your vote.");
      return;
    }

    try {
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const signer = provider.getSigner();
      const walletAddress = await signer.getAddress();

      // Step 1: Request MetaMask transaction confirmation (send fees to the network)
      const tx = await signer.sendTransaction({
        to: ethers.constants.AddressZero, // Sending to the zero address (network fees only)
        value: ethers.utils.parseEther("0.01"), // Optional: Add value if needed
      });
      console.log("Transaction sent:", tx.hash);

      // Wait for the transaction to be mined
      await tx.wait();
      console.log("Transaction confirmed.");

      // Step 2: Request signature
      const message = "Please sign this message to confirm your vote";
      const signature = await signer.signMessage(message);
      console.log("Signature received:", signature);

      // Step 3: Send vote to the backend
      console.log("Sending vote to backend:", {
        eventId,
        candidateIndex: selectedCandidate,
        signature,
        walletAddress,
      });

      const voteResponse = await fetch(`http://localhost:5000/api/vote`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          eventId,
          candidateIndex: selectedCandidate,
          signature,
          walletAddress,
        }),
      });

      if (!voteResponse.ok) {
        const errorResponse = await voteResponse.text();
        console.error("Failed to record vote. Server response:", errorResponse);
        throw new Error(errorResponse || "Failed to record vote.");
      }

      // Step 4: Log candidate vote counts to the console
      if (event?.candidates) {
        event.candidates.forEach((candidate: any, index: number) => {
          console.log(`${candidate.name}: ${index === selectedCandidate ? 1 : 0}`);
        });
      }

      // Step 5: Show success toast message
      toast.success("Vote recorded successfully!");
      setVoted(true);
    } catch (error) {
      console.error("Error voting:", error);
      toast.error("Failed to record vote. Please try again.");
    }
  };

  const formatDate = (dateString: string): string => {
    const date = new Date(dateString);
    const day = String(date.getDate()).padStart(2, "0");
    const month = String(date.getMonth() + 1).padStart(2, "0");
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
  };

  const calculateTimeRemaining = (endDate: string): string => {
    const now = new Date();
    const end = new Date(endDate);
    const diff = end.getTime() - now.getTime();

    if (diff <= 0) return "Voting Ended";

    const hours = Math.floor(diff / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((diff % (1000 * 60)) / 1000);

    return `${hours}h ${minutes}m ${seconds}s`;
  };

  useEffect(() => {
    if (event) {
      const interval = setInterval(() => {
        setTimeRemaining(calculateTimeRemaining(event.endDate));
      }, 1000);
      return () => clearInterval(interval);
    }
  }, [event]);

  if (loading) return <p className="text-center">Loading...</p>;
  if (!event) return <p className="text-center text-gray-600">Event not found.</p>;

  return (
    <div className="min-h-screen bg-gray-100 py-8">
      <header className="mb-8 text-center">
        <h1 className="text-3xl font-bold text-indigo-700">Vote Now</h1>
        <p className="mt-2 text-gray-600">Participate in active elections and make your voice heard.</p>
      </header>

      <Card className="mx-auto max-w-4xl p-6">
        {/* Countdown Timer */}
        <div className="flex items-center justify-center mb-6 text-lg font-semibold text-gray-700">
          <Clock className="w-6 h-6 mr-2" />
          <span>{timeRemaining}</span>
        </div>

        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-semibold text-gray-800">{event.title}</h2>
          <div className="flex items-center gap-2 text-gray-500">
            <span>{formatDate(event.endDate)}</span>
          </div>
        </div>

        <div className="space-y-4">
          {event.candidates.map((candidate: any, index: number) => (
            <label
              key={index}
              className={`flex items-center justify-between p-4 bg-white rounded-lg shadow-sm cursor-pointer ${
                selectedCandidate === index ? "border-2 border-indigo-500" : ""
              }`}
            >
              <div>
                <h3 className="font-semibold">{candidate.name}</h3>
                <p className="text-sm text-gray-600">{candidate.bio}</p>
              </div>
              <input
                type="radio"
                name="candidate"
                value={index}
                checked={selectedCandidate === index}
                onChange={() => setSelectedCandidate(index)}
                className="ml-4"
                disabled={voted || timeRemaining === "Voting Ended"}
              />
            </label>
          ))}
        </div>

        <div className="flex justify-end mt-6">
          <Button
            onClick={handleVote}
            variant="primary"
            disabled={voted || timeRemaining === "Voting Ended" || selectedCandidate === null}
          >
            {voted ? "Voted" : "Submit Vote"}
          </Button>
        </div>
      </Card>
    </div>
  );
};

export default VoteNow;


================================================
File: src/pages/VotingHistory.tsx
================================================
import React from "react";
import { Clock, FileText, BarChart } from "lucide-react";
import Card from "../components/Card";
import Button from "../components/Button";
import { useNavigate } from "react-router-dom";

const VotingHistory = () => {
  const navigate = useNavigate();

  const historyFeatures = [
    {
      title: "View Past Elections",
      icon: <Clock className="h-8 w-8 text-indigo-600" />,
      description: "Explore all past elections and their results.",
      onClick: () => navigate("/past-elections"),
    },
    {
      title: "Download Reports",
      icon: <FileText className="h-8 w-8 text-indigo-600" />,
      description: "Generate and download detailed election reports.",
      onClick: () => navigate("/download-reports"),
    },
    {
      title: "Analytics",
      icon: <BarChart className="h-8 w-8 text-indigo-600" />,
      description: "Analyze voting trends and patterns.",
      onClick: () => navigate("/voting-analytics"),
    },
  ];

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-gray-100">
      {/* Header */}
      <div className="bg-gradient-to-r from-indigo-600 to-purple-600 text-white py-12 text-center">
        <h1 className="text-4xl font-bold">Voting History</h1>
        <p className="mt-2 text-lg">Explore past elections and voting data.</p>
      </div>

      {/* Features Grid */}
      <div className="max-w-7xl mx-auto px-4 py-12 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {historyFeatures.map((feature, index) => (
          <Card key={index} className="p-6 text-center hover:shadow-lg transition-shadow">
            <div className="flex justify-center mb-4">{feature.icon}</div>
            <h3 className="text-xl font-semibold text-gray-900 mb-2">
              {feature.title}
            </h3>
            <p className="text-gray-600 mb-4">{feature.description}</p>
            <Button onClick={feature.onClick} variant="primary" className="w-full">
              {feature.title}
            </Button>
          </Card>
        ))}
      </div>
    </div>
  );
};

export default VotingHistory;


